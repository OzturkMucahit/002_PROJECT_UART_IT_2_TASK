
002_PROJECT_UART_IT_2_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005304  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005558  08005558  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005560  08005560  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005564  08005564  00015564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004098  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000410c  2000410c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bf8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab6  00000000  00000000  00032c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00035758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00036858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d2c  00000000  00000000  00037840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013223  00000000  00000000  0005a56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3be9  00000000  00000000  0006d78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141378  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a84  00000000  00000000  001413c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800547c 	.word	0x0800547c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800547c 	.word	0x0800547c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000090 	.word	0x20000090
 80005a4:	200000e4 	.word	0x200000e4

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b08e      	sub	sp, #56	; 0x38
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fc79 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f833 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8c5 	bl	8000744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f899 	bl	80006f0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <main+0x64>)
 80005c0:	f107 041c 	add.w	r4, r7, #28
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 ff60 	bl	800349e <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <main+0x68>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0x6c>)
 80005e6:	463c      	mov	r4, r7
 80005e8:	461d      	mov	r5, r3
 80005ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 ff4f 	bl	800349e <osThreadCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <main+0x70>)
 8000604:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000606:	f002 ff43 	bl	8003490 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	e7fe      	b.n	800060a <main+0x62>
 800060c:	080054a4 	.word	0x080054a4
 8000610:	20000328 	.word	0x20000328
 8000614:	080054c0 	.word	0x080054c0
 8000618:	2000032c 	.word	0x2000032c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fabe 	bl	8004bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 ffa9 	bl	80015f8 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 fa68 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fa0a 	bl	8001ae8 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 fa51 	bl	8000b80 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f001 fede 	bl	80024e8 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 fa25 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200002e4 	.word	0x200002e4
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_GPIO_Init+0x9c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0x9c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x9c>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x9c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0xa0>)
 80007b6:	f000 feeb 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0xa0>)
 80007d4:	f000 fd40 	bl	8001258 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020c00 	.word	0x40020c00

080007e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		// USART Interrupt Receive Function
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	/* rx_buffer start over solution. */
	rx_buffer[count] = *rx_call_buffer;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_UART_RxCpltCallback+0x44>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_UART_RxCpltCallback+0x48>)
 80007f8:	7819      	ldrb	r1, [r3, #0]
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_UART_RxCpltCallback+0x4c>)
 80007fc:	5499      	strb	r1, [r3, r2]
	count++;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_UART_RxCpltCallback+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_UART_RxCpltCallback+0x44>)
 8000808:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_call_buffer, 1);
 800080a:	2201      	movs	r2, #1
 800080c:	4908      	ldr	r1, [pc, #32]	; (8000830 <HAL_UART_RxCpltCallback+0x48>)
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_UART_RxCpltCallback+0x50>)
 8000810:	f001 fefc 	bl	800260c <HAL_UART_Receive_IT>

	if (*rx_call_buffer == '\n')
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_UART_RxCpltCallback+0x48>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b0a      	cmp	r3, #10
 800081a:	d102      	bne.n	8000822 <HAL_UART_RxCpltCallback+0x3a>
	{
		count = 0;
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <HAL_UART_RxCpltCallback+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	}
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000355 	.word	0x20000355
 8000830:	20000350 	.word	0x20000350
 8000834:	20000344 	.word	0x20000344
 8000838:	200002e4 	.word	0x200002e4

0800083c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)		// LEDON - LEDOFF TASK.
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task01 Work ! \r\n"));		// TASK01 USART Transmit and Cooperative Multitasking test.
 8000844:	4992      	ldr	r1, [pc, #584]	; (8000a90 <StartTask01+0x254>)
 8000846:	4893      	ldr	r0, [pc, #588]	; (8000a94 <StartTask01+0x258>)
 8000848:	f004 f9b8 	bl	8004bbc <siprintf>
 800084c:	4603      	mov	r3, r0
 800084e:	b29b      	uxth	r3, r3
 8000850:	461a      	mov	r2, r3
 8000852:	4990      	ldr	r1, [pc, #576]	; (8000a94 <StartTask01+0x258>)
 8000854:	4890      	ldr	r0, [pc, #576]	; (8000a98 <StartTask01+0x25c>)
 8000856:	f001 fe94 	bl	8002582 <HAL_UART_Transmit_IT>
	  osDelay(1000);
 800085a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085e:	f002 fe6a 	bl	8003536 <osDelay>

	  HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_call_buffer, 1);
 8000862:	2201      	movs	r2, #1
 8000864:	498d      	ldr	r1, [pc, #564]	; (8000a9c <StartTask01+0x260>)
 8000866:	488c      	ldr	r0, [pc, #560]	; (8000a98 <StartTask01+0x25c>)
 8000868:	f001 fed0 	bl	800260c <HAL_UART_Receive_IT>

      if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a' && rx_buffer[3] == 'r' && rx_buffer[4] == 't')		// "start" string.
 800086c:	4b8c      	ldr	r3, [pc, #560]	; (8000aa0 <StartTask01+0x264>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b73      	cmp	r3, #115	; 0x73
 8000872:	d117      	bne.n	80008a4 <StartTask01+0x68>
 8000874:	4b8a      	ldr	r3, [pc, #552]	; (8000aa0 <StartTask01+0x264>)
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	2b74      	cmp	r3, #116	; 0x74
 800087a:	d113      	bne.n	80008a4 <StartTask01+0x68>
 800087c:	4b88      	ldr	r3, [pc, #544]	; (8000aa0 <StartTask01+0x264>)
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	2b61      	cmp	r3, #97	; 0x61
 8000882:	d10f      	bne.n	80008a4 <StartTask01+0x68>
 8000884:	4b86      	ldr	r3, [pc, #536]	; (8000aa0 <StartTask01+0x264>)
 8000886:	78db      	ldrb	r3, [r3, #3]
 8000888:	2b72      	cmp	r3, #114	; 0x72
 800088a:	d10b      	bne.n	80008a4 <StartTask01+0x68>
 800088c:	4b84      	ldr	r3, [pc, #528]	; (8000aa0 <StartTask01+0x264>)
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	2b74      	cmp	r3, #116	; 0x74
 8000892:	d107      	bne.n	80008a4 <StartTask01+0x68>
	  {
		  vTaskResume(Task02Handle);
 8000894:	4b83      	ldr	r3, [pc, #524]	; (8000aa4 <StartTask01+0x268>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f003 f99f 	bl	8003bdc <vTaskResume>
		  rx_stop = 0;
 800089e:	4b82      	ldr	r3, [pc, #520]	; (8000aa8 <StartTask01+0x26c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'n' &&	// "ledon500" string.
 80008a4:	4b7e      	ldr	r3, [pc, #504]	; (8000aa0 <StartTask01+0x264>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b6c      	cmp	r3, #108	; 0x6c
 80008aa:	d123      	bne.n	80008f4 <StartTask01+0xb8>
 80008ac:	4b7c      	ldr	r3, [pc, #496]	; (8000aa0 <StartTask01+0x264>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	2b65      	cmp	r3, #101	; 0x65
 80008b2:	d11f      	bne.n	80008f4 <StartTask01+0xb8>
 80008b4:	4b7a      	ldr	r3, [pc, #488]	; (8000aa0 <StartTask01+0x264>)
 80008b6:	789b      	ldrb	r3, [r3, #2]
 80008b8:	2b64      	cmp	r3, #100	; 0x64
 80008ba:	d11b      	bne.n	80008f4 <StartTask01+0xb8>
 80008bc:	4b78      	ldr	r3, [pc, #480]	; (8000aa0 <StartTask01+0x264>)
 80008be:	78db      	ldrb	r3, [r3, #3]
 80008c0:	2b6f      	cmp	r3, #111	; 0x6f
 80008c2:	d117      	bne.n	80008f4 <StartTask01+0xb8>
 80008c4:	4b76      	ldr	r3, [pc, #472]	; (8000aa0 <StartTask01+0x264>)
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	2b6e      	cmp	r3, #110	; 0x6e
 80008ca:	d113      	bne.n	80008f4 <StartTask01+0xb8>
			  rx_buffer[5] == '5' && rx_buffer[6] == '0' && rx_buffer[7] == '0')
 80008cc:	4b74      	ldr	r3, [pc, #464]	; (8000aa0 <StartTask01+0x264>)
 80008ce:	795b      	ldrb	r3, [r3, #5]
	  if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'n' &&	// "ledon500" string.
 80008d0:	2b35      	cmp	r3, #53	; 0x35
 80008d2:	d10f      	bne.n	80008f4 <StartTask01+0xb8>
			  rx_buffer[5] == '5' && rx_buffer[6] == '0' && rx_buffer[7] == '0')
 80008d4:	4b72      	ldr	r3, [pc, #456]	; (8000aa0 <StartTask01+0x264>)
 80008d6:	799b      	ldrb	r3, [r3, #6]
 80008d8:	2b30      	cmp	r3, #48	; 0x30
 80008da:	d10b      	bne.n	80008f4 <StartTask01+0xb8>
 80008dc:	4b70      	ldr	r3, [pc, #448]	; (8000aa0 <StartTask01+0x264>)
 80008de:	79db      	ldrb	r3, [r3, #7]
 80008e0:	2b30      	cmp	r3, #48	; 0x30
 80008e2:	d107      	bne.n	80008f4 <StartTask01+0xb8>
	  {
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)rx_buffer, 10);
 80008e4:	220a      	movs	r2, #10
 80008e6:	496e      	ldr	r1, [pc, #440]	; (8000aa0 <StartTask01+0x264>)
 80008e8:	486b      	ldr	r0, [pc, #428]	; (8000a98 <StartTask01+0x25c>)
 80008ea:	f001 fe4a 	bl	8002582 <HAL_UART_Transmit_IT>
		  led_case = 1;
 80008ee:	4b6f      	ldr	r3, [pc, #444]	; (8000aac <StartTask01+0x270>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'f' &&	// "ledoff500" string.
 80008f4:	4b6a      	ldr	r3, [pc, #424]	; (8000aa0 <StartTask01+0x264>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b6c      	cmp	r3, #108	; 0x6c
 80008fa:	d127      	bne.n	800094c <StartTask01+0x110>
 80008fc:	4b68      	ldr	r3, [pc, #416]	; (8000aa0 <StartTask01+0x264>)
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	2b65      	cmp	r3, #101	; 0x65
 8000902:	d123      	bne.n	800094c <StartTask01+0x110>
 8000904:	4b66      	ldr	r3, [pc, #408]	; (8000aa0 <StartTask01+0x264>)
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	2b64      	cmp	r3, #100	; 0x64
 800090a:	d11f      	bne.n	800094c <StartTask01+0x110>
 800090c:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <StartTask01+0x264>)
 800090e:	78db      	ldrb	r3, [r3, #3]
 8000910:	2b6f      	cmp	r3, #111	; 0x6f
 8000912:	d11b      	bne.n	800094c <StartTask01+0x110>
 8000914:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <StartTask01+0x264>)
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	2b66      	cmp	r3, #102	; 0x66
 800091a:	d117      	bne.n	800094c <StartTask01+0x110>
			  rx_buffer[5] == 'f' && rx_buffer[6] == '5' && rx_buffer[7] == '0' && rx_buffer[8] == '0')
 800091c:	4b60      	ldr	r3, [pc, #384]	; (8000aa0 <StartTask01+0x264>)
 800091e:	795b      	ldrb	r3, [r3, #5]
	  if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'f' &&	// "ledoff500" string.
 8000920:	2b66      	cmp	r3, #102	; 0x66
 8000922:	d113      	bne.n	800094c <StartTask01+0x110>
			  rx_buffer[5] == 'f' && rx_buffer[6] == '5' && rx_buffer[7] == '0' && rx_buffer[8] == '0')
 8000924:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <StartTask01+0x264>)
 8000926:	799b      	ldrb	r3, [r3, #6]
 8000928:	2b35      	cmp	r3, #53	; 0x35
 800092a:	d10f      	bne.n	800094c <StartTask01+0x110>
 800092c:	4b5c      	ldr	r3, [pc, #368]	; (8000aa0 <StartTask01+0x264>)
 800092e:	79db      	ldrb	r3, [r3, #7]
 8000930:	2b30      	cmp	r3, #48	; 0x30
 8000932:	d10b      	bne.n	800094c <StartTask01+0x110>
 8000934:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <StartTask01+0x264>)
 8000936:	7a1b      	ldrb	r3, [r3, #8]
 8000938:	2b30      	cmp	r3, #48	; 0x30
 800093a:	d107      	bne.n	800094c <StartTask01+0x110>
	  {
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)rx_buffer, 10);
 800093c:	220a      	movs	r2, #10
 800093e:	4958      	ldr	r1, [pc, #352]	; (8000aa0 <StartTask01+0x264>)
 8000940:	4855      	ldr	r0, [pc, #340]	; (8000a98 <StartTask01+0x25c>)
 8000942:	f001 fe1e 	bl	8002582 <HAL_UART_Transmit_IT>
		  led_case = 2;
 8000946:	4b59      	ldr	r3, [pc, #356]	; (8000aac <StartTask01+0x270>)
 8000948:	2202      	movs	r2, #2
 800094a:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_stop == 0 && rx_ledon == 0 && rx_ledoff == 0)		// Default mode.
 800094c:	4b56      	ldr	r3, [pc, #344]	; (8000aa8 <StartTask01+0x26c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d11c      	bne.n	800098e <StartTask01+0x152>
 8000954:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <StartTask01+0x274>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d118      	bne.n	800098e <StartTask01+0x152>
 800095c:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <StartTask01+0x278>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d114      	bne.n	800098e <StartTask01+0x152>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096a:	4853      	ldr	r0, [pc, #332]	; (8000ab8 <StartTask01+0x27c>)
 800096c:	f000 fe10 	bl	8001590 <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 8000970:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000974:	f000 fad8 	bl	8000f28 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097e:	484e      	ldr	r0, [pc, #312]	; (8000ab8 <StartTask01+0x27c>)
 8000980:	f000 fe06 	bl	8001590 <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 8000984:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000988:	f000 face 	bl	8000f28 <HAL_Delay>
 800098c:	e00c      	b.n	80009a8 <StartTask01+0x16c>
	  }

	  else if (rx_stop == 1)
 800098e:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <StartTask01+0x26c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d108      	bne.n	80009a8 <StartTask01+0x16c>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);		// Led state control with "stop" string
 8000996:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099a:	4847      	ldr	r0, [pc, #284]	; (8000ab8 <StartTask01+0x27c>)
 800099c:	f000 fe11 	bl	80015c2 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 80009a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a4:	f000 fac0 	bl	8000f28 <HAL_Delay>
	  }

	  switch (led_case)			// "Ledon500" and "ledoff500" setting with switch-case operation.
 80009a8:	4b40      	ldr	r3, [pc, #256]	; (8000aac <StartTask01+0x270>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d002      	beq.n	80009b6 <StartTask01+0x17a>
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d004      	beq.n	80009be <StartTask01+0x182>
 80009b4:	e007      	b.n	80009c6 <StartTask01+0x18a>
	  {
	  case 1:
		  rx_ledon = 1;
 80009b6:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <StartTask01+0x274>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
		  break;
 80009bc:	e003      	b.n	80009c6 <StartTask01+0x18a>

	  case 2:
		  rx_ledoff = 1;
 80009be:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <StartTask01+0x278>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
		  break;
 80009c4:	bf00      	nop
	  }

	  if (rx_stop == 0 && rx_ledon == 1 && rx_ledoff == 0)			// Only "ledon500" string receive state.
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <StartTask01+0x26c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d11b      	bne.n	8000a06 <StartTask01+0x1ca>
 80009ce:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <StartTask01+0x274>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d117      	bne.n	8000a06 <StartTask01+0x1ca>
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <StartTask01+0x278>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d113      	bne.n	8000a06 <StartTask01+0x1ca>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e4:	4834      	ldr	r0, [pc, #208]	; (8000ab8 <StartTask01+0x27c>)
 80009e6:	f000 fdd3 	bl	8001590 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80009ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ee:	f000 fa9b 	bl	8000f28 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <StartTask01+0x27c>)
 80009fa:	f000 fdc9 	bl	8001590 <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 80009fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a02:	f000 fa91 	bl	8000f28 <HAL_Delay>
	  }

	  if (rx_stop == 0 && rx_ledon == 1 && rx_ledoff == 1)			// "ledon500" && "ledoff500" strings receive state.
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <StartTask01+0x26c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d11b      	bne.n	8000a46 <StartTask01+0x20a>
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <StartTask01+0x274>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d117      	bne.n	8000a46 <StartTask01+0x20a>
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <StartTask01+0x278>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d113      	bne.n	8000a46 <StartTask01+0x20a>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a24:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <StartTask01+0x27c>)
 8000a26:	f000 fdb3 	bl	8001590 <HAL_GPIO_WritePin>
		  HAL_Delay(3000);
 8000a2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a2e:	f000 fa7b 	bl	8000f28 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a38:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <StartTask01+0x27c>)
 8000a3a:	f000 fda9 	bl	8001590 <HAL_GPIO_WritePin>
		  HAL_Delay(3000);
 8000a3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a42:	f000 fa71 	bl	8000f28 <HAL_Delay>
	  }

	  if (rx_stop == 0 && rx_ledon == 0 && rx_ledoff == 1)			// Only "ledoff500" string receive state.
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <StartTask01+0x26c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f47f aefa 	bne.w	8000844 <StartTask01+0x8>
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <StartTask01+0x274>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f47f aef5 	bne.w	8000844 <StartTask01+0x8>
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <StartTask01+0x278>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	f47f aef0 	bne.w	8000844 <StartTask01+0x8>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6a:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <StartTask01+0x27c>)
 8000a6c:	f000 fd90 	bl	8001590 <HAL_GPIO_WritePin>
		  HAL_Delay(3000);
 8000a70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a74:	f000 fa58 	bl	8000f28 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <StartTask01+0x27c>)
 8000a80:	f000 fd86 	bl	8001590 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000a84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a88:	f000 fa4e 	bl	8000f28 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task01 Work ! \r\n"));		// TASK01 USART Transmit and Cooperative Multitasking test.
 8000a8c:	e6da      	b.n	8000844 <StartTask01+0x8>
 8000a8e:	bf00      	nop
 8000a90:	080054dc 	.word	0x080054dc
 8000a94:	20000330 	.word	0x20000330
 8000a98:	200002e4 	.word	0x200002e4
 8000a9c:	20000350 	.word	0x20000350
 8000aa0:	20000344 	.word	0x20000344
 8000aa4:	2000032c 	.word	0x2000032c
 8000aa8:	20000351 	.word	0x20000351
 8000aac:	20000352 	.word	0x20000352
 8000ab0:	20000353 	.word	0x20000353
 8000ab4:	20000354 	.word	0x20000354
 8000ab8:	40020c00 	.word	0x40020c00

08000abc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)		// ECHO TASK.
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task02 Work ! \r\n"));		// TASK02 USART Transmit and Cooperative Multitasking test.
 8000ac4:	491d      	ldr	r1, [pc, #116]	; (8000b3c <StartTask02+0x80>)
 8000ac6:	481e      	ldr	r0, [pc, #120]	; (8000b40 <StartTask02+0x84>)
 8000ac8:	f004 f878 	bl	8004bbc <siprintf>
 8000acc:	4603      	mov	r3, r0
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	491b      	ldr	r1, [pc, #108]	; (8000b40 <StartTask02+0x84>)
 8000ad4:	481b      	ldr	r0, [pc, #108]	; (8000b44 <StartTask02+0x88>)
 8000ad6:	f001 fd54 	bl	8002582 <HAL_UART_Transmit_IT>
	  osDelay(1000);
 8000ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ade:	f002 fd2a 	bl	8003536 <osDelay>

	  HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_call_buffer, 1);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4918      	ldr	r1, [pc, #96]	; (8000b48 <StartTask02+0x8c>)
 8000ae6:	4817      	ldr	r0, [pc, #92]	; (8000b44 <StartTask02+0x88>)
 8000ae8:	f001 fd90 	bl	800260c <HAL_UART_Receive_IT>

	  if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'o' && rx_buffer[3] == 'p')		// Echo task will be suspend with "stop" string.
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <StartTask02+0x90>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b73      	cmp	r3, #115	; 0x73
 8000af2:	d118      	bne.n	8000b26 <StartTask02+0x6a>
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <StartTask02+0x90>)
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	2b74      	cmp	r3, #116	; 0x74
 8000afa:	d114      	bne.n	8000b26 <StartTask02+0x6a>
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <StartTask02+0x90>)
 8000afe:	789b      	ldrb	r3, [r3, #2]
 8000b00:	2b6f      	cmp	r3, #111	; 0x6f
 8000b02:	d110      	bne.n	8000b26 <StartTask02+0x6a>
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <StartTask02+0x90>)
 8000b06:	78db      	ldrb	r3, [r3, #3]
 8000b08:	2b70      	cmp	r3, #112	; 0x70
 8000b0a:	d10c      	bne.n	8000b26 <StartTask02+0x6a>
	  {
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)rx_buffer, 10);
 8000b0c:	220a      	movs	r2, #10
 8000b0e:	490f      	ldr	r1, [pc, #60]	; (8000b4c <StartTask02+0x90>)
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <StartTask02+0x88>)
 8000b12:	f001 fd36 	bl	8002582 <HAL_UART_Transmit_IT>
		  rx_stop = 1;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <StartTask02+0x94>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
		  vTaskSuspend(Task02Handle);
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <StartTask02+0x98>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 ff97 	bl	8003a54 <vTaskSuspend>
	  }

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <StartTask02+0x9c>)
 8000b2c:	f000 fd49 	bl	80015c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b34:	f000 f9f8 	bl	8000f28 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task02 Work ! \r\n"));		// TASK02 USART Transmit and Cooperative Multitasking test.
 8000b38:	e7c4      	b.n	8000ac4 <StartTask02+0x8>
 8000b3a:	bf00      	nop
 8000b3c:	080054f0 	.word	0x080054f0
 8000b40:	20000330 	.word	0x20000330
 8000b44:	200002e4 	.word	0x200002e4
 8000b48:	20000350 	.word	0x20000350
 8000b4c:	20000344 	.word	0x20000344
 8000b50:	20000351 	.word	0x20000351
 8000b54:	2000032c 	.word	0x2000032c
 8000b58:	40020c00 	.word	0x40020c00

08000b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6e:	f000 f9bb 	bl	8000ee8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40010000 	.word	0x40010000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_MspInit+0x54>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <HAL_MspInit+0x54>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_MspInit+0x54>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_MspInit+0x54>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_MspInit+0x54>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_MspInit+0x54>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	210f      	movs	r1, #15
 8000bce:	f06f 0001 	mvn.w	r0, #1
 8000bd2:	f000 fa85 	bl	80010e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d133      	bne.n	8000c6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <HAL_UART_MspInit+0x9c>)
 8000c5a:	f000 fafd 	bl	8001258 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2105      	movs	r1, #5
 8000c62:	2026      	movs	r0, #38	; 0x26
 8000c64:	f000 fa3c 	bl	80010e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c68:	2026      	movs	r0, #38	; 0x26
 8000c6a:	f000 fa55 	bl	8001118 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	; 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <HAL_InitTick+0xd4>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <HAL_InitTick+0xd4>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <HAL_InitTick+0xd4>)
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb0:	f107 020c 	add.w	r2, r7, #12
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 f934 	bl	8001f28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cc0:	f001 f91e 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ccc:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <HAL_InitTick+0xd8>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	0c9b      	lsrs	r3, r3, #18
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cd8:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <HAL_InitTick+0xdc>)
 8000cda:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <HAL_InitTick+0xe0>)
 8000cdc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <HAL_InitTick+0xdc>)
 8000ce0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <HAL_InitTick+0xdc>)
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_InitTick+0xdc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_InitTick+0xdc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_InitTick+0xdc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cfe:	4818      	ldr	r0, [pc, #96]	; (8000d60 <HAL_InitTick+0xdc>)
 8000d00:	f001 f944 	bl	8001f8c <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d11b      	bne.n	8000d4a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d12:	4813      	ldr	r0, [pc, #76]	; (8000d60 <HAL_InitTick+0xdc>)
 8000d14:	f001 f994 	bl	8002040 <HAL_TIM_Base_Start_IT>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d111      	bne.n	8000d4a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d26:	2019      	movs	r0, #25
 8000d28:	f000 f9f6 	bl	8001118 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d808      	bhi.n	8000d44 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d32:	2200      	movs	r2, #0
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	2019      	movs	r0, #25
 8000d38:	f000 f9d2 	bl	80010e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_InitTick+0xe4>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e002      	b.n	8000d4a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3730      	adds	r7, #48	; 0x30
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	20000358 	.word	0x20000358
 8000d64:	40010000 	.word	0x40010000
 8000d68:	20000004 	.word	0x20000004

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d9e:	f001 f9bf 	bl	8002120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000358 	.word	0x20000358

08000dac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <USART2_IRQHandler+0x10>)
 8000db2:	f001 fc5b 	bl	800266c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200002e4 	.word	0x200002e4

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f003 fea4 	bl	8004b3c <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20020000 	.word	0x20020000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	200003a0 	.word	0x200003a0
 8000e28:	20004110 	.word	0x20004110

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7a:	f7ff ffd7 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f003 fe63 	bl	8004b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb91 	bl	80005a8 <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e94:	08005568 	.word	0x08005568
  ldr r2, =_sbss
 8000e98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e9c:	2000410c 	.word	0x2000410c

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f8fc 	bl	80010ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f7ff fed6 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fe58 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	200003a4 	.word	0x200003a4

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200003a4 	.word	0x200003a4

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff4c 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f2:	f7ff ff61 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 80010f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff ffb1 	bl	8001064 <NVIC_EncodePriority>
 8001102:	4602      	mov	r2, r0
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff80 	bl	8001010 <__NVIC_SetPriority>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff54 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001142:	f7ff fee5 	bl	8000f10 <HAL_GetTick>
 8001146:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d008      	beq.n	8001166 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e052      	b.n	800120c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0216 	bic.w	r2, r2, #22
 8001174:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001184:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <HAL_DMA_Abort+0x62>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0208 	bic.w	r2, r2, #8
 80011a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0201 	bic.w	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b6:	e013      	b.n	80011e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011b8:	f7ff feaa 	bl	8000f10 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d90c      	bls.n	80011e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2220      	movs	r2, #32
 80011ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2203      	movs	r2, #3
 80011d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e015      	b.n	800120c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1e4      	bne.n	80011b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	223f      	movs	r2, #63	; 0x3f
 80011f4:	409a      	lsls	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d004      	beq.n	8001232 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00c      	b.n	800124c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2205      	movs	r2, #5
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0201 	bic.w	r2, r2, #1
 8001248:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e16b      	b.n	800154c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 815a 	bne.w	8001546 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d130      	bne.n	800130c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80b4 	beq.w	8001546 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b60      	ldr	r3, [pc, #384]	; (8001564 <HAL_GPIO_Init+0x30c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a5f      	ldr	r2, [pc, #380]	; (8001564 <HAL_GPIO_Init+0x30c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <HAL_GPIO_Init+0x30c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a5b      	ldr	r2, [pc, #364]	; (8001568 <HAL_GPIO_Init+0x310>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_GPIO_Init+0x314>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02b      	beq.n	800147e <HAL_GPIO_Init+0x226>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a51      	ldr	r2, [pc, #324]	; (8001570 <HAL_GPIO_Init+0x318>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x222>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a50      	ldr	r2, [pc, #320]	; (8001574 <HAL_GPIO_Init+0x31c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x21e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_GPIO_Init+0x320>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x21a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_GPIO_Init+0x324>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x216>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4d      	ldr	r2, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x328>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x212>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_GPIO_Init+0x32c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x20e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <HAL_GPIO_Init+0x330>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x20a>
 800145e:	2307      	movs	r3, #7
 8001460:	e00e      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001462:	2308      	movs	r3, #8
 8001464:	e00c      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001466:	2306      	movs	r3, #6
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800146a:	2305      	movs	r3, #5
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_GPIO_Init+0x310>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_GPIO_Init+0x334>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <HAL_GPIO_Init+0x334>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_GPIO_Init+0x334>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_GPIO_Init+0x334>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_GPIO_Init+0x334>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_GPIO_Init+0x334>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_GPIO_Init+0x334>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_GPIO_Init+0x334>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f ae90 	bls.w	8001274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40013800 	.word	0x40013800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020400 	.word	0x40020400
 8001574:	40020800 	.word	0x40020800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40021000 	.word	0x40021000
 8001580:	40021400 	.word	0x40021400
 8001584:	40021800 	.word	0x40021800
 8001588:	40021c00 	.word	0x40021c00
 800158c:	40013c00 	.word	0x40013c00

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	041a      	lsls	r2, r3, #16
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43d9      	mvns	r1, r3
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	400b      	ands	r3, r1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e267      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d075      	beq.n	8001702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001616:	4b88      	ldr	r3, [pc, #544]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d00c      	beq.n	800163c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b85      	ldr	r3, [pc, #532]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800162a:	2b08      	cmp	r3, #8
 800162c:	d112      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d05b      	beq.n	8001700 <HAL_RCC_OscConfig+0x108>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d157      	bne.n	8001700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e242      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x74>
 800165e:	4b76      	ldr	r3, [pc, #472]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a75      	ldr	r2, [pc, #468]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e01d      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x98>
 8001676:	4b70      	ldr	r3, [pc, #448]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6f      	ldr	r2, [pc, #444]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6c      	ldr	r2, [pc, #432]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 8001690:	4b69      	ldr	r3, [pc, #420]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a68      	ldr	r2, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b66      	ldr	r3, [pc, #408]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a65      	ldr	r2, [pc, #404]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fc2e 	bl	8000f10 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fc2a 	bl	8000f10 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e207      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0xc0>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fc1a 	bl	8000f10 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fc16 	bl	8000f10 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1f3      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	4b51      	ldr	r3, [pc, #324]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0xe8>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d063      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170e:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001722:	2b08      	cmp	r3, #8
 8001724:	d11c      	bne.n	8001760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d116      	bne.n	8001760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x152>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e1c7      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4937      	ldr	r1, [pc, #220]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	e03a      	b.n	80017d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_RCC_OscConfig+0x244>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff fbcf 	bl	8000f10 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001776:	f7ff fbcb 	bl	8000f10 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e1a8      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4925      	ldr	r1, [pc, #148]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e015      	b.n	80017d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x244>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fbae 	bl	8000f10 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fbaa 	bl	8000f10 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e187      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d036      	beq.n	8001850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d016      	beq.n	8001818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_RCC_OscConfig+0x248>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fb8e 	bl	8000f10 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fb8a 	bl	8000f10 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e167      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_OscConfig+0x240>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x200>
 8001816:	e01b      	b.n	8001850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x248>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff fb77 	bl	8000f10 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	e00e      	b.n	8001844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff fb73 	bl	8000f10 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d907      	bls.n	8001844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e150      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
 8001838:	40023800 	.word	0x40023800
 800183c:	42470000 	.word	0x42470000
 8001840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b88      	ldr	r3, [pc, #544]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ea      	bne.n	8001826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8097 	beq.w	800198c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b81      	ldr	r3, [pc, #516]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b7d      	ldr	r3, [pc, #500]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a7c      	ldr	r2, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d118      	bne.n	80018cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189a:	4b74      	ldr	r3, [pc, #464]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a73      	ldr	r2, [pc, #460]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb33 	bl	8000f10 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7ff fb2f 	bl	8000f10 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e10c      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <HAL_RCC_OscConfig+0x474>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2ea>
 80018d4:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a63      	ldr	r2, [pc, #396]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x324>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x30c>
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a5e      	ldr	r2, [pc, #376]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x324>
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a57      	ldr	r2, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d015      	beq.n	8001950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff faf4 	bl	8000f10 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff faf0 	bl	8000f10 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0cb      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0ee      	beq.n	800192c <HAL_RCC_OscConfig+0x334>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fade 	bl	8000f10 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff fada 	bl	8000f10 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0b5      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196e:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ee      	bne.n	8001958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a1 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d05c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d141      	bne.n	8001a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_RCC_OscConfig+0x478>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff faae 	bl	8000f10 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff faaa 	bl	8000f10 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e087      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	3b01      	subs	r3, #1
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	491b      	ldr	r1, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x478>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fa83 	bl	8000f10 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff fa7f 	bl	8000f10 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e05c      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x416>
 8001a2c:	e054      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_RCC_OscConfig+0x478>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fa6c 	bl	8000f10 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff fa68 	bl	8000f10 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e045      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x444>
 8001a5a:	e03d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e038      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x4ec>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d028      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d121      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d11a      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d111      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	3b01      	subs	r3, #1
 8001abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0cc      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d90c      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b8      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	494d      	ldr	r1, [pc, #308]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d044      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d119      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e07f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e067      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4934      	ldr	r1, [pc, #208]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff f99a 	bl	8000f10 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff f996 	bl	8000f10 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e04f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d20c      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e032      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4916      	ldr	r1, [pc, #88]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c6e:	f000 f821 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fff8 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	0800550c 	.word	0x0800550c
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb8:	b094      	sub	sp, #80	; 0x50
 8001cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	f200 80e1 	bhi.w	8001ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce6:	e0db      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b73      	ldr	r3, [pc, #460]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cec:	e0db      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cee:	4b73      	ldr	r3, [pc, #460]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf2:	e0d8      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfe:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	2200      	movs	r2, #0
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
 8001d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d26:	4622      	mov	r2, r4
 8001d28:	462b      	mov	r3, r5
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	0159      	lsls	r1, r3, #5
 8001d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d38:	0150      	lsls	r0, r2, #5
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4621      	mov	r1, r4
 8001d40:	1a51      	subs	r1, r2, r1
 8001d42:	6139      	str	r1, [r7, #16]
 8001d44:	4629      	mov	r1, r5
 8001d46:	eb63 0301 	sbc.w	r3, r3, r1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d58:	4659      	mov	r1, fp
 8001d5a:	018b      	lsls	r3, r1, #6
 8001d5c:	4651      	mov	r1, sl
 8001d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d62:	4651      	mov	r1, sl
 8001d64:	018a      	lsls	r2, r1, #6
 8001d66:	4651      	mov	r1, sl
 8001d68:	ebb2 0801 	subs.w	r8, r2, r1
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d86:	4690      	mov	r8, r2
 8001d88:	4699      	mov	r9, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	eb18 0303 	adds.w	r3, r8, r3
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	462b      	mov	r3, r5
 8001d94:	eb49 0303 	adc.w	r3, r9, r3
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001da6:	4629      	mov	r1, r5
 8001da8:	024b      	lsls	r3, r1, #9
 8001daa:	4621      	mov	r1, r4
 8001dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001db0:	4621      	mov	r1, r4
 8001db2:	024a      	lsls	r2, r1, #9
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dba:	2200      	movs	r2, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	f7fe fa54 	bl	8000270 <__aeabi_uldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd0:	e058      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4611      	mov	r1, r2
 8001dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dec:	4642      	mov	r2, r8
 8001dee:	464b      	mov	r3, r9
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	0159      	lsls	r1, r3, #5
 8001dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfe:	0150      	lsls	r0, r2, #5
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4641      	mov	r1, r8
 8001e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e24:	ebb2 040a 	subs.w	r4, r2, sl
 8001e28:	eb63 050b 	sbc.w	r5, r3, fp
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	00eb      	lsls	r3, r5, #3
 8001e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e3a:	00e2      	lsls	r2, r4, #3
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	461d      	mov	r5, r3
 8001e40:	4643      	mov	r3, r8
 8001e42:	18e3      	adds	r3, r4, r3
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	464b      	mov	r3, r9
 8001e48:	eb45 0303 	adc.w	r3, r5, r3
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	028b      	lsls	r3, r1, #10
 8001e5e:	4621      	mov	r1, r4
 8001e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e64:	4621      	mov	r1, r4
 8001e66:	028a      	lsls	r2, r1, #10
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	61fa      	str	r2, [r7, #28]
 8001e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e78:	f7fe f9fa 	bl	8000270 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4613      	mov	r3, r2
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3750      	adds	r7, #80	; 0x50
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000000 	.word	0x20000000

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001edc:	f7ff fff0 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0a9b      	lsrs	r3, r3, #10
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	0800551c 	.word	0x0800551c

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f04:	f7ff ffdc 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0b5b      	lsrs	r3, r3, #13
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	0800551c 	.word	0x0800551c

08001f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	220f      	movs	r2, #15
 8001f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	08db      	lsrs	r3, r3, #3
 8001f62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCC_GetClockConfig+0x60>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0207 	and.w	r2, r3, #7
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	601a      	str	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40023c00 	.word	0x40023c00

08001f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e041      	b.n	8002022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f839 	bl	800202a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f000 f9d8 	bl	8002380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d001      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e04e      	b.n	80020f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a23      	ldr	r2, [pc, #140]	; (8002104 <HAL_TIM_Base_Start_IT+0xc4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d022      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002082:	d01d      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <HAL_TIM_Base_Start_IT+0xc8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d018      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <HAL_TIM_Base_Start_IT+0xcc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_TIM_Base_Start_IT+0xd0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00e      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_TIM_Base_Start_IT+0xd4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_TIM_Base_Start_IT+0xd8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a18      	ldr	r2, [pc, #96]	; (800211c <HAL_TIM_Base_Start_IT+0xdc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d111      	bne.n	80020e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d010      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	e007      	b.n	80020f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40010000 	.word	0x40010000
 8002108:	40000400 	.word	0x40000400
 800210c:	40000800 	.word	0x40000800
 8002110:	40000c00 	.word	0x40000c00
 8002114:	40010400 	.word	0x40010400
 8002118:	40014000 	.word	0x40014000
 800211c:	40001800 	.word	0x40001800

08002120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0202 	mvn.w	r2, #2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8ee 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8e0 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f8f1 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b04      	cmp	r3, #4
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0204 	mvn.w	r2, #4
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8c4 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f8b6 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8c7 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0208 	mvn.w	r2, #8
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2204      	movs	r2, #4
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f89a 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f88c 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f89d 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b10      	cmp	r3, #16
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b10      	cmp	r3, #16
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0210 	mvn.w	r2, #16
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2208      	movs	r2, #8
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f870 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f862 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f873 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0201 	mvn.w	r2, #1
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fc5c 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022bc:	2b80      	cmp	r3, #128	; 0x80
 80022be:	d107      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f902 	bl	80024d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d107      	bne.n	80022fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f838 	bl	800236c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b20      	cmp	r3, #32
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b20      	cmp	r3, #32
 8002316:	d107      	bne.n	8002328 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0220 	mvn.w	r2, #32
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8cc 	bl	80024c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a40      	ldr	r2, [pc, #256]	; (8002494 <TIM_Base_SetConfig+0x114>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239e:	d00f      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a3d      	ldr	r2, [pc, #244]	; (8002498 <TIM_Base_SetConfig+0x118>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00b      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a3c      	ldr	r2, [pc, #240]	; (800249c <TIM_Base_SetConfig+0x11c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <TIM_Base_SetConfig+0x120>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d003      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <TIM_Base_SetConfig+0x124>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d108      	bne.n	80023d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2f      	ldr	r2, [pc, #188]	; (8002494 <TIM_Base_SetConfig+0x114>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d02b      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d027      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a2c      	ldr	r2, [pc, #176]	; (8002498 <TIM_Base_SetConfig+0x118>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d023      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <TIM_Base_SetConfig+0x11c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <TIM_Base_SetConfig+0x120>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01b      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <TIM_Base_SetConfig+0x124>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d017      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <TIM_Base_SetConfig+0x128>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <TIM_Base_SetConfig+0x12c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00f      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a26      	ldr	r2, [pc, #152]	; (80024b0 <TIM_Base_SetConfig+0x130>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <TIM_Base_SetConfig+0x134>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <TIM_Base_SetConfig+0x138>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a23      	ldr	r2, [pc, #140]	; (80024bc <TIM_Base_SetConfig+0x13c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d108      	bne.n	8002444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <TIM_Base_SetConfig+0x114>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <TIM_Base_SetConfig+0xf8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <TIM_Base_SetConfig+0x124>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d103      	bne.n	8002480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	615a      	str	r2, [r3, #20]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800
 80024a0:	40000c00 	.word	0x40000c00
 80024a4:	40010400 	.word	0x40010400
 80024a8:	40014000 	.word	0x40014000
 80024ac:	40014400 	.word	0x40014400
 80024b0:	40014800 	.word	0x40014800
 80024b4:	40001800 	.word	0x40001800
 80024b8:	40001c00 	.word	0x40001c00
 80024bc:	40002000 	.word	0x40002000

080024c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e03f      	b.n	800257a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fb68 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fd23 	bl	8002f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	4613      	mov	r3, r2
 800258e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b20      	cmp	r3, #32
 800259a:	d130      	bne.n	80025fe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_UART_Transmit_IT+0x26>
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e029      	b.n	8002600 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Transmit_IT+0x38>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e022      	b.n	8002600 <HAL_UART_Transmit_IT+0x7e>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2221      	movs	r2, #33	; 0x21
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b20      	cmp	r3, #32
 8002624:	d11d      	bne.n	8002662 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_UART_Receive_IT+0x26>
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e016      	b.n	8002664 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_UART_Receive_IT+0x38>
 8002640:	2302      	movs	r3, #2
 8002642:	e00f      	b.n	8002664 <HAL_UART_Receive_IT+0x58>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	461a      	mov	r2, r3
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fab5 	bl	8002bc8 <UART_Start_Receive_IT>
 800265e:	4603      	mov	r3, r0
 8002660:	e000      	b.n	8002664 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002662:	2302      	movs	r3, #2
  }
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0ba      	sub	sp, #232	; 0xe8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800269e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_UART_IRQHandler+0x66>
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fb99 	bl	8002e02 <UART_Receive_IT>
      return;
 80026d0:	e256      	b.n	8002b80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80de 	beq.w	8002898 <HAL_UART_IRQHandler+0x22c>
 80026dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80d1 	beq.w	8002898 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_UART_IRQHandler+0xae>
 8002702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f043 0201 	orr.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_UART_IRQHandler+0xd2>
 8002726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f043 0202 	orr.w	r2, r3, #2
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_UART_IRQHandler+0xf6>
 800274a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f043 0204 	orr.w	r2, r3, #4
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d011      	beq.n	8002792 <HAL_UART_IRQHandler+0x126>
 800276e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800277a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f043 0208 	orr.w	r2, r3, #8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 81ed 	beq.w	8002b76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800279c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_UART_IRQHandler+0x14e>
 80027a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fb24 	bl	8002e02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_UART_IRQHandler+0x17a>
 80027de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d04f      	beq.n	8002886 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fa2c 	bl	8002c44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d141      	bne.n	800287e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3314      	adds	r3, #20
 8002800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3314      	adds	r3, #20
 8002822:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002826:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800282a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002836:	e841 2300 	strex	r3, r2, [r1]
 800283a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800283e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1d9      	bne.n	80027fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d013      	beq.n	8002876 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	4a7d      	ldr	r2, [pc, #500]	; (8002a48 <HAL_UART_IRQHandler+0x3dc>)
 8002854:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fcda 	bl	8001214 <HAL_DMA_Abort_IT>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002870:	4610      	mov	r0, r2
 8002872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002874:	e00e      	b.n	8002894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f990 	bl	8002b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287c:	e00a      	b.n	8002894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f98c 	bl	8002b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	e006      	b.n	8002894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f988 	bl	8002b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002892:	e170      	b.n	8002b76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	bf00      	nop
    return;
 8002896:	e16e      	b.n	8002b76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	2b01      	cmp	r3, #1
 800289e:	f040 814a 	bne.w	8002b36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8143 	beq.w	8002b36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 813c 	beq.w	8002b36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	f040 80b4 	bne.w	8002a4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8140 	beq.w	8002b7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002902:	429a      	cmp	r2, r3
 8002904:	f080 8139 	bcs.w	8002b7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800290e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291a:	f000 8088 	beq.w	8002a2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002928:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800293c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800294a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800294e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002956:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1d9      	bne.n	800291e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002974:	e853 3f00 	ldrex	r3, [r3]
 8002978:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800297a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3314      	adds	r3, #20
 800298a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800298e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002992:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002996:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800299a:	e841 2300 	strex	r3, r2, [r1]
 800299e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e1      	bne.n	800296a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3314      	adds	r3, #20
 80029ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3314      	adds	r3, #20
 80029c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e3      	bne.n	80029a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	330c      	adds	r3, #12
 80029f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fe:	f023 0310 	bic.w	r3, r3, #16
 8002a02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a10:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e3      	bne.n	80029ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fb83 	bl	8001134 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8b6 	bl	8002bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a44:	e099      	b.n	8002b7a <HAL_UART_IRQHandler+0x50e>
 8002a46:	bf00      	nop
 8002a48:	08002d0b 	.word	0x08002d0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 808b 	beq.w	8002b7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8086 	beq.w	8002b7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	330c      	adds	r3, #12
 8002a92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a96:	647a      	str	r2, [r7, #68]	; 0x44
 8002a98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a9e:	e841 2300 	strex	r3, r2, [r1]
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e3      	bne.n	8002a72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3314      	adds	r3, #20
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	e853 3f00 	ldrex	r3, [r3]
 8002ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3314      	adds	r3, #20
 8002aca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ace:	633a      	str	r2, [r7, #48]	; 0x30
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e3      	bne.n	8002aaa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	e853 3f00 	ldrex	r3, [r3]
 8002afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0310 	bic.w	r3, r3, #16
 8002b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b14:	61fa      	str	r2, [r7, #28]
 8002b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b18:	69b9      	ldr	r1, [r7, #24]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	e841 2300 	strex	r3, r2, [r1]
 8002b20:	617b      	str	r3, [r7, #20]
   return(result);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e3      	bne.n	8002af0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f83e 	bl	8002bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b34:	e023      	b.n	8002b7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_UART_IRQHandler+0x4ea>
 8002b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8ef 	bl	8002d32 <UART_Transmit_IT>
    return;
 8002b54:	e014      	b.n	8002b80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00e      	beq.n	8002b80 <HAL_UART_IRQHandler+0x514>
 8002b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f92f 	bl	8002dd2 <UART_EndTransmit_IT>
    return;
 8002b74:	e004      	b.n	8002b80 <HAL_UART_IRQHandler+0x514>
    return;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <HAL_UART_IRQHandler+0x514>
      return;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_UART_IRQHandler+0x514>
      return;
 8002b7e:	bf00      	nop
  }
}
 8002b80:	37e8      	adds	r7, #232	; 0xe8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop

08002b88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2222      	movs	r2, #34	; 0x22
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b095      	sub	sp, #84	; 0x54
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	330c      	adds	r3, #12
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c56:	e853 3f00 	ldrex	r3, [r3]
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c6c:	643a      	str	r2, [r7, #64]	; 0x40
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e5      	bne.n	8002c4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3314      	adds	r3, #20
 8002c86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3314      	adds	r3, #20
 8002c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e5      	bne.n	8002c80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d119      	bne.n	8002cf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	e853 3f00 	ldrex	r3, [r3]
 8002cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f023 0310 	bic.w	r3, r3, #16
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cdc:	61ba      	str	r2, [r7, #24]
 8002cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	6979      	ldr	r1, [r7, #20]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	e841 2300 	strex	r3, r2, [r1]
 8002ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e5      	bne.n	8002cbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cfe:	bf00      	nop
 8002d00:	3754      	adds	r7, #84	; 0x54
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7ff ff39 	bl	8002b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b21      	cmp	r3, #33	; 0x21
 8002d44:	d13e      	bne.n	8002dc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4e:	d114      	bne.n	8002d7a <UART_Transmit_IT+0x48>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d110      	bne.n	8002d7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	1c9a      	adds	r2, r3, #2
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	621a      	str	r2, [r3, #32]
 8002d78:	e008      	b.n	8002d8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	1c59      	adds	r1, r3, #1
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6211      	str	r1, [r2, #32]
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10f      	bne.n	8002dc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fec8 	bl	8002b88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b08c      	sub	sp, #48	; 0x30
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b22      	cmp	r3, #34	; 0x22
 8002e14:	f040 80ab 	bne.w	8002f6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e20:	d117      	bne.n	8002e52 <UART_Receive_IT+0x50>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d113      	bne.n	8002e52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	1c9a      	adds	r2, r3, #2
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e50:	e026      	b.n	8002ea0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e64:	d007      	beq.n	8002e76 <UART_Receive_IT+0x74>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <UART_Receive_IT+0x82>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e008      	b.n	8002e96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4619      	mov	r1, r3
 8002eae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d15a      	bne.n	8002f6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0220 	bic.w	r2, r2, #32
 8002ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d135      	bne.n	8002f60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	330c      	adds	r3, #12
 8002f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f023 0310 	bic.w	r3, r3, #16
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	623a      	str	r2, [r7, #32]
 8002f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	69f9      	ldr	r1, [r7, #28]
 8002f20:	6a3a      	ldr	r2, [r7, #32]
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e5      	bne.n	8002efa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d10a      	bne.n	8002f52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fe29 	bl	8002bb0 <HAL_UARTEx_RxEventCallback>
 8002f5e:	e002      	b.n	8002f66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7fd fc41 	bl	80007e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e002      	b.n	8002f70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3730      	adds	r7, #48	; 0x30
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b0c0      	sub	sp, #256	; 0x100
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	68d9      	ldr	r1, [r3, #12]
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	ea40 0301 	orr.w	r3, r0, r1
 8002fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fd0:	f021 010c 	bic.w	r1, r1, #12
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff2:	6999      	ldr	r1, [r3, #24]
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	ea40 0301 	orr.w	r3, r0, r1
 8002ffe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b8f      	ldr	r3, [pc, #572]	; (8003244 <UART_SetConfig+0x2cc>)
 8003008:	429a      	cmp	r2, r3
 800300a:	d005      	beq.n	8003018 <UART_SetConfig+0xa0>
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b8d      	ldr	r3, [pc, #564]	; (8003248 <UART_SetConfig+0x2d0>)
 8003014:	429a      	cmp	r2, r3
 8003016:	d104      	bne.n	8003022 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003018:	f7fe ff72 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 800301c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003020:	e003      	b.n	800302a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003022:	f7fe ff59 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8003026:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003034:	f040 810c 	bne.w	8003250 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303c:	2200      	movs	r2, #0
 800303e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003042:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003046:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800304a:	4622      	mov	r2, r4
 800304c:	462b      	mov	r3, r5
 800304e:	1891      	adds	r1, r2, r2
 8003050:	65b9      	str	r1, [r7, #88]	; 0x58
 8003052:	415b      	adcs	r3, r3
 8003054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800305a:	4621      	mov	r1, r4
 800305c:	eb12 0801 	adds.w	r8, r2, r1
 8003060:	4629      	mov	r1, r5
 8003062:	eb43 0901 	adc.w	r9, r3, r1
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307a:	4690      	mov	r8, r2
 800307c:	4699      	mov	r9, r3
 800307e:	4623      	mov	r3, r4
 8003080:	eb18 0303 	adds.w	r3, r8, r3
 8003084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003088:	462b      	mov	r3, r5
 800308a:	eb49 0303 	adc.w	r3, r9, r3
 800308e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800309e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030a6:	460b      	mov	r3, r1
 80030a8:	18db      	adds	r3, r3, r3
 80030aa:	653b      	str	r3, [r7, #80]	; 0x50
 80030ac:	4613      	mov	r3, r2
 80030ae:	eb42 0303 	adc.w	r3, r2, r3
 80030b2:	657b      	str	r3, [r7, #84]	; 0x54
 80030b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030bc:	f7fd f8d8 	bl	8000270 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4b61      	ldr	r3, [pc, #388]	; (800324c <UART_SetConfig+0x2d4>)
 80030c6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	011c      	lsls	r4, r3, #4
 80030ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030e0:	4642      	mov	r2, r8
 80030e2:	464b      	mov	r3, r9
 80030e4:	1891      	adds	r1, r2, r2
 80030e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80030e8:	415b      	adcs	r3, r3
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030f0:	4641      	mov	r1, r8
 80030f2:	eb12 0a01 	adds.w	sl, r2, r1
 80030f6:	4649      	mov	r1, r9
 80030f8:	eb43 0b01 	adc.w	fp, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003108:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800310c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003110:	4692      	mov	sl, r2
 8003112:	469b      	mov	fp, r3
 8003114:	4643      	mov	r3, r8
 8003116:	eb1a 0303 	adds.w	r3, sl, r3
 800311a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800311e:	464b      	mov	r3, r9
 8003120:	eb4b 0303 	adc.w	r3, fp, r3
 8003124:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003134:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003138:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800313c:	460b      	mov	r3, r1
 800313e:	18db      	adds	r3, r3, r3
 8003140:	643b      	str	r3, [r7, #64]	; 0x40
 8003142:	4613      	mov	r3, r2
 8003144:	eb42 0303 	adc.w	r3, r2, r3
 8003148:	647b      	str	r3, [r7, #68]	; 0x44
 800314a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800314e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003152:	f7fd f88d 	bl	8000270 <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4611      	mov	r1, r2
 800315c:	4b3b      	ldr	r3, [pc, #236]	; (800324c <UART_SetConfig+0x2d4>)
 800315e:	fba3 2301 	umull	r2, r3, r3, r1
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2264      	movs	r2, #100	; 0x64
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	1acb      	subs	r3, r1, r3
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <UART_SetConfig+0x2d4>)
 8003174:	fba3 2302 	umull	r2, r3, r3, r2
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003180:	441c      	add	r4, r3
 8003182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800318c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003190:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003194:	4642      	mov	r2, r8
 8003196:	464b      	mov	r3, r9
 8003198:	1891      	adds	r1, r2, r2
 800319a:	63b9      	str	r1, [r7, #56]	; 0x38
 800319c:	415b      	adcs	r3, r3
 800319e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031a4:	4641      	mov	r1, r8
 80031a6:	1851      	adds	r1, r2, r1
 80031a8:	6339      	str	r1, [r7, #48]	; 0x30
 80031aa:	4649      	mov	r1, r9
 80031ac:	414b      	adcs	r3, r1
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031bc:	4659      	mov	r1, fp
 80031be:	00cb      	lsls	r3, r1, #3
 80031c0:	4651      	mov	r1, sl
 80031c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c6:	4651      	mov	r1, sl
 80031c8:	00ca      	lsls	r2, r1, #3
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	4642      	mov	r2, r8
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031d8:	464b      	mov	r3, r9
 80031da:	460a      	mov	r2, r1
 80031dc:	eb42 0303 	adc.w	r3, r2, r3
 80031e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031f8:	460b      	mov	r3, r1
 80031fa:	18db      	adds	r3, r3, r3
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031fe:	4613      	mov	r3, r2
 8003200:	eb42 0303 	adc.w	r3, r2, r3
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800320a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800320e:	f7fd f82f 	bl	8000270 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <UART_SetConfig+0x2d4>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2164      	movs	r1, #100	; 0x64
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3332      	adds	r3, #50	; 0x32
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <UART_SetConfig+0x2d4>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 0207 	and.w	r2, r3, #7
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4422      	add	r2, r4
 800323e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003240:	e105      	b.n	800344e <UART_SetConfig+0x4d6>
 8003242:	bf00      	nop
 8003244:	40011000 	.word	0x40011000
 8003248:	40011400 	.word	0x40011400
 800324c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800325a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800325e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003262:	4642      	mov	r2, r8
 8003264:	464b      	mov	r3, r9
 8003266:	1891      	adds	r1, r2, r2
 8003268:	6239      	str	r1, [r7, #32]
 800326a:	415b      	adcs	r3, r3
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
 800326e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003272:	4641      	mov	r1, r8
 8003274:	1854      	adds	r4, r2, r1
 8003276:	4649      	mov	r1, r9
 8003278:	eb43 0501 	adc.w	r5, r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	00eb      	lsls	r3, r5, #3
 8003286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328a:	00e2      	lsls	r2, r4, #3
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	4643      	mov	r3, r8
 8003292:	18e3      	adds	r3, r4, r3
 8003294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003298:	464b      	mov	r3, r9
 800329a:	eb45 0303 	adc.w	r3, r5, r3
 800329e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032be:	4629      	mov	r1, r5
 80032c0:	008b      	lsls	r3, r1, #2
 80032c2:	4621      	mov	r1, r4
 80032c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c8:	4621      	mov	r1, r4
 80032ca:	008a      	lsls	r2, r1, #2
 80032cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032d0:	f7fc ffce 	bl	8000270 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4b60      	ldr	r3, [pc, #384]	; (800345c <UART_SetConfig+0x4e4>)
 80032da:	fba3 2302 	umull	r2, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	011c      	lsls	r4, r3, #4
 80032e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032f4:	4642      	mov	r2, r8
 80032f6:	464b      	mov	r3, r9
 80032f8:	1891      	adds	r1, r2, r2
 80032fa:	61b9      	str	r1, [r7, #24]
 80032fc:	415b      	adcs	r3, r3
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003304:	4641      	mov	r1, r8
 8003306:	1851      	adds	r1, r2, r1
 8003308:	6139      	str	r1, [r7, #16]
 800330a:	4649      	mov	r1, r9
 800330c:	414b      	adcs	r3, r1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800331c:	4659      	mov	r1, fp
 800331e:	00cb      	lsls	r3, r1, #3
 8003320:	4651      	mov	r1, sl
 8003322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003326:	4651      	mov	r1, sl
 8003328:	00ca      	lsls	r2, r1, #3
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	4603      	mov	r3, r0
 8003330:	4642      	mov	r2, r8
 8003332:	189b      	adds	r3, r3, r2
 8003334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003338:	464b      	mov	r3, r9
 800333a:	460a      	mov	r2, r1
 800333c:	eb42 0303 	adc.w	r3, r2, r3
 8003340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	67bb      	str	r3, [r7, #120]	; 0x78
 800334e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800335c:	4649      	mov	r1, r9
 800335e:	008b      	lsls	r3, r1, #2
 8003360:	4641      	mov	r1, r8
 8003362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003366:	4641      	mov	r1, r8
 8003368:	008a      	lsls	r2, r1, #2
 800336a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800336e:	f7fc ff7f 	bl	8000270 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4b39      	ldr	r3, [pc, #228]	; (800345c <UART_SetConfig+0x4e4>)
 8003378:	fba3 1302 	umull	r1, r3, r3, r2
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	2164      	movs	r1, #100	; 0x64
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	3332      	adds	r3, #50	; 0x32
 800338a:	4a34      	ldr	r2, [pc, #208]	; (800345c <UART_SetConfig+0x4e4>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003396:	441c      	add	r4, r3
 8003398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800339c:	2200      	movs	r2, #0
 800339e:	673b      	str	r3, [r7, #112]	; 0x70
 80033a0:	677a      	str	r2, [r7, #116]	; 0x74
 80033a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033a6:	4642      	mov	r2, r8
 80033a8:	464b      	mov	r3, r9
 80033aa:	1891      	adds	r1, r2, r2
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	415b      	adcs	r3, r3
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b6:	4641      	mov	r1, r8
 80033b8:	1851      	adds	r1, r2, r1
 80033ba:	6039      	str	r1, [r7, #0]
 80033bc:	4649      	mov	r1, r9
 80033be:	414b      	adcs	r3, r1
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033ce:	4659      	mov	r1, fp
 80033d0:	00cb      	lsls	r3, r1, #3
 80033d2:	4651      	mov	r1, sl
 80033d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d8:	4651      	mov	r1, sl
 80033da:	00ca      	lsls	r2, r1, #3
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	4603      	mov	r3, r0
 80033e2:	4642      	mov	r2, r8
 80033e4:	189b      	adds	r3, r3, r2
 80033e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e8:	464b      	mov	r3, r9
 80033ea:	460a      	mov	r2, r1
 80033ec:	eb42 0303 	adc.w	r3, r2, r3
 80033f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	663b      	str	r3, [r7, #96]	; 0x60
 80033fc:	667a      	str	r2, [r7, #100]	; 0x64
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800340a:	4649      	mov	r1, r9
 800340c:	008b      	lsls	r3, r1, #2
 800340e:	4641      	mov	r1, r8
 8003410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003414:	4641      	mov	r1, r8
 8003416:	008a      	lsls	r2, r1, #2
 8003418:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800341c:	f7fc ff28 	bl	8000270 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <UART_SetConfig+0x4e4>)
 8003426:	fba3 1302 	umull	r1, r3, r3, r2
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	2164      	movs	r1, #100	; 0x64
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	3332      	adds	r3, #50	; 0x32
 8003438:	4a08      	ldr	r2, [pc, #32]	; (800345c <UART_SetConfig+0x4e4>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	f003 020f 	and.w	r2, r3, #15
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4422      	add	r2, r4
 800344c:	609a      	str	r2, [r3, #8]
}
 800344e:	bf00      	nop
 8003450:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003454:	46bd      	mov	sp, r7
 8003456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345a:	bf00      	nop
 800345c:	51eb851f 	.word	0x51eb851f

08003460 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800346e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003472:	2b84      	cmp	r3, #132	; 0x84
 8003474:	d005      	beq.n	8003482 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003476:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	3303      	adds	r3, #3
 8003480:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003494:	f000 fc00 	bl	8003c98 <vTaskStartScheduler>
  
  return osOK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	bd80      	pop	{r7, pc}

0800349e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800349e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a0:	b089      	sub	sp, #36	; 0x24
 80034a2:	af04      	add	r7, sp, #16
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d020      	beq.n	80034f2 <osThreadCreate+0x54>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01c      	beq.n	80034f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685c      	ldr	r4, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681d      	ldr	r5, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691e      	ldr	r6, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff ffc8 	bl	8003460 <makeFreeRtosPriority>
 80034d0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034da:	9202      	str	r2, [sp, #8]
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	9100      	str	r1, [sp, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4632      	mov	r2, r6
 80034e4:	4629      	mov	r1, r5
 80034e6:	4620      	mov	r0, r4
 80034e8:	f000 f8ed 	bl	80036c6 <xTaskCreateStatic>
 80034ec:	4603      	mov	r3, r0
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e01c      	b.n	800352c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685c      	ldr	r4, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034fe:	b29e      	uxth	r6, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ffaa 	bl	8003460 <makeFreeRtosPriority>
 800350c:	4602      	mov	r2, r0
 800350e:	f107 030c 	add.w	r3, r7, #12
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	9200      	str	r2, [sp, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	4632      	mov	r2, r6
 800351a:	4629      	mov	r1, r5
 800351c:	4620      	mov	r0, r4
 800351e:	f000 f92f 	bl	8003780 <xTaskCreate>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	d001      	beq.n	800352c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800352c:	68fb      	ldr	r3, [r7, #12]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003536 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <osDelay+0x16>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	e000      	b.n	800354e <osDelay+0x18>
 800354c:	2301      	movs	r3, #1
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fa4c 	bl	80039ec <vTaskDelay>
  
  return osOK;
 8003554:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f103 0208 	add.w	r2, r3, #8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f04f 32ff 	mov.w	r2, #4294967295
 8003576:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f103 0208 	add.w	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 0208 	add.w	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	601a      	str	r2, [r3, #0]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d103      	bne.n	8003620 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e00c      	b.n	800363a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3308      	adds	r3, #8
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	e002      	b.n	800362e <vListInsert+0x2e>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	d2f6      	bcs.n	8003628 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	601a      	str	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6892      	ldr	r2, [r2, #8]
 8003688:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6852      	ldr	r2, [r2, #4]
 8003692:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	d103      	bne.n	80036a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b08e      	sub	sp, #56	; 0x38
 80036ca:	af04      	add	r7, sp, #16
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036ec:	bf00      	nop
 80036ee:	e7fe      	b.n	80036ee <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <xTaskCreateStatic+0x46>
	__asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	61fb      	str	r3, [r7, #28]
}
 8003708:	bf00      	nop
 800370a:	e7fe      	b.n	800370a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800370c:	2354      	movs	r3, #84	; 0x54
 800370e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b54      	cmp	r3, #84	; 0x54
 8003714:	d00a      	beq.n	800372c <xTaskCreateStatic+0x66>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	61bb      	str	r3, [r7, #24]
}
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800372c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01e      	beq.n	8003772 <xTaskCreateStatic+0xac>
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01b      	beq.n	8003772 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003742:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800374c:	2300      	movs	r3, #0
 800374e:	9303      	str	r3, [sp, #12]
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	9302      	str	r3, [sp, #8]
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f850 	bl	800380a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800376a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800376c:	f000 f8d4 	bl	8003918 <prvAddNewTaskToReadyList>
 8003770:	e001      	b.n	8003776 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003776:	697b      	ldr	r3, [r7, #20]
	}
 8003778:	4618      	mov	r0, r3
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	; 0x30
 8003784:	af04      	add	r7, sp, #16
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4618      	mov	r0, r3
 8003796:	f000 ffe7 	bl	8004768 <pvPortMalloc>
 800379a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00e      	beq.n	80037c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037a2:	2054      	movs	r0, #84	; 0x54
 80037a4:	f000 ffe0 	bl	8004768 <pvPortMalloc>
 80037a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
 80037b6:	e005      	b.n	80037c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037b8:	6978      	ldr	r0, [r7, #20]
 80037ba:	f001 f8a1 	bl	8004900 <vPortFree>
 80037be:	e001      	b.n	80037c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d017      	beq.n	80037fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037d2:	88fa      	ldrh	r2, [r7, #6]
 80037d4:	2300      	movs	r3, #0
 80037d6:	9303      	str	r3, [sp, #12]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	9302      	str	r3, [sp, #8]
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f80e 	bl	800380a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037ee:	69f8      	ldr	r0, [r7, #28]
 80037f0:	f000 f892 	bl	8003918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037f4:	2301      	movs	r3, #1
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e002      	b.n	8003800 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003800:	69bb      	ldr	r3, [r7, #24]
	}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b088      	sub	sp, #32
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003822:	3b01      	subs	r3, #1
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f023 0307 	bic.w	r3, r3, #7
 8003830:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <prvInitialiseNewTask+0x48>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	617b      	str	r3, [r7, #20]
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01f      	beq.n	8003898 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	e012      	b.n	8003884 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	4413      	add	r3, r2
 8003864:	7819      	ldrb	r1, [r3, #0]
 8003866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	3334      	adds	r3, #52	; 0x34
 800386e:	460a      	mov	r2, r1
 8003870:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4413      	add	r3, r2
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3301      	adds	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	d9e9      	bls.n	800385e <prvInitialiseNewTask+0x54>
 800388a:	e000      	b.n	800388e <prvInitialiseNewTask+0x84>
			{
				break;
 800388c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003896:	e003      	b.n	80038a0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d901      	bls.n	80038aa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038a6:	2306      	movs	r3, #6
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	2200      	movs	r2, #0
 80038ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	3304      	adds	r3, #4
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fe6c 	bl	800359e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	3318      	adds	r3, #24
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fe67 	bl	800359e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	f1c3 0207 	rsb	r2, r3, #7
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	2200      	movs	r2, #0
 80038ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	68f9      	ldr	r1, [r7, #12]
 80038f8:	69b8      	ldr	r0, [r7, #24]
 80038fa:	f000 fd27 	bl	800434c <pxPortInitialiseStack>
 80038fe:	4602      	mov	r2, r0
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003910:	bf00      	nop
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003920:	f000 fe40 	bl	80045a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003924:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <prvAddNewTaskToReadyList+0xb8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <prvAddNewTaskToReadyList+0xb8>)
 800392c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <prvAddNewTaskToReadyList+0xbc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003936:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <prvAddNewTaskToReadyList+0xbc>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800393c:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <prvAddNewTaskToReadyList+0xb8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d110      	bne.n	8003966 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003944:	f000 fbde 	bl	8004104 <prvInitialiseTaskLists>
 8003948:	e00d      	b.n	8003966 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <prvAddNewTaskToReadyList+0xc0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <prvAddNewTaskToReadyList+0xbc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	429a      	cmp	r2, r3
 800395e:	d802      	bhi.n	8003966 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003960:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <prvAddNewTaskToReadyList+0xbc>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <prvAddNewTaskToReadyList+0xc4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <prvAddNewTaskToReadyList+0xc4>)
 800396e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	2201      	movs	r2, #1
 8003976:	409a      	lsls	r2, r3
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <prvAddNewTaskToReadyList+0xc8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4313      	orrs	r3, r2
 800397e:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <prvAddNewTaskToReadyList+0xc8>)
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <prvAddNewTaskToReadyList+0xcc>)
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f7ff fe0d 	bl	80035b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800399e:	f000 fe31 	bl	8004604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <prvAddNewTaskToReadyList+0xc0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00e      	beq.n	80039c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <prvAddNewTaskToReadyList+0xbc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d207      	bcs.n	80039c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <prvAddNewTaskToReadyList+0xd0>)
 80039ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	200004a8 	.word	0x200004a8
 80039d4:	200003a8 	.word	0x200003a8
 80039d8:	200004b4 	.word	0x200004b4
 80039dc:	200004c4 	.word	0x200004c4
 80039e0:	200004b0 	.word	0x200004b0
 80039e4:	200003ac 	.word	0x200003ac
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d017      	beq.n	8003a2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039fe:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <vTaskDelay+0x60>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <vTaskDelay+0x30>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	60bb      	str	r3, [r7, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a1c:	f000 f99c 	bl	8003d58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a20:	2100      	movs	r1, #0
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fc2c 	bl	8004280 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a28:	f000 f9a4 	bl	8003d74 <xTaskResumeAll>
 8003a2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <vTaskDelay+0x64>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	200004d0 	.word	0x200004d0
 8003a50:	e000ed04 	.word	0xe000ed04

08003a54 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003a5c:	f000 fda2 	bl	80045a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <vTaskSuspend+0x18>
 8003a66:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <vTaskSuspend+0x104>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	e000      	b.n	8003a6e <vTaskSuspend+0x1a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fdfc 	bl	8003672 <uxListRemove>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d115      	bne.n	8003aac <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	4935      	ldr	r1, [pc, #212]	; (8003b5c <vTaskSuspend+0x108>)
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <vTaskSuspend+0x58>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43da      	mvns	r2, r3
 8003aa2:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <vTaskSuspend+0x10c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <vTaskSuspend+0x10c>)
 8003aaa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3318      	adds	r3, #24
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fdda 	bl	8003672 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4827      	ldr	r0, [pc, #156]	; (8003b64 <vTaskSuspend+0x110>)
 8003ac6:	f7ff fd77 	bl	80035b8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d103      	bne.n	8003ade <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003ade:	f000 fd91 	bl	8004604 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <vTaskSuspend+0x114>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003aea:	f000 fd5b 	bl	80045a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003aee:	f000 fba7 	bl	8004240 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003af2:	f000 fd87 	bl	8004604 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003af6:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <vTaskSuspend+0x104>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d127      	bne.n	8003b50 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003b00:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <vTaskSuspend+0x114>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d017      	beq.n	8003b38 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <vTaskSuspend+0x118>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <vTaskSuspend+0xd2>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60bb      	str	r3, [r7, #8]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <vTaskSuspend+0x11c>)
 8003b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b36:	e00b      	b.n	8003b50 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <vTaskSuspend+0x110>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <vTaskSuspend+0x120>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d103      	bne.n	8003b4c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <vTaskSuspend+0x104>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
	}
 8003b4a:	e001      	b.n	8003b50 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003b4c:	f000 fa66 	bl	800401c <vTaskSwitchContext>
	}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	200003a8 	.word	0x200003a8
 8003b5c:	200003ac 	.word	0x200003ac
 8003b60:	200004b0 	.word	0x200004b0
 8003b64:	20000494 	.word	0x20000494
 8003b68:	200004b4 	.word	0x200004b4
 8003b6c:	200004d0 	.word	0x200004d0
 8003b70:	e000ed04 	.word	0xe000ed04
 8003b74:	200004a8 	.word	0x200004a8

08003b78 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	60fb      	str	r3, [r7, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <prvTaskIsTaskSuspended+0x5c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10a      	bne.n	8003bc4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <prvTaskIsTaskSuspended+0x60>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d005      	beq.n	8003bc4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003bc4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000494 	.word	0x20000494
 8003bd8:	20000468 	.word	0x20000468

08003bdc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <vTaskResume+0x28>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	60bb      	str	r3, [r7, #8]
}
 8003c00:	bf00      	nop
 8003c02:	e7fe      	b.n	8003c02 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003c04:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <vTaskResume+0xac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d037      	beq.n	8003c7e <vTaskResume+0xa2>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d034      	beq.n	8003c7e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003c14:	f000 fcc6 	bl	80045a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ffad 	bl	8003b78 <prvTaskIsTaskSuspended>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d02a      	beq.n	8003c7a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fd22 	bl	8003672 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	2201      	movs	r2, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <vTaskResume+0xb0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	4a13      	ldr	r2, [pc, #76]	; (8003c8c <vTaskResume+0xb0>)
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <vTaskResume+0xb4>)
 8003c4e:	441a      	add	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7ff fcae 	bl	80035b8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <vTaskResume+0xac>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d307      	bcc.n	8003c7a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <vTaskResume+0xb8>)
 8003c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003c7a:	f000 fcc3 	bl	8004604 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	200003a8 	.word	0x200003a8
 8003c8c:	200004b0 	.word	0x200004b0
 8003c90:	200003ac 	.word	0x200003ac
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ca6:	463a      	mov	r2, r7
 8003ca8:	1d39      	adds	r1, r7, #4
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fc fc60 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cb4:	6839      	ldr	r1, [r7, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	9202      	str	r2, [sp, #8]
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	460a      	mov	r2, r1
 8003cc6:	491e      	ldr	r1, [pc, #120]	; (8003d40 <vTaskStartScheduler+0xa8>)
 8003cc8:	481e      	ldr	r0, [pc, #120]	; (8003d44 <vTaskStartScheduler+0xac>)
 8003cca:	f7ff fcfc 	bl	80036c6 <xTaskCreateStatic>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <vTaskStartScheduler+0xb0>)
 8003cd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cd4:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <vTaskStartScheduler+0xb0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e001      	b.n	8003ce6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d116      	bne.n	8003d1a <vTaskStartScheduler+0x82>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	613b      	str	r3, [r7, #16]
}
 8003cfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <vTaskStartScheduler+0xb4>)
 8003d02:	f04f 32ff 	mov.w	r2, #4294967295
 8003d06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <vTaskStartScheduler+0xb8>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <vTaskStartScheduler+0xbc>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d14:	f000 fba4 	bl	8004460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d18:	e00e      	b.n	8003d38 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d10a      	bne.n	8003d38 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	60fb      	str	r3, [r7, #12]
}
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <vTaskStartScheduler+0x9e>
}
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	08005504 	.word	0x08005504
 8003d44:	080040d5 	.word	0x080040d5
 8003d48:	200004cc 	.word	0x200004cc
 8003d4c:	200004c8 	.word	0x200004c8
 8003d50:	200004b4 	.word	0x200004b4
 8003d54:	200004ac 	.word	0x200004ac

08003d58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <vTaskSuspendAll+0x18>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	4a03      	ldr	r2, [pc, #12]	; (8003d70 <vTaskSuspendAll+0x18>)
 8003d64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	200004d0 	.word	0x200004d0

08003d74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d82:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <xTaskResumeAll+0x114>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	603b      	str	r3, [r7, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003da0:	f000 fc00 	bl	80045a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003da4:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <xTaskResumeAll+0x114>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	4a37      	ldr	r2, [pc, #220]	; (8003e88 <xTaskResumeAll+0x114>)
 8003dac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <xTaskResumeAll+0x114>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d161      	bne.n	8003e7a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003db6:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <xTaskResumeAll+0x118>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d05d      	beq.n	8003e7a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dbe:	e02e      	b.n	8003e1e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc0:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <xTaskResumeAll+0x11c>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3318      	adds	r3, #24
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fc50 	bl	8003672 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fc4b 	bl	8003672 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	2201      	movs	r2, #1
 8003de2:	409a      	lsls	r2, r3
 8003de4:	4b2b      	ldr	r3, [pc, #172]	; (8003e94 <xTaskResumeAll+0x120>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <xTaskResumeAll+0x120>)
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <xTaskResumeAll+0x124>)
 8003dfc:	441a      	add	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f7ff fbd7 	bl	80035b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0e:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <xTaskResumeAll+0x128>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <xTaskResumeAll+0x12c>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <xTaskResumeAll+0x11c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1cc      	bne.n	8003dc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e2c:	f000 fa08 	bl	8004240 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e30:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <xTaskResumeAll+0x130>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d010      	beq.n	8003e5e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e3c:	f000 f836 	bl	8003eac <xTaskIncrementTick>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <xTaskResumeAll+0x12c>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f1      	bne.n	8003e3c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <xTaskResumeAll+0x130>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <xTaskResumeAll+0x12c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <xTaskResumeAll+0x134>)
 8003e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e7a:	f000 fbc3 	bl	8004604 <vPortExitCritical>

	return xAlreadyYielded;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200004d0 	.word	0x200004d0
 8003e8c:	200004a8 	.word	0x200004a8
 8003e90:	20000468 	.word	0x20000468
 8003e94:	200004b0 	.word	0x200004b0
 8003e98:	200003ac 	.word	0x200003ac
 8003e9c:	200003a8 	.word	0x200003a8
 8003ea0:	200004bc 	.word	0x200004bc
 8003ea4:	200004b8 	.word	0x200004b8
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb6:	4b4e      	ldr	r3, [pc, #312]	; (8003ff0 <xTaskIncrementTick+0x144>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 808e 	bne.w	8003fdc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ec0:	4b4c      	ldr	r3, [pc, #304]	; (8003ff4 <xTaskIncrementTick+0x148>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ec8:	4a4a      	ldr	r2, [pc, #296]	; (8003ff4 <xTaskIncrementTick+0x148>)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d120      	bne.n	8003f16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ed4:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <xTaskIncrementTick+0x14c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	603b      	str	r3, [r7, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <xTaskIncrementTick+0x46>
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <xTaskIncrementTick+0x14c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b40      	ldr	r3, [pc, #256]	; (8003ffc <xTaskIncrementTick+0x150>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a3e      	ldr	r2, [pc, #248]	; (8003ff8 <xTaskIncrementTick+0x14c>)
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4a3e      	ldr	r2, [pc, #248]	; (8003ffc <xTaskIncrementTick+0x150>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b3d      	ldr	r3, [pc, #244]	; (8004000 <xTaskIncrementTick+0x154>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a3c      	ldr	r2, [pc, #240]	; (8004000 <xTaskIncrementTick+0x154>)
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	f000 f995 	bl	8004240 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f16:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <xTaskIncrementTick+0x158>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d348      	bcc.n	8003fb2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f20:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <xTaskIncrementTick+0x14c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f2a:	4b36      	ldr	r3, [pc, #216]	; (8004004 <xTaskIncrementTick+0x158>)
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f30:	601a      	str	r2, [r3, #0]
					break;
 8003f32:	e03e      	b.n	8003fb2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f34:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <xTaskIncrementTick+0x14c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d203      	bcs.n	8003f54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f4c:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <xTaskIncrementTick+0x158>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f52:	e02e      	b.n	8003fb2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fb8a 	bl	8003672 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d004      	beq.n	8003f70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3318      	adds	r3, #24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fb81 	bl	8003672 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	2201      	movs	r2, #1
 8003f76:	409a      	lsls	r2, r3
 8003f78:	4b23      	ldr	r3, [pc, #140]	; (8004008 <xTaskIncrementTick+0x15c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	4a22      	ldr	r2, [pc, #136]	; (8004008 <xTaskIncrementTick+0x15c>)
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	; (800400c <xTaskIncrementTick+0x160>)
 8003f90:	441a      	add	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f7ff fb0d 	bl	80035b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <xTaskIncrementTick+0x164>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d3b9      	bcc.n	8003f20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fac:	2301      	movs	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fb0:	e7b6      	b.n	8003f20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fb2:	4b17      	ldr	r3, [pc, #92]	; (8004010 <xTaskIncrementTick+0x164>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	4914      	ldr	r1, [pc, #80]	; (800400c <xTaskIncrementTick+0x160>)
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d901      	bls.n	8003fce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <xTaskIncrementTick+0x168>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e004      	b.n	8003fe6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003fdc:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <xTaskIncrementTick+0x16c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <xTaskIncrementTick+0x16c>)
 8003fe4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fe6:	697b      	ldr	r3, [r7, #20]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200004d0 	.word	0x200004d0
 8003ff4:	200004ac 	.word	0x200004ac
 8003ff8:	20000460 	.word	0x20000460
 8003ffc:	20000464 	.word	0x20000464
 8004000:	200004c0 	.word	0x200004c0
 8004004:	200004c8 	.word	0x200004c8
 8004008:	200004b0 	.word	0x200004b0
 800400c:	200003ac 	.word	0x200003ac
 8004010:	200003a8 	.word	0x200003a8
 8004014:	200004bc 	.word	0x200004bc
 8004018:	200004b8 	.word	0x200004b8

0800401c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <vTaskSwitchContext+0xa4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800402a:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <vTaskSwitchContext+0xa8>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004030:	e03f      	b.n	80040b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004032:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <vTaskSwitchContext+0xa8>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004038:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <vTaskSwitchContext+0xac>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004046:	7afb      	ldrb	r3, [r7, #11]
 8004048:	f1c3 031f 	rsb	r3, r3, #31
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	491f      	ldr	r1, [pc, #124]	; (80040cc <vTaskSwitchContext+0xb0>)
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	607b      	str	r3, [r7, #4]
}
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <vTaskSwitchContext+0x5a>
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <vTaskSwitchContext+0xb0>)
 8004084:	4413      	add	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3308      	adds	r3, #8
 800409a:	429a      	cmp	r2, r3
 800409c:	d104      	bne.n	80040a8 <vTaskSwitchContext+0x8c>
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <vTaskSwitchContext+0xb4>)
 80040b0:	6013      	str	r3, [r2, #0]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	200004d0 	.word	0x200004d0
 80040c4:	200004bc 	.word	0x200004bc
 80040c8:	200004b0 	.word	0x200004b0
 80040cc:	200003ac 	.word	0x200003ac
 80040d0:	200003a8 	.word	0x200003a8

080040d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040dc:	f000 f852 	bl	8004184 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <prvIdleTask+0x28>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d9f9      	bls.n	80040dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <prvIdleTask+0x2c>)
 80040ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040f8:	e7f0      	b.n	80040dc <prvIdleTask+0x8>
 80040fa:	bf00      	nop
 80040fc:	200003ac 	.word	0x200003ac
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	e00c      	b.n	800412a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4a12      	ldr	r2, [pc, #72]	; (8004164 <prvInitialiseTaskLists+0x60>)
 800411c:	4413      	add	r3, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fa1d 	bl	800355e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3301      	adds	r3, #1
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b06      	cmp	r3, #6
 800412e:	d9ef      	bls.n	8004110 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004130:	480d      	ldr	r0, [pc, #52]	; (8004168 <prvInitialiseTaskLists+0x64>)
 8004132:	f7ff fa14 	bl	800355e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004136:	480d      	ldr	r0, [pc, #52]	; (800416c <prvInitialiseTaskLists+0x68>)
 8004138:	f7ff fa11 	bl	800355e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800413c:	480c      	ldr	r0, [pc, #48]	; (8004170 <prvInitialiseTaskLists+0x6c>)
 800413e:	f7ff fa0e 	bl	800355e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004142:	480c      	ldr	r0, [pc, #48]	; (8004174 <prvInitialiseTaskLists+0x70>)
 8004144:	f7ff fa0b 	bl	800355e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004148:	480b      	ldr	r0, [pc, #44]	; (8004178 <prvInitialiseTaskLists+0x74>)
 800414a:	f7ff fa08 	bl	800355e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <prvInitialiseTaskLists+0x78>)
 8004150:	4a05      	ldr	r2, [pc, #20]	; (8004168 <prvInitialiseTaskLists+0x64>)
 8004152:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <prvInitialiseTaskLists+0x7c>)
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <prvInitialiseTaskLists+0x68>)
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200003ac 	.word	0x200003ac
 8004168:	20000438 	.word	0x20000438
 800416c:	2000044c 	.word	0x2000044c
 8004170:	20000468 	.word	0x20000468
 8004174:	2000047c 	.word	0x2000047c
 8004178:	20000494 	.word	0x20000494
 800417c:	20000460 	.word	0x20000460
 8004180:	20000464 	.word	0x20000464

08004184 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800418a:	e019      	b.n	80041c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800418c:	f000 fa0a 	bl	80045a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <prvCheckTasksWaitingTermination+0x50>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fa68 	bl	8003672 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041a2:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <prvCheckTasksWaitingTermination+0x54>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	4a0b      	ldr	r2, [pc, #44]	; (80041d8 <prvCheckTasksWaitingTermination+0x54>)
 80041aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <prvCheckTasksWaitingTermination+0x58>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <prvCheckTasksWaitingTermination+0x58>)
 80041b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041b6:	f000 fa25 	bl	8004604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f810 	bl	80041e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <prvCheckTasksWaitingTermination+0x58>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e1      	bne.n	800418c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2000047c 	.word	0x2000047c
 80041d8:	200004a8 	.word	0x200004a8
 80041dc:	20000490 	.word	0x20000490

080041e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d108      	bne.n	8004204 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fb82 	bl	8004900 <vPortFree>
				vPortFree( pxTCB );
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fb7f 	bl	8004900 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004202:	e018      	b.n	8004236 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800420a:	2b01      	cmp	r3, #1
 800420c:	d103      	bne.n	8004216 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fb76 	bl	8004900 <vPortFree>
	}
 8004214:	e00f      	b.n	8004236 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800421c:	2b02      	cmp	r3, #2
 800421e:	d00a      	beq.n	8004236 <prvDeleteTCB+0x56>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	60fb      	str	r3, [r7, #12]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <prvDeleteTCB+0x54>
	}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <prvResetNextTaskUnblockTime+0x38>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <prvResetNextTaskUnblockTime+0x3c>)
 8004252:	f04f 32ff 	mov.w	r2, #4294967295
 8004256:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004258:	e008      	b.n	800426c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <prvResetNextTaskUnblockTime+0x38>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <prvResetNextTaskUnblockTime+0x3c>)
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000460 	.word	0x20000460
 800427c:	200004c8 	.word	0x200004c8

08004280 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800428a:	4b29      	ldr	r3, [pc, #164]	; (8004330 <prvAddCurrentTaskToDelayedList+0xb0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004290:	4b28      	ldr	r3, [pc, #160]	; (8004334 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3304      	adds	r3, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff f9eb 	bl	8003672 <uxListRemove>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042a2:	4b24      	ldr	r3, [pc, #144]	; (8004334 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	2201      	movs	r2, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4013      	ands	r3, r2
 80042b6:	4a20      	ldr	r2, [pc, #128]	; (8004338 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d10a      	bne.n	80042d8 <prvAddCurrentTaskToDelayedList+0x58>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	481a      	ldr	r0, [pc, #104]	; (800433c <prvAddCurrentTaskToDelayedList+0xbc>)
 80042d2:	f7ff f971 	bl	80035b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042d6:	e026      	b.n	8004326 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d209      	bcs.n	8004304 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042f0:	4b13      	ldr	r3, [pc, #76]	; (8004340 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f7ff f97f 	bl	8003600 <vListInsert>
}
 8004302:	e010      	b.n	8004326 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <prvAddCurrentTaskToDelayedList+0xb4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3304      	adds	r3, #4
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f7ff f975 	bl	8003600 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004316:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	429a      	cmp	r2, r3
 800431e:	d202      	bcs.n	8004326 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004320:	4a09      	ldr	r2, [pc, #36]	; (8004348 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6013      	str	r3, [r2, #0]
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	200004ac 	.word	0x200004ac
 8004334:	200003a8 	.word	0x200003a8
 8004338:	200004b0 	.word	0x200004b0
 800433c:	20000494 	.word	0x20000494
 8004340:	20000464 	.word	0x20000464
 8004344:	20000460 	.word	0x20000460
 8004348:	200004c8 	.word	0x200004c8

0800434c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b04      	subs	r3, #4
 800435c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3b04      	subs	r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f023 0201 	bic.w	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3b04      	subs	r3, #4
 800437a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800437c:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <pxPortInitialiseStack+0x64>)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3b14      	subs	r3, #20
 8004386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b04      	subs	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f06f 0202 	mvn.w	r2, #2
 800439a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b20      	subs	r3, #32
 80043a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	080043b5 	.word	0x080043b5

080043b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <prvTaskExitError+0x54>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d00a      	beq.n	80043de <prvTaskExitError+0x2a>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	60fb      	str	r3, [r7, #12]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <prvTaskExitError+0x28>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	60bb      	str	r3, [r7, #8]
}
 80043f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043f2:	bf00      	nop
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0fc      	beq.n	80043f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	2000000c 	.word	0x2000000c
 800440c:	00000000 	.word	0x00000000

08004410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <pxCurrentTCBConst2>)
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	6808      	ldr	r0, [r1, #0]
 8004416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	f380 8809 	msr	PSP, r0
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f380 8811 	msr	BASEPRI, r0
 800442a:	4770      	bx	lr
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst2>:
 8004430:	200003a8 	.word	0x200003a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004438:	4808      	ldr	r0, [pc, #32]	; (800445c <prvPortStartFirstTask+0x24>)
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	6800      	ldr	r0, [r0, #0]
 800443e:	f380 8808 	msr	MSP, r0
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8814 	msr	CONTROL, r0
 800444a:	b662      	cpsie	i
 800444c:	b661      	cpsie	f
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	df00      	svc	0
 8004458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800445a:	bf00      	nop
 800445c:	e000ed08 	.word	0xe000ed08

08004460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004466:	4b46      	ldr	r3, [pc, #280]	; (8004580 <xPortStartScheduler+0x120>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a46      	ldr	r2, [pc, #280]	; (8004584 <xPortStartScheduler+0x124>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10a      	bne.n	8004486 <xPortStartScheduler+0x26>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	613b      	str	r3, [r7, #16]
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004486:	4b3e      	ldr	r3, [pc, #248]	; (8004580 <xPortStartScheduler+0x120>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a3f      	ldr	r2, [pc, #252]	; (8004588 <xPortStartScheduler+0x128>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10a      	bne.n	80044a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	60fb      	str	r3, [r7, #12]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044a6:	4b39      	ldr	r3, [pc, #228]	; (800458c <xPortStartScheduler+0x12c>)
 80044a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	22ff      	movs	r2, #255	; 0xff
 80044b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <xPortStartScheduler+0x130>)
 80044cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <xPortStartScheduler+0x134>)
 80044d0:	2207      	movs	r2, #7
 80044d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044d4:	e009      	b.n	80044ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <xPortStartScheduler+0x134>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3b01      	subs	r3, #1
 80044dc:	4a2d      	ldr	r2, [pc, #180]	; (8004594 <xPortStartScheduler+0x134>)
 80044de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d0ef      	beq.n	80044d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044f6:	4b27      	ldr	r3, [pc, #156]	; (8004594 <xPortStartScheduler+0x134>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1c3 0307 	rsb	r3, r3, #7
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d00a      	beq.n	8004518 <xPortStartScheduler+0xb8>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	60bb      	str	r3, [r7, #8]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004518:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <xPortStartScheduler+0x134>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <xPortStartScheduler+0x134>)
 8004520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004522:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <xPortStartScheduler+0x134>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800452a:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <xPortStartScheduler+0x134>)
 800452c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004536:	4b18      	ldr	r3, [pc, #96]	; (8004598 <xPortStartScheduler+0x138>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a17      	ldr	r2, [pc, #92]	; (8004598 <xPortStartScheduler+0x138>)
 800453c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <xPortStartScheduler+0x138>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a14      	ldr	r2, [pc, #80]	; (8004598 <xPortStartScheduler+0x138>)
 8004548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800454c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800454e:	f000 f8dd 	bl	800470c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <xPortStartScheduler+0x13c>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004558:	f000 f8fc 	bl	8004754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <xPortStartScheduler+0x140>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0f      	ldr	r2, [pc, #60]	; (80045a0 <xPortStartScheduler+0x140>)
 8004562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004568:	f7ff ff66 	bl	8004438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800456c:	f7ff fd56 	bl	800401c <vTaskSwitchContext>
	prvTaskExitError();
 8004570:	f7ff ff20 	bl	80043b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	e000ed00 	.word	0xe000ed00
 8004584:	410fc271 	.word	0x410fc271
 8004588:	410fc270 	.word	0x410fc270
 800458c:	e000e400 	.word	0xe000e400
 8004590:	200004d4 	.word	0x200004d4
 8004594:	200004d8 	.word	0x200004d8
 8004598:	e000ed20 	.word	0xe000ed20
 800459c:	2000000c 	.word	0x2000000c
 80045a0:	e000ef34 	.word	0xe000ef34

080045a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	607b      	str	r3, [r7, #4]
}
 80045bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <vPortEnterCritical+0x58>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3301      	adds	r3, #1
 80045c4:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <vPortEnterCritical+0x58>)
 80045c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <vPortEnterCritical+0x58>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d10f      	bne.n	80045f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <vPortEnterCritical+0x5c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	603b      	str	r3, [r7, #0]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <vPortEnterCritical+0x4a>
	}
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	2000000c 	.word	0x2000000c
 8004600:	e000ed04 	.word	0xe000ed04

08004604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <vPortExitCritical+0x50>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <vPortExitCritical+0x24>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	607b      	str	r3, [r7, #4]
}
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <vPortExitCritical+0x50>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3b01      	subs	r3, #1
 800462e:	4a09      	ldr	r2, [pc, #36]	; (8004654 <vPortExitCritical+0x50>)
 8004630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <vPortExitCritical+0x50>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d105      	bne.n	8004646 <vPortExitCritical+0x42>
 800463a:	2300      	movs	r3, #0
 800463c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	2000000c 	.word	0x2000000c
	...

08004660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004660:	f3ef 8009 	mrs	r0, PSP
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <pxCurrentTCBConst>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	f01e 0f10 	tst.w	lr, #16
 8004670:	bf08      	it	eq
 8004672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	6010      	str	r0, [r2, #0]
 800467c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004684:	f380 8811 	msr	BASEPRI, r0
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f7ff fcc4 	bl	800401c <vTaskSwitchContext>
 8004694:	f04f 0000 	mov.w	r0, #0
 8004698:	f380 8811 	msr	BASEPRI, r0
 800469c:	bc09      	pop	{r0, r3}
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	6808      	ldr	r0, [r1, #0]
 80046a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a6:	f01e 0f10 	tst.w	lr, #16
 80046aa:	bf08      	it	eq
 80046ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046b0:	f380 8809 	msr	PSP, r0
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	f3af 8000 	nop.w

080046c0 <pxCurrentTCBConst>:
 80046c0:	200003a8 	.word	0x200003a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	607b      	str	r3, [r7, #4]
}
 80046e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046e2:	f7ff fbe3 	bl	8003eac <xTaskIncrementTick>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <SysTick_Handler+0x40>)
 80046ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	2300      	movs	r3, #0
 80046f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f383 8811 	msr	BASEPRI, r3
}
 80046fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <vPortSetupTimerInterrupt+0x34>)
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <vPortSetupTimerInterrupt+0x38>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <vPortSetupTimerInterrupt+0x3c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0a      	ldr	r2, [pc, #40]	; (800474c <vPortSetupTimerInterrupt+0x40>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <vPortSetupTimerInterrupt+0x44>)
 800472a:	3b01      	subs	r3, #1
 800472c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800472e:	4b04      	ldr	r3, [pc, #16]	; (8004740 <vPortSetupTimerInterrupt+0x34>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	e000e010 	.word	0xe000e010
 8004744:	e000e018 	.word	0xe000e018
 8004748:	20000000 	.word	0x20000000
 800474c:	10624dd3 	.word	0x10624dd3
 8004750:	e000e014 	.word	0xe000e014

08004754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004764 <vPortEnableVFP+0x10>
 8004758:	6801      	ldr	r1, [r0, #0]
 800475a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800475e:	6001      	str	r1, [r0, #0]
 8004760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004762:	bf00      	nop
 8004764:	e000ed88 	.word	0xe000ed88

08004768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004774:	f7ff faf0 	bl	8003d58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004778:	4b5b      	ldr	r3, [pc, #364]	; (80048e8 <pvPortMalloc+0x180>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004780:	f000 f920 	bl	80049c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004784:	4b59      	ldr	r3, [pc, #356]	; (80048ec <pvPortMalloc+0x184>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	f040 8093 	bne.w	80048b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01d      	beq.n	80047d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004798:	2208      	movs	r2, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d014      	beq.n	80047d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f023 0307 	bic.w	r3, r3, #7
 80047b0:	3308      	adds	r3, #8
 80047b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <pvPortMalloc+0x6c>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	617b      	str	r3, [r7, #20]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d06e      	beq.n	80048b8 <pvPortMalloc+0x150>
 80047da:	4b45      	ldr	r3, [pc, #276]	; (80048f0 <pvPortMalloc+0x188>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d869      	bhi.n	80048b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047e4:	4b43      	ldr	r3, [pc, #268]	; (80048f4 <pvPortMalloc+0x18c>)
 80047e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047e8:	4b42      	ldr	r3, [pc, #264]	; (80048f4 <pvPortMalloc+0x18c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ee:	e004      	b.n	80047fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	d903      	bls.n	800480c <pvPortMalloc+0xa4>
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f1      	bne.n	80047f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800480c:	4b36      	ldr	r3, [pc, #216]	; (80048e8 <pvPortMalloc+0x180>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	429a      	cmp	r2, r3
 8004814:	d050      	beq.n	80048b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2208      	movs	r2, #8
 800481c:	4413      	add	r3, r2
 800481e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	2308      	movs	r3, #8
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	429a      	cmp	r2, r3
 8004836:	d91f      	bls.n	8004878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <pvPortMalloc+0xf8>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	613b      	str	r3, [r7, #16]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	1ad2      	subs	r2, r2, r3
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004872:	69b8      	ldr	r0, [r7, #24]
 8004874:	f000 f908 	bl	8004a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <pvPortMalloc+0x188>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <pvPortMalloc+0x188>)
 8004884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004886:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <pvPortMalloc+0x188>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <pvPortMalloc+0x190>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d203      	bcs.n	800489a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004892:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <pvPortMalloc+0x188>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <pvPortMalloc+0x190>)
 8004898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <pvPortMalloc+0x184>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <pvPortMalloc+0x194>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	4a11      	ldr	r2, [pc, #68]	; (80048fc <pvPortMalloc+0x194>)
 80048b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048b8:	f7ff fa5c 	bl	8003d74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <pvPortMalloc+0x174>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	60fb      	str	r3, [r7, #12]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <pvPortMalloc+0x172>
	return pvReturn;
 80048dc:	69fb      	ldr	r3, [r7, #28]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3728      	adds	r7, #40	; 0x28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200040e4 	.word	0x200040e4
 80048ec:	200040f8 	.word	0x200040f8
 80048f0:	200040e8 	.word	0x200040e8
 80048f4:	200040dc 	.word	0x200040dc
 80048f8:	200040ec 	.word	0x200040ec
 80048fc:	200040f0 	.word	0x200040f0

08004900 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d04d      	beq.n	80049ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004912:	2308      	movs	r3, #8
 8004914:	425b      	negs	r3, r3
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4413      	add	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <vPortFree+0xb8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <vPortFree+0x44>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60fb      	str	r3, [r7, #12]
}
 8004940:	bf00      	nop
 8004942:	e7fe      	b.n	8004942 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <vPortFree+0x62>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	60bb      	str	r3, [r7, #8]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <vPortFree+0xb8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01e      	beq.n	80049ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d11a      	bne.n	80049ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <vPortFree+0xb8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	43db      	mvns	r3, r3
 8004982:	401a      	ands	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004988:	f7ff f9e6 	bl	8003d58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <vPortFree+0xbc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4413      	add	r3, r2
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <vPortFree+0xbc>)
 8004998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800499a:	6938      	ldr	r0, [r7, #16]
 800499c:	f000 f874 	bl	8004a88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <vPortFree+0xc0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <vPortFree+0xc0>)
 80049a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80049aa:	f7ff f9e3 	bl	8003d74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049ae:	bf00      	nop
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200040f8 	.word	0x200040f8
 80049bc:	200040e8 	.word	0x200040e8
 80049c0:	200040f4 	.word	0x200040f4

080049c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80049ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <prvHeapInit+0xac>)
 80049d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00c      	beq.n	80049f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3307      	adds	r3, #7
 80049e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0307 	bic.w	r3, r3, #7
 80049ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	4a1f      	ldr	r2, [pc, #124]	; (8004a70 <prvHeapInit+0xac>)
 80049f4:	4413      	add	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049fc:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <prvHeapInit+0xb0>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a02:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <prvHeapInit+0xb0>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a10:	2208      	movs	r2, #8
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0307 	bic.w	r3, r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <prvHeapInit+0xb4>)
 8004a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <prvHeapInit+0xb4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <prvHeapInit+0xb4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <prvHeapInit+0xb4>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <prvHeapInit+0xb8>)
 8004a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <prvHeapInit+0xbc>)
 8004a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <prvHeapInit+0xc0>)
 8004a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a62:	601a      	str	r2, [r3, #0]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	200004dc 	.word	0x200004dc
 8004a74:	200040dc 	.word	0x200040dc
 8004a78:	200040e4 	.word	0x200040e4
 8004a7c:	200040ec 	.word	0x200040ec
 8004a80:	200040e8 	.word	0x200040e8
 8004a84:	200040f8 	.word	0x200040f8

08004a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a90:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <prvInsertBlockIntoFreeList+0xac>)
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e002      	b.n	8004a9c <prvInsertBlockIntoFreeList+0x14>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d8f7      	bhi.n	8004a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d108      	bne.n	8004aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d118      	bne.n	8004b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <prvInsertBlockIntoFreeList+0xb0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d00d      	beq.n	8004b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	441a      	add	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e008      	b.n	8004b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b06:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <prvInsertBlockIntoFreeList+0xb0>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e003      	b.n	8004b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d002      	beq.n	8004b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	200040dc 	.word	0x200040dc
 8004b38:	200040e4 	.word	0x200040e4

08004b3c <__errno>:
 8004b3c:	4b01      	ldr	r3, [pc, #4]	; (8004b44 <__errno+0x8>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000010 	.word	0x20000010

08004b48 <__libc_init_array>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	4d0d      	ldr	r5, [pc, #52]	; (8004b80 <__libc_init_array+0x38>)
 8004b4c:	4c0d      	ldr	r4, [pc, #52]	; (8004b84 <__libc_init_array+0x3c>)
 8004b4e:	1b64      	subs	r4, r4, r5
 8004b50:	10a4      	asrs	r4, r4, #2
 8004b52:	2600      	movs	r6, #0
 8004b54:	42a6      	cmp	r6, r4
 8004b56:	d109      	bne.n	8004b6c <__libc_init_array+0x24>
 8004b58:	4d0b      	ldr	r5, [pc, #44]	; (8004b88 <__libc_init_array+0x40>)
 8004b5a:	4c0c      	ldr	r4, [pc, #48]	; (8004b8c <__libc_init_array+0x44>)
 8004b5c:	f000 fc8e 	bl	800547c <_init>
 8004b60:	1b64      	subs	r4, r4, r5
 8004b62:	10a4      	asrs	r4, r4, #2
 8004b64:	2600      	movs	r6, #0
 8004b66:	42a6      	cmp	r6, r4
 8004b68:	d105      	bne.n	8004b76 <__libc_init_array+0x2e>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b70:	4798      	blx	r3
 8004b72:	3601      	adds	r6, #1
 8004b74:	e7ee      	b.n	8004b54 <__libc_init_array+0xc>
 8004b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b7a:	4798      	blx	r3
 8004b7c:	3601      	adds	r6, #1
 8004b7e:	e7f2      	b.n	8004b66 <__libc_init_array+0x1e>
 8004b80:	08005560 	.word	0x08005560
 8004b84:	08005560 	.word	0x08005560
 8004b88:	08005560 	.word	0x08005560
 8004b8c:	08005564 	.word	0x08005564

08004b90 <memcpy>:
 8004b90:	440a      	add	r2, r1
 8004b92:	4291      	cmp	r1, r2
 8004b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b98:	d100      	bne.n	8004b9c <memcpy+0xc>
 8004b9a:	4770      	bx	lr
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ba6:	4291      	cmp	r1, r2
 8004ba8:	d1f9      	bne.n	8004b9e <memcpy+0xe>
 8004baa:	bd10      	pop	{r4, pc}

08004bac <memset>:
 8004bac:	4402      	add	r2, r0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d100      	bne.n	8004bb6 <memset+0xa>
 8004bb4:	4770      	bx	lr
 8004bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bba:	e7f9      	b.n	8004bb0 <memset+0x4>

08004bbc <siprintf>:
 8004bbc:	b40e      	push	{r1, r2, r3}
 8004bbe:	b500      	push	{lr}
 8004bc0:	b09c      	sub	sp, #112	; 0x70
 8004bc2:	ab1d      	add	r3, sp, #116	; 0x74
 8004bc4:	9002      	str	r0, [sp, #8]
 8004bc6:	9006      	str	r0, [sp, #24]
 8004bc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bcc:	4809      	ldr	r0, [pc, #36]	; (8004bf4 <siprintf+0x38>)
 8004bce:	9107      	str	r1, [sp, #28]
 8004bd0:	9104      	str	r1, [sp, #16]
 8004bd2:	4909      	ldr	r1, [pc, #36]	; (8004bf8 <siprintf+0x3c>)
 8004bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd8:	9105      	str	r1, [sp, #20]
 8004bda:	6800      	ldr	r0, [r0, #0]
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	a902      	add	r1, sp, #8
 8004be0:	f000 f868 	bl	8004cb4 <_svfiprintf_r>
 8004be4:	9b02      	ldr	r3, [sp, #8]
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	b01c      	add	sp, #112	; 0x70
 8004bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf0:	b003      	add	sp, #12
 8004bf2:	4770      	bx	lr
 8004bf4:	20000010 	.word	0x20000010
 8004bf8:	ffff0208 	.word	0xffff0208

08004bfc <__ssputs_r>:
 8004bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	688e      	ldr	r6, [r1, #8]
 8004c02:	429e      	cmp	r6, r3
 8004c04:	4682      	mov	sl, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	4690      	mov	r8, r2
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	d838      	bhi.n	8004c80 <__ssputs_r+0x84>
 8004c0e:	898a      	ldrh	r2, [r1, #12]
 8004c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c14:	d032      	beq.n	8004c7c <__ssputs_r+0x80>
 8004c16:	6825      	ldr	r5, [r4, #0]
 8004c18:	6909      	ldr	r1, [r1, #16]
 8004c1a:	eba5 0901 	sub.w	r9, r5, r1
 8004c1e:	6965      	ldr	r5, [r4, #20]
 8004c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c28:	3301      	adds	r3, #1
 8004c2a:	444b      	add	r3, r9
 8004c2c:	106d      	asrs	r5, r5, #1
 8004c2e:	429d      	cmp	r5, r3
 8004c30:	bf38      	it	cc
 8004c32:	461d      	movcc	r5, r3
 8004c34:	0553      	lsls	r3, r2, #21
 8004c36:	d531      	bpl.n	8004c9c <__ssputs_r+0xa0>
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f000 fb55 	bl	80052e8 <_malloc_r>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	b950      	cbnz	r0, 8004c58 <__ssputs_r+0x5c>
 8004c42:	230c      	movs	r3, #12
 8004c44:	f8ca 3000 	str.w	r3, [sl]
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	6921      	ldr	r1, [r4, #16]
 8004c5a:	464a      	mov	r2, r9
 8004c5c:	f7ff ff98 	bl	8004b90 <memcpy>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	6126      	str	r6, [r4, #16]
 8004c6e:	6165      	str	r5, [r4, #20]
 8004c70:	444e      	add	r6, r9
 8004c72:	eba5 0509 	sub.w	r5, r5, r9
 8004c76:	6026      	str	r6, [r4, #0]
 8004c78:	60a5      	str	r5, [r4, #8]
 8004c7a:	463e      	mov	r6, r7
 8004c7c:	42be      	cmp	r6, r7
 8004c7e:	d900      	bls.n	8004c82 <__ssputs_r+0x86>
 8004c80:	463e      	mov	r6, r7
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	4632      	mov	r2, r6
 8004c86:	4641      	mov	r1, r8
 8004c88:	f000 faa8 	bl	80051dc <memmove>
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	1b9b      	subs	r3, r3, r6
 8004c90:	60a3      	str	r3, [r4, #8]
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	4433      	add	r3, r6
 8004c96:	6023      	str	r3, [r4, #0]
 8004c98:	2000      	movs	r0, #0
 8004c9a:	e7db      	b.n	8004c54 <__ssputs_r+0x58>
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	f000 fb97 	bl	80053d0 <_realloc_r>
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d1e1      	bne.n	8004c6c <__ssputs_r+0x70>
 8004ca8:	6921      	ldr	r1, [r4, #16]
 8004caa:	4650      	mov	r0, sl
 8004cac:	f000 fab0 	bl	8005210 <_free_r>
 8004cb0:	e7c7      	b.n	8004c42 <__ssputs_r+0x46>
	...

08004cb4 <_svfiprintf_r>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	4698      	mov	r8, r3
 8004cba:	898b      	ldrh	r3, [r1, #12]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	b09d      	sub	sp, #116	; 0x74
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	460d      	mov	r5, r1
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	d50e      	bpl.n	8004ce6 <_svfiprintf_r+0x32>
 8004cc8:	690b      	ldr	r3, [r1, #16]
 8004cca:	b963      	cbnz	r3, 8004ce6 <_svfiprintf_r+0x32>
 8004ccc:	2140      	movs	r1, #64	; 0x40
 8004cce:	f000 fb0b 	bl	80052e8 <_malloc_r>
 8004cd2:	6028      	str	r0, [r5, #0]
 8004cd4:	6128      	str	r0, [r5, #16]
 8004cd6:	b920      	cbnz	r0, 8004ce2 <_svfiprintf_r+0x2e>
 8004cd8:	230c      	movs	r3, #12
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	e0d1      	b.n	8004e86 <_svfiprintf_r+0x1d2>
 8004ce2:	2340      	movs	r3, #64	; 0x40
 8004ce4:	616b      	str	r3, [r5, #20]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cea:	2320      	movs	r3, #32
 8004cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cf4:	2330      	movs	r3, #48	; 0x30
 8004cf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ea0 <_svfiprintf_r+0x1ec>
 8004cfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cfe:	f04f 0901 	mov.w	r9, #1
 8004d02:	4623      	mov	r3, r4
 8004d04:	469a      	mov	sl, r3
 8004d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d0a:	b10a      	cbz	r2, 8004d10 <_svfiprintf_r+0x5c>
 8004d0c:	2a25      	cmp	r2, #37	; 0x25
 8004d0e:	d1f9      	bne.n	8004d04 <_svfiprintf_r+0x50>
 8004d10:	ebba 0b04 	subs.w	fp, sl, r4
 8004d14:	d00b      	beq.n	8004d2e <_svfiprintf_r+0x7a>
 8004d16:	465b      	mov	r3, fp
 8004d18:	4622      	mov	r2, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ff6d 	bl	8004bfc <__ssputs_r>
 8004d22:	3001      	adds	r0, #1
 8004d24:	f000 80aa 	beq.w	8004e7c <_svfiprintf_r+0x1c8>
 8004d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d2a:	445a      	add	r2, fp
 8004d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80a2 	beq.w	8004e7c <_svfiprintf_r+0x1c8>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d42:	f10a 0a01 	add.w	sl, sl, #1
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	9307      	str	r3, [sp, #28]
 8004d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d50:	4654      	mov	r4, sl
 8004d52:	2205      	movs	r2, #5
 8004d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d58:	4851      	ldr	r0, [pc, #324]	; (8004ea0 <_svfiprintf_r+0x1ec>)
 8004d5a:	f7fb fa39 	bl	80001d0 <memchr>
 8004d5e:	9a04      	ldr	r2, [sp, #16]
 8004d60:	b9d8      	cbnz	r0, 8004d9a <_svfiprintf_r+0xe6>
 8004d62:	06d0      	lsls	r0, r2, #27
 8004d64:	bf44      	itt	mi
 8004d66:	2320      	movmi	r3, #32
 8004d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d6c:	0711      	lsls	r1, r2, #28
 8004d6e:	bf44      	itt	mi
 8004d70:	232b      	movmi	r3, #43	; 0x2b
 8004d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d76:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7c:	d015      	beq.n	8004daa <_svfiprintf_r+0xf6>
 8004d7e:	9a07      	ldr	r2, [sp, #28]
 8004d80:	4654      	mov	r4, sl
 8004d82:	2000      	movs	r0, #0
 8004d84:	f04f 0c0a 	mov.w	ip, #10
 8004d88:	4621      	mov	r1, r4
 8004d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d8e:	3b30      	subs	r3, #48	; 0x30
 8004d90:	2b09      	cmp	r3, #9
 8004d92:	d94e      	bls.n	8004e32 <_svfiprintf_r+0x17e>
 8004d94:	b1b0      	cbz	r0, 8004dc4 <_svfiprintf_r+0x110>
 8004d96:	9207      	str	r2, [sp, #28]
 8004d98:	e014      	b.n	8004dc4 <_svfiprintf_r+0x110>
 8004d9a:	eba0 0308 	sub.w	r3, r0, r8
 8004d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004da2:	4313      	orrs	r3, r2
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	46a2      	mov	sl, r4
 8004da8:	e7d2      	b.n	8004d50 <_svfiprintf_r+0x9c>
 8004daa:	9b03      	ldr	r3, [sp, #12]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	9103      	str	r1, [sp, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bfbb      	ittet	lt
 8004db6:	425b      	neglt	r3, r3
 8004db8:	f042 0202 	orrlt.w	r2, r2, #2
 8004dbc:	9307      	strge	r3, [sp, #28]
 8004dbe:	9307      	strlt	r3, [sp, #28]
 8004dc0:	bfb8      	it	lt
 8004dc2:	9204      	strlt	r2, [sp, #16]
 8004dc4:	7823      	ldrb	r3, [r4, #0]
 8004dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004dc8:	d10c      	bne.n	8004de4 <_svfiprintf_r+0x130>
 8004dca:	7863      	ldrb	r3, [r4, #1]
 8004dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dce:	d135      	bne.n	8004e3c <_svfiprintf_r+0x188>
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	9203      	str	r2, [sp, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bfb8      	it	lt
 8004ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004de0:	3402      	adds	r4, #2
 8004de2:	9305      	str	r3, [sp, #20]
 8004de4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004eb0 <_svfiprintf_r+0x1fc>
 8004de8:	7821      	ldrb	r1, [r4, #0]
 8004dea:	2203      	movs	r2, #3
 8004dec:	4650      	mov	r0, sl
 8004dee:	f7fb f9ef 	bl	80001d0 <memchr>
 8004df2:	b140      	cbz	r0, 8004e06 <_svfiprintf_r+0x152>
 8004df4:	2340      	movs	r3, #64	; 0x40
 8004df6:	eba0 000a 	sub.w	r0, r0, sl
 8004dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	4303      	orrs	r3, r0
 8004e02:	3401      	adds	r4, #1
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0a:	4826      	ldr	r0, [pc, #152]	; (8004ea4 <_svfiprintf_r+0x1f0>)
 8004e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e10:	2206      	movs	r2, #6
 8004e12:	f7fb f9dd 	bl	80001d0 <memchr>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d038      	beq.n	8004e8c <_svfiprintf_r+0x1d8>
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <_svfiprintf_r+0x1f4>)
 8004e1c:	bb1b      	cbnz	r3, 8004e66 <_svfiprintf_r+0x1b2>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	3307      	adds	r3, #7
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	3308      	adds	r3, #8
 8004e28:	9303      	str	r3, [sp, #12]
 8004e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2c:	4433      	add	r3, r6
 8004e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e30:	e767      	b.n	8004d02 <_svfiprintf_r+0x4e>
 8004e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e36:	460c      	mov	r4, r1
 8004e38:	2001      	movs	r0, #1
 8004e3a:	e7a5      	b.n	8004d88 <_svfiprintf_r+0xd4>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	3401      	adds	r4, #1
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f04f 0c0a 	mov.w	ip, #10
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e4e:	3a30      	subs	r2, #48	; 0x30
 8004e50:	2a09      	cmp	r2, #9
 8004e52:	d903      	bls.n	8004e5c <_svfiprintf_r+0x1a8>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0c5      	beq.n	8004de4 <_svfiprintf_r+0x130>
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	e7c3      	b.n	8004de4 <_svfiprintf_r+0x130>
 8004e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e60:	4604      	mov	r4, r0
 8004e62:	2301      	movs	r3, #1
 8004e64:	e7f0      	b.n	8004e48 <_svfiprintf_r+0x194>
 8004e66:	ab03      	add	r3, sp, #12
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	462a      	mov	r2, r5
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <_svfiprintf_r+0x1f8>)
 8004e6e:	a904      	add	r1, sp, #16
 8004e70:	4638      	mov	r0, r7
 8004e72:	f3af 8000 	nop.w
 8004e76:	1c42      	adds	r2, r0, #1
 8004e78:	4606      	mov	r6, r0
 8004e7a:	d1d6      	bne.n	8004e2a <_svfiprintf_r+0x176>
 8004e7c:	89ab      	ldrh	r3, [r5, #12]
 8004e7e:	065b      	lsls	r3, r3, #25
 8004e80:	f53f af2c 	bmi.w	8004cdc <_svfiprintf_r+0x28>
 8004e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e86:	b01d      	add	sp, #116	; 0x74
 8004e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8c:	ab03      	add	r3, sp, #12
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <_svfiprintf_r+0x1f8>)
 8004e94:	a904      	add	r1, sp, #16
 8004e96:	4638      	mov	r0, r7
 8004e98:	f000 f87a 	bl	8004f90 <_printf_i>
 8004e9c:	e7eb      	b.n	8004e76 <_svfiprintf_r+0x1c2>
 8004e9e:	bf00      	nop
 8004ea0:	08005524 	.word	0x08005524
 8004ea4:	0800552e 	.word	0x0800552e
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	08004bfd 	.word	0x08004bfd
 8004eb0:	0800552a 	.word	0x0800552a

08004eb4 <_printf_common>:
 8004eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	4616      	mov	r6, r2
 8004eba:	4699      	mov	r9, r3
 8004ebc:	688a      	ldr	r2, [r1, #8]
 8004ebe:	690b      	ldr	r3, [r1, #16]
 8004ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bfb8      	it	lt
 8004ec8:	4613      	movlt	r3, r2
 8004eca:	6033      	str	r3, [r6, #0]
 8004ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	b10a      	cbz	r2, 8004eda <_printf_common+0x26>
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	0699      	lsls	r1, r3, #26
 8004ede:	bf42      	ittt	mi
 8004ee0:	6833      	ldrmi	r3, [r6, #0]
 8004ee2:	3302      	addmi	r3, #2
 8004ee4:	6033      	strmi	r3, [r6, #0]
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	f015 0506 	ands.w	r5, r5, #6
 8004eec:	d106      	bne.n	8004efc <_printf_common+0x48>
 8004eee:	f104 0a19 	add.w	sl, r4, #25
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	42ab      	cmp	r3, r5
 8004efa:	dc26      	bgt.n	8004f4a <_printf_common+0x96>
 8004efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f00:	1e13      	subs	r3, r2, #0
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	bf18      	it	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	0692      	lsls	r2, r2, #26
 8004f0a:	d42b      	bmi.n	8004f64 <_printf_common+0xb0>
 8004f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f10:	4649      	mov	r1, r9
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d01e      	beq.n	8004f58 <_printf_common+0xa4>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	68e5      	ldr	r5, [r4, #12]
 8004f1e:	6832      	ldr	r2, [r6, #0]
 8004f20:	f003 0306 	and.w	r3, r3, #6
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	bf08      	it	eq
 8004f28:	1aad      	subeq	r5, r5, r2
 8004f2a:	68a3      	ldr	r3, [r4, #8]
 8004f2c:	6922      	ldr	r2, [r4, #16]
 8004f2e:	bf0c      	ite	eq
 8004f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f34:	2500      	movne	r5, #0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	bfc4      	itt	gt
 8004f3a:	1a9b      	subgt	r3, r3, r2
 8004f3c:	18ed      	addgt	r5, r5, r3
 8004f3e:	2600      	movs	r6, #0
 8004f40:	341a      	adds	r4, #26
 8004f42:	42b5      	cmp	r5, r6
 8004f44:	d11a      	bne.n	8004f7c <_printf_common+0xc8>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e008      	b.n	8004f5c <_printf_common+0xa8>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	4649      	mov	r1, r9
 8004f50:	4638      	mov	r0, r7
 8004f52:	47c0      	blx	r8
 8004f54:	3001      	adds	r0, #1
 8004f56:	d103      	bne.n	8004f60 <_printf_common+0xac>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f60:	3501      	adds	r5, #1
 8004f62:	e7c6      	b.n	8004ef2 <_printf_common+0x3e>
 8004f64:	18e1      	adds	r1, r4, r3
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	2030      	movs	r0, #48	; 0x30
 8004f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f6e:	4422      	add	r2, r4
 8004f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f78:	3302      	adds	r3, #2
 8004f7a:	e7c7      	b.n	8004f0c <_printf_common+0x58>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4649      	mov	r1, r9
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c0      	blx	r8
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0e6      	beq.n	8004f58 <_printf_common+0xa4>
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7d9      	b.n	8004f42 <_printf_common+0x8e>
	...

08004f90 <_printf_i>:
 8004f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	7e0f      	ldrb	r7, [r1, #24]
 8004f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f98:	2f78      	cmp	r7, #120	; 0x78
 8004f9a:	4691      	mov	r9, r2
 8004f9c:	4680      	mov	r8, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fa6:	d807      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fa8:	2f62      	cmp	r7, #98	; 0x62
 8004faa:	d80a      	bhi.n	8004fc2 <_printf_i+0x32>
 8004fac:	2f00      	cmp	r7, #0
 8004fae:	f000 80d8 	beq.w	8005162 <_printf_i+0x1d2>
 8004fb2:	2f58      	cmp	r7, #88	; 0x58
 8004fb4:	f000 80a3 	beq.w	80050fe <_printf_i+0x16e>
 8004fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fc0:	e03a      	b.n	8005038 <_printf_i+0xa8>
 8004fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fc6:	2b15      	cmp	r3, #21
 8004fc8:	d8f6      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fca:	a101      	add	r1, pc, #4	; (adr r1, 8004fd0 <_printf_i+0x40>)
 8004fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	08004fb9 	.word	0x08004fb9
 8004fdc:	08004fb9 	.word	0x08004fb9
 8004fe0:	08004fb9 	.word	0x08004fb9
 8004fe4:	08004fb9 	.word	0x08004fb9
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004fb9 	.word	0x08004fb9
 8004ff0:	08004fb9 	.word	0x08004fb9
 8004ff4:	08004fb9 	.word	0x08004fb9
 8004ff8:	08004fb9 	.word	0x08004fb9
 8004ffc:	08005149 	.word	0x08005149
 8005000:	0800506d 	.word	0x0800506d
 8005004:	0800512b 	.word	0x0800512b
 8005008:	08004fb9 	.word	0x08004fb9
 800500c:	08004fb9 	.word	0x08004fb9
 8005010:	0800516b 	.word	0x0800516b
 8005014:	08004fb9 	.word	0x08004fb9
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08004fb9 	.word	0x08004fb9
 8005020:	08004fb9 	.word	0x08004fb9
 8005024:	08005133 	.word	0x08005133
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	1d1a      	adds	r2, r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	602a      	str	r2, [r5, #0]
 8005030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005038:	2301      	movs	r3, #1
 800503a:	e0a3      	b.n	8005184 <_printf_i+0x1f4>
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	6829      	ldr	r1, [r5, #0]
 8005040:	0606      	lsls	r6, r0, #24
 8005042:	f101 0304 	add.w	r3, r1, #4
 8005046:	d50a      	bpl.n	800505e <_printf_i+0xce>
 8005048:	680e      	ldr	r6, [r1, #0]
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	2e00      	cmp	r6, #0
 800504e:	da03      	bge.n	8005058 <_printf_i+0xc8>
 8005050:	232d      	movs	r3, #45	; 0x2d
 8005052:	4276      	negs	r6, r6
 8005054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005058:	485e      	ldr	r0, [pc, #376]	; (80051d4 <_printf_i+0x244>)
 800505a:	230a      	movs	r3, #10
 800505c:	e019      	b.n	8005092 <_printf_i+0x102>
 800505e:	680e      	ldr	r6, [r1, #0]
 8005060:	602b      	str	r3, [r5, #0]
 8005062:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005066:	bf18      	it	ne
 8005068:	b236      	sxthne	r6, r6
 800506a:	e7ef      	b.n	800504c <_printf_i+0xbc>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	6820      	ldr	r0, [r4, #0]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	6029      	str	r1, [r5, #0]
 8005074:	0601      	lsls	r1, r0, #24
 8005076:	d501      	bpl.n	800507c <_printf_i+0xec>
 8005078:	681e      	ldr	r6, [r3, #0]
 800507a:	e002      	b.n	8005082 <_printf_i+0xf2>
 800507c:	0646      	lsls	r6, r0, #25
 800507e:	d5fb      	bpl.n	8005078 <_printf_i+0xe8>
 8005080:	881e      	ldrh	r6, [r3, #0]
 8005082:	4854      	ldr	r0, [pc, #336]	; (80051d4 <_printf_i+0x244>)
 8005084:	2f6f      	cmp	r7, #111	; 0x6f
 8005086:	bf0c      	ite	eq
 8005088:	2308      	moveq	r3, #8
 800508a:	230a      	movne	r3, #10
 800508c:	2100      	movs	r1, #0
 800508e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005092:	6865      	ldr	r5, [r4, #4]
 8005094:	60a5      	str	r5, [r4, #8]
 8005096:	2d00      	cmp	r5, #0
 8005098:	bfa2      	ittt	ge
 800509a:	6821      	ldrge	r1, [r4, #0]
 800509c:	f021 0104 	bicge.w	r1, r1, #4
 80050a0:	6021      	strge	r1, [r4, #0]
 80050a2:	b90e      	cbnz	r6, 80050a8 <_printf_i+0x118>
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	d04d      	beq.n	8005144 <_printf_i+0x1b4>
 80050a8:	4615      	mov	r5, r2
 80050aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ae:	fb03 6711 	mls	r7, r3, r1, r6
 80050b2:	5dc7      	ldrb	r7, [r0, r7]
 80050b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050b8:	4637      	mov	r7, r6
 80050ba:	42bb      	cmp	r3, r7
 80050bc:	460e      	mov	r6, r1
 80050be:	d9f4      	bls.n	80050aa <_printf_i+0x11a>
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d10b      	bne.n	80050dc <_printf_i+0x14c>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	07de      	lsls	r6, r3, #31
 80050c8:	d508      	bpl.n	80050dc <_printf_i+0x14c>
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	6861      	ldr	r1, [r4, #4]
 80050ce:	4299      	cmp	r1, r3
 80050d0:	bfde      	ittt	le
 80050d2:	2330      	movle	r3, #48	; 0x30
 80050d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050dc:	1b52      	subs	r2, r2, r5
 80050de:	6122      	str	r2, [r4, #16]
 80050e0:	f8cd a000 	str.w	sl, [sp]
 80050e4:	464b      	mov	r3, r9
 80050e6:	aa03      	add	r2, sp, #12
 80050e8:	4621      	mov	r1, r4
 80050ea:	4640      	mov	r0, r8
 80050ec:	f7ff fee2 	bl	8004eb4 <_printf_common>
 80050f0:	3001      	adds	r0, #1
 80050f2:	d14c      	bne.n	800518e <_printf_i+0x1fe>
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	b004      	add	sp, #16
 80050fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fe:	4835      	ldr	r0, [pc, #212]	; (80051d4 <_printf_i+0x244>)
 8005100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005104:	6829      	ldr	r1, [r5, #0]
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f851 6b04 	ldr.w	r6, [r1], #4
 800510c:	6029      	str	r1, [r5, #0]
 800510e:	061d      	lsls	r5, r3, #24
 8005110:	d514      	bpl.n	800513c <_printf_i+0x1ac>
 8005112:	07df      	lsls	r7, r3, #31
 8005114:	bf44      	itt	mi
 8005116:	f043 0320 	orrmi.w	r3, r3, #32
 800511a:	6023      	strmi	r3, [r4, #0]
 800511c:	b91e      	cbnz	r6, 8005126 <_printf_i+0x196>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f023 0320 	bic.w	r3, r3, #32
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	2310      	movs	r3, #16
 8005128:	e7b0      	b.n	800508c <_printf_i+0xfc>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f043 0320 	orr.w	r3, r3, #32
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	2378      	movs	r3, #120	; 0x78
 8005134:	4828      	ldr	r0, [pc, #160]	; (80051d8 <_printf_i+0x248>)
 8005136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800513a:	e7e3      	b.n	8005104 <_printf_i+0x174>
 800513c:	0659      	lsls	r1, r3, #25
 800513e:	bf48      	it	mi
 8005140:	b2b6      	uxthmi	r6, r6
 8005142:	e7e6      	b.n	8005112 <_printf_i+0x182>
 8005144:	4615      	mov	r5, r2
 8005146:	e7bb      	b.n	80050c0 <_printf_i+0x130>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	6826      	ldr	r6, [r4, #0]
 800514c:	6961      	ldr	r1, [r4, #20]
 800514e:	1d18      	adds	r0, r3, #4
 8005150:	6028      	str	r0, [r5, #0]
 8005152:	0635      	lsls	r5, r6, #24
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	d501      	bpl.n	800515c <_printf_i+0x1cc>
 8005158:	6019      	str	r1, [r3, #0]
 800515a:	e002      	b.n	8005162 <_printf_i+0x1d2>
 800515c:	0670      	lsls	r0, r6, #25
 800515e:	d5fb      	bpl.n	8005158 <_printf_i+0x1c8>
 8005160:	8019      	strh	r1, [r3, #0]
 8005162:	2300      	movs	r3, #0
 8005164:	6123      	str	r3, [r4, #16]
 8005166:	4615      	mov	r5, r2
 8005168:	e7ba      	b.n	80050e0 <_printf_i+0x150>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	1d1a      	adds	r2, r3, #4
 800516e:	602a      	str	r2, [r5, #0]
 8005170:	681d      	ldr	r5, [r3, #0]
 8005172:	6862      	ldr	r2, [r4, #4]
 8005174:	2100      	movs	r1, #0
 8005176:	4628      	mov	r0, r5
 8005178:	f7fb f82a 	bl	80001d0 <memchr>
 800517c:	b108      	cbz	r0, 8005182 <_printf_i+0x1f2>
 800517e:	1b40      	subs	r0, r0, r5
 8005180:	6060      	str	r0, [r4, #4]
 8005182:	6863      	ldr	r3, [r4, #4]
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	2300      	movs	r3, #0
 8005188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800518c:	e7a8      	b.n	80050e0 <_printf_i+0x150>
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	462a      	mov	r2, r5
 8005192:	4649      	mov	r1, r9
 8005194:	4640      	mov	r0, r8
 8005196:	47d0      	blx	sl
 8005198:	3001      	adds	r0, #1
 800519a:	d0ab      	beq.n	80050f4 <_printf_i+0x164>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	079b      	lsls	r3, r3, #30
 80051a0:	d413      	bmi.n	80051ca <_printf_i+0x23a>
 80051a2:	68e0      	ldr	r0, [r4, #12]
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	4298      	cmp	r0, r3
 80051a8:	bfb8      	it	lt
 80051aa:	4618      	movlt	r0, r3
 80051ac:	e7a4      	b.n	80050f8 <_printf_i+0x168>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4632      	mov	r2, r6
 80051b2:	4649      	mov	r1, r9
 80051b4:	4640      	mov	r0, r8
 80051b6:	47d0      	blx	sl
 80051b8:	3001      	adds	r0, #1
 80051ba:	d09b      	beq.n	80050f4 <_printf_i+0x164>
 80051bc:	3501      	adds	r5, #1
 80051be:	68e3      	ldr	r3, [r4, #12]
 80051c0:	9903      	ldr	r1, [sp, #12]
 80051c2:	1a5b      	subs	r3, r3, r1
 80051c4:	42ab      	cmp	r3, r5
 80051c6:	dcf2      	bgt.n	80051ae <_printf_i+0x21e>
 80051c8:	e7eb      	b.n	80051a2 <_printf_i+0x212>
 80051ca:	2500      	movs	r5, #0
 80051cc:	f104 0619 	add.w	r6, r4, #25
 80051d0:	e7f5      	b.n	80051be <_printf_i+0x22e>
 80051d2:	bf00      	nop
 80051d4:	08005535 	.word	0x08005535
 80051d8:	08005546 	.word	0x08005546

080051dc <memmove>:
 80051dc:	4288      	cmp	r0, r1
 80051de:	b510      	push	{r4, lr}
 80051e0:	eb01 0402 	add.w	r4, r1, r2
 80051e4:	d902      	bls.n	80051ec <memmove+0x10>
 80051e6:	4284      	cmp	r4, r0
 80051e8:	4623      	mov	r3, r4
 80051ea:	d807      	bhi.n	80051fc <memmove+0x20>
 80051ec:	1e43      	subs	r3, r0, #1
 80051ee:	42a1      	cmp	r1, r4
 80051f0:	d008      	beq.n	8005204 <memmove+0x28>
 80051f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051fa:	e7f8      	b.n	80051ee <memmove+0x12>
 80051fc:	4402      	add	r2, r0
 80051fe:	4601      	mov	r1, r0
 8005200:	428a      	cmp	r2, r1
 8005202:	d100      	bne.n	8005206 <memmove+0x2a>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800520a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800520e:	e7f7      	b.n	8005200 <memmove+0x24>

08005210 <_free_r>:
 8005210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005212:	2900      	cmp	r1, #0
 8005214:	d044      	beq.n	80052a0 <_free_r+0x90>
 8005216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521a:	9001      	str	r0, [sp, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f1a1 0404 	sub.w	r4, r1, #4
 8005222:	bfb8      	it	lt
 8005224:	18e4      	addlt	r4, r4, r3
 8005226:	f000 f913 	bl	8005450 <__malloc_lock>
 800522a:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <_free_r+0x94>)
 800522c:	9801      	ldr	r0, [sp, #4]
 800522e:	6813      	ldr	r3, [r2, #0]
 8005230:	b933      	cbnz	r3, 8005240 <_free_r+0x30>
 8005232:	6063      	str	r3, [r4, #4]
 8005234:	6014      	str	r4, [r2, #0]
 8005236:	b003      	add	sp, #12
 8005238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800523c:	f000 b90e 	b.w	800545c <__malloc_unlock>
 8005240:	42a3      	cmp	r3, r4
 8005242:	d908      	bls.n	8005256 <_free_r+0x46>
 8005244:	6825      	ldr	r5, [r4, #0]
 8005246:	1961      	adds	r1, r4, r5
 8005248:	428b      	cmp	r3, r1
 800524a:	bf01      	itttt	eq
 800524c:	6819      	ldreq	r1, [r3, #0]
 800524e:	685b      	ldreq	r3, [r3, #4]
 8005250:	1949      	addeq	r1, r1, r5
 8005252:	6021      	streq	r1, [r4, #0]
 8005254:	e7ed      	b.n	8005232 <_free_r+0x22>
 8005256:	461a      	mov	r2, r3
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b10b      	cbz	r3, 8005260 <_free_r+0x50>
 800525c:	42a3      	cmp	r3, r4
 800525e:	d9fa      	bls.n	8005256 <_free_r+0x46>
 8005260:	6811      	ldr	r1, [r2, #0]
 8005262:	1855      	adds	r5, r2, r1
 8005264:	42a5      	cmp	r5, r4
 8005266:	d10b      	bne.n	8005280 <_free_r+0x70>
 8005268:	6824      	ldr	r4, [r4, #0]
 800526a:	4421      	add	r1, r4
 800526c:	1854      	adds	r4, r2, r1
 800526e:	42a3      	cmp	r3, r4
 8005270:	6011      	str	r1, [r2, #0]
 8005272:	d1e0      	bne.n	8005236 <_free_r+0x26>
 8005274:	681c      	ldr	r4, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	6053      	str	r3, [r2, #4]
 800527a:	4421      	add	r1, r4
 800527c:	6011      	str	r1, [r2, #0]
 800527e:	e7da      	b.n	8005236 <_free_r+0x26>
 8005280:	d902      	bls.n	8005288 <_free_r+0x78>
 8005282:	230c      	movs	r3, #12
 8005284:	6003      	str	r3, [r0, #0]
 8005286:	e7d6      	b.n	8005236 <_free_r+0x26>
 8005288:	6825      	ldr	r5, [r4, #0]
 800528a:	1961      	adds	r1, r4, r5
 800528c:	428b      	cmp	r3, r1
 800528e:	bf04      	itt	eq
 8005290:	6819      	ldreq	r1, [r3, #0]
 8005292:	685b      	ldreq	r3, [r3, #4]
 8005294:	6063      	str	r3, [r4, #4]
 8005296:	bf04      	itt	eq
 8005298:	1949      	addeq	r1, r1, r5
 800529a:	6021      	streq	r1, [r4, #0]
 800529c:	6054      	str	r4, [r2, #4]
 800529e:	e7ca      	b.n	8005236 <_free_r+0x26>
 80052a0:	b003      	add	sp, #12
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	200040fc 	.word	0x200040fc

080052a8 <sbrk_aligned>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4e0e      	ldr	r6, [pc, #56]	; (80052e4 <sbrk_aligned+0x3c>)
 80052ac:	460c      	mov	r4, r1
 80052ae:	6831      	ldr	r1, [r6, #0]
 80052b0:	4605      	mov	r5, r0
 80052b2:	b911      	cbnz	r1, 80052ba <sbrk_aligned+0x12>
 80052b4:	f000 f8bc 	bl	8005430 <_sbrk_r>
 80052b8:	6030      	str	r0, [r6, #0]
 80052ba:	4621      	mov	r1, r4
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 f8b7 	bl	8005430 <_sbrk_r>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	d00a      	beq.n	80052dc <sbrk_aligned+0x34>
 80052c6:	1cc4      	adds	r4, r0, #3
 80052c8:	f024 0403 	bic.w	r4, r4, #3
 80052cc:	42a0      	cmp	r0, r4
 80052ce:	d007      	beq.n	80052e0 <sbrk_aligned+0x38>
 80052d0:	1a21      	subs	r1, r4, r0
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 f8ac 	bl	8005430 <_sbrk_r>
 80052d8:	3001      	adds	r0, #1
 80052da:	d101      	bne.n	80052e0 <sbrk_aligned+0x38>
 80052dc:	f04f 34ff 	mov.w	r4, #4294967295
 80052e0:	4620      	mov	r0, r4
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	20004100 	.word	0x20004100

080052e8 <_malloc_r>:
 80052e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ec:	1ccd      	adds	r5, r1, #3
 80052ee:	f025 0503 	bic.w	r5, r5, #3
 80052f2:	3508      	adds	r5, #8
 80052f4:	2d0c      	cmp	r5, #12
 80052f6:	bf38      	it	cc
 80052f8:	250c      	movcc	r5, #12
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	4607      	mov	r7, r0
 80052fe:	db01      	blt.n	8005304 <_malloc_r+0x1c>
 8005300:	42a9      	cmp	r1, r5
 8005302:	d905      	bls.n	8005310 <_malloc_r+0x28>
 8005304:	230c      	movs	r3, #12
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	2600      	movs	r6, #0
 800530a:	4630      	mov	r0, r6
 800530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005310:	4e2e      	ldr	r6, [pc, #184]	; (80053cc <_malloc_r+0xe4>)
 8005312:	f000 f89d 	bl	8005450 <__malloc_lock>
 8005316:	6833      	ldr	r3, [r6, #0]
 8005318:	461c      	mov	r4, r3
 800531a:	bb34      	cbnz	r4, 800536a <_malloc_r+0x82>
 800531c:	4629      	mov	r1, r5
 800531e:	4638      	mov	r0, r7
 8005320:	f7ff ffc2 	bl	80052a8 <sbrk_aligned>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	4604      	mov	r4, r0
 8005328:	d14d      	bne.n	80053c6 <_malloc_r+0xde>
 800532a:	6834      	ldr	r4, [r6, #0]
 800532c:	4626      	mov	r6, r4
 800532e:	2e00      	cmp	r6, #0
 8005330:	d140      	bne.n	80053b4 <_malloc_r+0xcc>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	4631      	mov	r1, r6
 8005336:	4638      	mov	r0, r7
 8005338:	eb04 0803 	add.w	r8, r4, r3
 800533c:	f000 f878 	bl	8005430 <_sbrk_r>
 8005340:	4580      	cmp	r8, r0
 8005342:	d13a      	bne.n	80053ba <_malloc_r+0xd2>
 8005344:	6821      	ldr	r1, [r4, #0]
 8005346:	3503      	adds	r5, #3
 8005348:	1a6d      	subs	r5, r5, r1
 800534a:	f025 0503 	bic.w	r5, r5, #3
 800534e:	3508      	adds	r5, #8
 8005350:	2d0c      	cmp	r5, #12
 8005352:	bf38      	it	cc
 8005354:	250c      	movcc	r5, #12
 8005356:	4629      	mov	r1, r5
 8005358:	4638      	mov	r0, r7
 800535a:	f7ff ffa5 	bl	80052a8 <sbrk_aligned>
 800535e:	3001      	adds	r0, #1
 8005360:	d02b      	beq.n	80053ba <_malloc_r+0xd2>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	442b      	add	r3, r5
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	e00e      	b.n	8005388 <_malloc_r+0xa0>
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	1b52      	subs	r2, r2, r5
 800536e:	d41e      	bmi.n	80053ae <_malloc_r+0xc6>
 8005370:	2a0b      	cmp	r2, #11
 8005372:	d916      	bls.n	80053a2 <_malloc_r+0xba>
 8005374:	1961      	adds	r1, r4, r5
 8005376:	42a3      	cmp	r3, r4
 8005378:	6025      	str	r5, [r4, #0]
 800537a:	bf18      	it	ne
 800537c:	6059      	strne	r1, [r3, #4]
 800537e:	6863      	ldr	r3, [r4, #4]
 8005380:	bf08      	it	eq
 8005382:	6031      	streq	r1, [r6, #0]
 8005384:	5162      	str	r2, [r4, r5]
 8005386:	604b      	str	r3, [r1, #4]
 8005388:	4638      	mov	r0, r7
 800538a:	f104 060b 	add.w	r6, r4, #11
 800538e:	f000 f865 	bl	800545c <__malloc_unlock>
 8005392:	f026 0607 	bic.w	r6, r6, #7
 8005396:	1d23      	adds	r3, r4, #4
 8005398:	1af2      	subs	r2, r6, r3
 800539a:	d0b6      	beq.n	800530a <_malloc_r+0x22>
 800539c:	1b9b      	subs	r3, r3, r6
 800539e:	50a3      	str	r3, [r4, r2]
 80053a0:	e7b3      	b.n	800530a <_malloc_r+0x22>
 80053a2:	6862      	ldr	r2, [r4, #4]
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	bf0c      	ite	eq
 80053a8:	6032      	streq	r2, [r6, #0]
 80053aa:	605a      	strne	r2, [r3, #4]
 80053ac:	e7ec      	b.n	8005388 <_malloc_r+0xa0>
 80053ae:	4623      	mov	r3, r4
 80053b0:	6864      	ldr	r4, [r4, #4]
 80053b2:	e7b2      	b.n	800531a <_malloc_r+0x32>
 80053b4:	4634      	mov	r4, r6
 80053b6:	6876      	ldr	r6, [r6, #4]
 80053b8:	e7b9      	b.n	800532e <_malloc_r+0x46>
 80053ba:	230c      	movs	r3, #12
 80053bc:	603b      	str	r3, [r7, #0]
 80053be:	4638      	mov	r0, r7
 80053c0:	f000 f84c 	bl	800545c <__malloc_unlock>
 80053c4:	e7a1      	b.n	800530a <_malloc_r+0x22>
 80053c6:	6025      	str	r5, [r4, #0]
 80053c8:	e7de      	b.n	8005388 <_malloc_r+0xa0>
 80053ca:	bf00      	nop
 80053cc:	200040fc 	.word	0x200040fc

080053d0 <_realloc_r>:
 80053d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d4:	4680      	mov	r8, r0
 80053d6:	4614      	mov	r4, r2
 80053d8:	460e      	mov	r6, r1
 80053da:	b921      	cbnz	r1, 80053e6 <_realloc_r+0x16>
 80053dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053e0:	4611      	mov	r1, r2
 80053e2:	f7ff bf81 	b.w	80052e8 <_malloc_r>
 80053e6:	b92a      	cbnz	r2, 80053f4 <_realloc_r+0x24>
 80053e8:	f7ff ff12 	bl	8005210 <_free_r>
 80053ec:	4625      	mov	r5, r4
 80053ee:	4628      	mov	r0, r5
 80053f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f4:	f000 f838 	bl	8005468 <_malloc_usable_size_r>
 80053f8:	4284      	cmp	r4, r0
 80053fa:	4607      	mov	r7, r0
 80053fc:	d802      	bhi.n	8005404 <_realloc_r+0x34>
 80053fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005402:	d812      	bhi.n	800542a <_realloc_r+0x5a>
 8005404:	4621      	mov	r1, r4
 8005406:	4640      	mov	r0, r8
 8005408:	f7ff ff6e 	bl	80052e8 <_malloc_r>
 800540c:	4605      	mov	r5, r0
 800540e:	2800      	cmp	r0, #0
 8005410:	d0ed      	beq.n	80053ee <_realloc_r+0x1e>
 8005412:	42bc      	cmp	r4, r7
 8005414:	4622      	mov	r2, r4
 8005416:	4631      	mov	r1, r6
 8005418:	bf28      	it	cs
 800541a:	463a      	movcs	r2, r7
 800541c:	f7ff fbb8 	bl	8004b90 <memcpy>
 8005420:	4631      	mov	r1, r6
 8005422:	4640      	mov	r0, r8
 8005424:	f7ff fef4 	bl	8005210 <_free_r>
 8005428:	e7e1      	b.n	80053ee <_realloc_r+0x1e>
 800542a:	4635      	mov	r5, r6
 800542c:	e7df      	b.n	80053ee <_realloc_r+0x1e>
	...

08005430 <_sbrk_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4d06      	ldr	r5, [pc, #24]	; (800544c <_sbrk_r+0x1c>)
 8005434:	2300      	movs	r3, #0
 8005436:	4604      	mov	r4, r0
 8005438:	4608      	mov	r0, r1
 800543a:	602b      	str	r3, [r5, #0]
 800543c:	f7fb fcc0 	bl	8000dc0 <_sbrk>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d102      	bne.n	800544a <_sbrk_r+0x1a>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	b103      	cbz	r3, 800544a <_sbrk_r+0x1a>
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	20004104 	.word	0x20004104

08005450 <__malloc_lock>:
 8005450:	4801      	ldr	r0, [pc, #4]	; (8005458 <__malloc_lock+0x8>)
 8005452:	f000 b811 	b.w	8005478 <__retarget_lock_acquire_recursive>
 8005456:	bf00      	nop
 8005458:	20004108 	.word	0x20004108

0800545c <__malloc_unlock>:
 800545c:	4801      	ldr	r0, [pc, #4]	; (8005464 <__malloc_unlock+0x8>)
 800545e:	f000 b80c 	b.w	800547a <__retarget_lock_release_recursive>
 8005462:	bf00      	nop
 8005464:	20004108 	.word	0x20004108

08005468 <_malloc_usable_size_r>:
 8005468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800546c:	1f18      	subs	r0, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	bfbc      	itt	lt
 8005472:	580b      	ldrlt	r3, [r1, r0]
 8005474:	18c0      	addlt	r0, r0, r3
 8005476:	4770      	bx	lr

08005478 <__retarget_lock_acquire_recursive>:
 8005478:	4770      	bx	lr

0800547a <__retarget_lock_release_recursive>:
 800547a:	4770      	bx	lr

0800547c <_init>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	bf00      	nop
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr

08005488 <_fini>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr
