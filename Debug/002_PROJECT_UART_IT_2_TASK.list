
002_PROJECT_UART_IT_2_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005144  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005398  08005398  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a0  080053a0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080053a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          0000408c  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004114  20004114  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ba0  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac9  00000000  00000000  00032c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00035728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00036828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ce6  00000000  00000000  00037810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013086  00000000  00000000  0005a4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3bcd  00000000  00000000  0006d57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141149  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a84  00000000  00000000  0014119c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052bc 	.word	0x080052bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080052bc 	.word	0x080052bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200000a4 	.word	0x200000a4
 80005a4:	200000f8 	.word	0x200000f8

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b08e      	sub	sp, #56	; 0x38
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fb97 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f833 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8c5 	bl	8000744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f899 	bl	80006f0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <main+0x64>)
 80005c0:	f107 041c 	add.w	r4, r7, #28
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fe7e 	bl	80032da <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <main+0x68>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0x6c>)
 80005e6:	463c      	mov	r4, r7
 80005e8:	461d      	mov	r5, r3
 80005ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fe6d 	bl	80032da <osThreadCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <main+0x70>)
 8000604:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000606:	f002 fe61 	bl	80032cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	e7fe      	b.n	800060a <main+0x62>
 800060c:	080052e4 	.word	0x080052e4
 8000610:	2000033c 	.word	0x2000033c
 8000614:	08005300 	.word	0x08005300
 8000618:	20000340 	.word	0x20000340

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 f9de 	bl	80049ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fec7 	bl	8001434 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f986 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f928 	bl	8001924 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f96f 	bl	80009bc <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f001 fdfc 	bl	8002324 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f943 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200002f8 	.word	0x200002f8
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_GPIO_Init+0x9c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0x9c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x9c>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x9c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0xa0>)
 80007b6:	f000 fe09 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0xa0>)
 80007d4:	f000 fc5e 	bl	8001094 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020c00 	.word	0x40020c00

080007e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		// USART Interrupt Receive Function
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_buffer, 20);
 80007f0:	2214      	movs	r2, #20
 80007f2:	4904      	ldr	r1, [pc, #16]	; (8000804 <HAL_UART_RxCpltCallback+0x1c>)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <HAL_UART_RxCpltCallback+0x20>)
 80007f6:	f001 fe27 	bl	8002448 <HAL_UART_Receive_IT>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000
 8000808:	200002f8 	.word	0x200002f8

0800080c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)		// LEDON - LEDOFF TASK.
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task01 Work ! \r\n"));		// TASK01 USART Transmit and Cooperative Multitasking test.
 8000814:	492b      	ldr	r1, [pc, #172]	; (80008c4 <StartTask01+0xb8>)
 8000816:	482c      	ldr	r0, [pc, #176]	; (80008c8 <StartTask01+0xbc>)
 8000818:	f004 f8f0 	bl	80049fc <siprintf>
 800081c:	4603      	mov	r3, r0
 800081e:	b29b      	uxth	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	4929      	ldr	r1, [pc, #164]	; (80008c8 <StartTask01+0xbc>)
 8000824:	4829      	ldr	r0, [pc, #164]	; (80008cc <StartTask01+0xc0>)
 8000826:	f001 fdca 	bl	80023be <HAL_UART_Transmit_IT>
	  osDelay(1000);
 800082a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082e:	f002 fda0 	bl	8003372 <osDelay>

	  HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_buffer, 20);
 8000832:	2214      	movs	r2, #20
 8000834:	4926      	ldr	r1, [pc, #152]	; (80008d0 <StartTask01+0xc4>)
 8000836:	4825      	ldr	r0, [pc, #148]	; (80008cc <StartTask01+0xc0>)
 8000838:	f001 fe06 	bl	8002448 <HAL_UART_Receive_IT>

	  if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a' && rx_buffer[3] == 'r' && rx_buffer[4] == 't')
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <StartTask01+0xc4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b73      	cmp	r3, #115	; 0x73
 8000842:	d117      	bne.n	8000874 <StartTask01+0x68>
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <StartTask01+0xc4>)
 8000846:	785b      	ldrb	r3, [r3, #1]
 8000848:	2b74      	cmp	r3, #116	; 0x74
 800084a:	d113      	bne.n	8000874 <StartTask01+0x68>
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <StartTask01+0xc4>)
 800084e:	789b      	ldrb	r3, [r3, #2]
 8000850:	2b61      	cmp	r3, #97	; 0x61
 8000852:	d10f      	bne.n	8000874 <StartTask01+0x68>
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <StartTask01+0xc4>)
 8000856:	78db      	ldrb	r3, [r3, #3]
 8000858:	2b72      	cmp	r3, #114	; 0x72
 800085a:	d10b      	bne.n	8000874 <StartTask01+0x68>
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <StartTask01+0xc4>)
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	2b74      	cmp	r3, #116	; 0x74
 8000862:	d107      	bne.n	8000874 <StartTask01+0x68>
	  {
		  vTaskResume(Task02Handle);
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <StartTask01+0xc8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f003 f8d5 	bl	8003a18 <vTaskResume>
		  rx_stop = 0;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <StartTask01+0xcc>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
	  }

	  if (rx_stop == 0)
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <StartTask01+0xcc>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d114      	bne.n	80008a6 <StartTask01+0x9a>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000882:	4816      	ldr	r0, [pc, #88]	; (80008dc <StartTask01+0xd0>)
 8000884:	f000 fda2 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8000888:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800088c:	f000 fa6a 	bl	8000d64 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <StartTask01+0xd0>)
 8000898:	f000 fd98 	bl	80013cc <HAL_GPIO_WritePin>
		  HAL_Delay(700);
 800089c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80008a0:	f000 fa60 	bl	8000d64 <HAL_Delay>
 80008a4:	e7b6      	b.n	8000814 <StartTask01+0x8>
	  }

	  else if (rx_stop == 1)
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <StartTask01+0xcc>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d1b2      	bne.n	8000814 <StartTask01+0x8>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);		// Led state control with "stop" string
 80008ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <StartTask01+0xd0>)
 80008b4:	f000 fda3 	bl	80013fe <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 80008b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008bc:	f000 fa52 	bl	8000d64 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task01 Work ! \r\n"));		// TASK01 USART Transmit and Cooperative Multitasking test.
 80008c0:	e7a8      	b.n	8000814 <StartTask01+0x8>
 80008c2:	bf00      	nop
 80008c4:	0800531c 	.word	0x0800531c
 80008c8:	20000344 	.word	0x20000344
 80008cc:	200002f8 	.word	0x200002f8
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000340 	.word	0x20000340
 80008d8:	20000358 	.word	0x20000358
 80008dc:	40020c00 	.word	0x40020c00

080008e0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)		// ECHO TASK.
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task02 Work ! \r\n"));		// TASK02 USART Transmit and Cooperative Multitasking test.
 80008e8:	4923      	ldr	r1, [pc, #140]	; (8000978 <StartTask02+0x98>)
 80008ea:	4824      	ldr	r0, [pc, #144]	; (800097c <StartTask02+0x9c>)
 80008ec:	f004 f886 	bl	80049fc <siprintf>
 80008f0:	4603      	mov	r3, r0
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	4921      	ldr	r1, [pc, #132]	; (800097c <StartTask02+0x9c>)
 80008f8:	4821      	ldr	r0, [pc, #132]	; (8000980 <StartTask02+0xa0>)
 80008fa:	f001 fd60 	bl	80023be <HAL_UART_Transmit_IT>
	  osDelay(1000);
 80008fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000902:	f002 fd36 	bl	8003372 <osDelay>

	  HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_buffer, 20);
 8000906:	2214      	movs	r2, #20
 8000908:	491e      	ldr	r1, [pc, #120]	; (8000984 <StartTask02+0xa4>)
 800090a:	481d      	ldr	r0, [pc, #116]	; (8000980 <StartTask02+0xa0>)
 800090c:	f001 fd9c 	bl	8002448 <HAL_UART_Receive_IT>

	  if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'o' && rx_buffer[3] == 'p')		// Echo task will be suspend with "stop" string.
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <StartTask02+0xa4>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b73      	cmp	r3, #115	; 0x73
 8000916:	d125      	bne.n	8000964 <StartTask02+0x84>
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <StartTask02+0xa4>)
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	2b74      	cmp	r3, #116	; 0x74
 800091e:	d121      	bne.n	8000964 <StartTask02+0x84>
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <StartTask02+0xa4>)
 8000922:	789b      	ldrb	r3, [r3, #2]
 8000924:	2b6f      	cmp	r3, #111	; 0x6f
 8000926:	d11d      	bne.n	8000964 <StartTask02+0x84>
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <StartTask02+0xa4>)
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	2b70      	cmp	r3, #112	; 0x70
 800092e:	d119      	bne.n	8000964 <StartTask02+0x84>
	  {
		  rx_stop = 1;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <StartTask02+0xa8>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]

		  for (i; i<20; i++)
 8000936:	e009      	b.n	800094c <StartTask02+0x6c>
		  {
			  rx_buffer[i] = '\0';
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <StartTask02+0xac>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <StartTask02+0xa4>)
 800093e:	2100      	movs	r1, #0
 8000940:	54d1      	strb	r1, [r2, r3]
		  for (i; i<20; i++)
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <StartTask02+0xac>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a10      	ldr	r2, [pc, #64]	; (800098c <StartTask02+0xac>)
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <StartTask02+0xac>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b13      	cmp	r3, #19
 8000952:	ddf1      	ble.n	8000938 <StartTask02+0x58>
		  }
		  i=0;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <StartTask02+0xac>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]

		  vTaskSuspend(Task02Handle);
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <StartTask02+0xb0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f002 ff96 	bl	8003890 <vTaskSuspend>
	  }

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <StartTask02+0xb4>)
 800096a:	f000 fd48 	bl	80013fe <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000972:	f000 f9f7 	bl	8000d64 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task02 Work ! \r\n"));		// TASK02 USART Transmit and Cooperative Multitasking test.
 8000976:	e7b7      	b.n	80008e8 <StartTask02+0x8>
 8000978:	08005330 	.word	0x08005330
 800097c:	20000344 	.word	0x20000344
 8000980:	200002f8 	.word	0x200002f8
 8000984:	20000000 	.word	0x20000000
 8000988:	20000358 	.word	0x20000358
 800098c:	2000035c 	.word	0x2000035c
 8000990:	20000340 	.word	0x20000340
 8000994:	40020c00 	.word	0x40020c00

08000998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d101      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009aa:	f000 f9bb 	bl	8000d24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40010000 	.word	0x40010000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_MspInit+0x54>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <HAL_MspInit+0x54>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x54>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_MspInit+0x54>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_MspInit+0x54>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_MspInit+0x54>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	210f      	movs	r1, #15
 8000a0a:	f06f 0001 	mvn.w	r0, #1
 8000a0e:	f000 fa85 	bl	8000f1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_UART_MspInit+0x94>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d133      	bne.n	8000aaa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_UART_MspInit+0x98>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <HAL_UART_MspInit+0x98>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_UART_MspInit+0x98>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_UART_MspInit+0x98>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <HAL_UART_MspInit+0x98>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_UART_MspInit+0x98>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <HAL_UART_MspInit+0x9c>)
 8000a96:	f000 fafd 	bl	8001094 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2105      	movs	r1, #5
 8000a9e:	2026      	movs	r0, #38	; 0x26
 8000aa0:	f000 fa3c 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa4:	2026      	movs	r0, #38	; 0x26
 8000aa6:	f000 fa55 	bl	8000f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40004400 	.word	0x40004400
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000

08000ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_InitTick+0xd4>)
 8000ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad8:	4a2e      	ldr	r2, [pc, #184]	; (8000b94 <HAL_InitTick+0xd4>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_InitTick+0xd4>)
 8000ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aec:	f107 020c 	add.w	r2, r7, #12
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 f934 	bl	8001d64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000afc:	f001 f91e 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8000b00:	4603      	mov	r3, r0
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b08:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <HAL_InitTick+0xd8>)
 8000b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0e:	0c9b      	lsrs	r3, r3, #18
 8000b10:	3b01      	subs	r3, #1
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <HAL_InitTick+0xdc>)
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <HAL_InitTick+0xe0>)
 8000b18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <HAL_InitTick+0xdc>)
 8000b1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_InitTick+0xdc>)
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_InitTick+0xdc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_InitTick+0xdc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_InitTick+0xdc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <HAL_InitTick+0xdc>)
 8000b3c:	f001 f944 	bl	8001dc8 <HAL_TIM_Base_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d11b      	bne.n	8000b86 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <HAL_InitTick+0xdc>)
 8000b50:	f001 f994 	bl	8001e7c <HAL_TIM_Base_Start_IT>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d111      	bne.n	8000b86 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b62:	2019      	movs	r0, #25
 8000b64:	f000 f9f6 	bl	8000f54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	d808      	bhi.n	8000b80 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 f9d2 	bl	8000f1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_InitTick+0xe4>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	e002      	b.n	8000b86 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3730      	adds	r7, #48	; 0x30
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	431bde83 	.word	0x431bde83
 8000b9c:	20000360 	.word	0x20000360
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	20000018 	.word	0x20000018

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bda:	f001 f9bf 	bl	8001f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000360 	.word	0x20000360

08000be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <USART2_IRQHandler+0x10>)
 8000bee:	f001 fc5b 	bl	80024a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200002f8 	.word	0x200002f8

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f003 fea6 	bl	800497c <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20020000 	.word	0x20020000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	200003a8 	.word	0x200003a8
 8000c64:	20004118 	.word	0x20004118

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ffd7 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f003 fe65 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fc73 	bl	80005a8 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000cd0:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 8000cd4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000cd8:	20004114 	.word	0x20004114

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_Init+0x40>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_Init+0x40>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_Init+0x40>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f8fc 	bl	8000f06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f7ff fed6 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fe58 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000001c 	.word	0x2000001c
 8000d48:	200003ac 	.word	0x200003ac

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200003ac 	.word	0x200003ac

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000001c 	.word	0x2000001c

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4c 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2e:	f7ff ff61 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	6978      	ldr	r0, [r7, #20]
 8000f3a:	f7ff ffb1 	bl	8000ea0 <NVIC_EncodePriority>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff80 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff54 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f7e:	f7ff fee5 	bl	8000d4c <HAL_GetTick>
 8000f82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d008      	beq.n	8000fa2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e052      	b.n	8001048 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0216 	bic.w	r2, r2, #22
 8000fb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d103      	bne.n	8000fd2 <HAL_DMA_Abort+0x62>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0208 	bic.w	r2, r2, #8
 8000fe0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0201 	bic.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff2:	e013      	b.n	800101c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ff4:	f7ff feaa 	bl	8000d4c <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d90c      	bls.n	800101c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2220      	movs	r2, #32
 8001006:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2203      	movs	r2, #3
 800100c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e015      	b.n	8001048 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1e4      	bne.n	8000ff4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800102e:	223f      	movs	r2, #63	; 0x3f
 8001030:	409a      	lsls	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d004      	beq.n	800106e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00c      	b.n	8001088 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2205      	movs	r2, #5
 8001072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e16b      	b.n	8001388 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 815a 	bne.w	8001382 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	69b9      	ldr	r1, [r7, #24]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80b4 	beq.w	8001382 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b60      	ldr	r3, [pc, #384]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a5f      	ldr	r2, [pc, #380]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b5d      	ldr	r3, [pc, #372]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001236:	4a5b      	ldr	r2, [pc, #364]	; (80013a4 <HAL_GPIO_Init+0x310>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a52      	ldr	r2, [pc, #328]	; (80013a8 <HAL_GPIO_Init+0x314>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d02b      	beq.n	80012ba <HAL_GPIO_Init+0x226>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a51      	ldr	r2, [pc, #324]	; (80013ac <HAL_GPIO_Init+0x318>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d025      	beq.n	80012b6 <HAL_GPIO_Init+0x222>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a50      	ldr	r2, [pc, #320]	; (80013b0 <HAL_GPIO_Init+0x31c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01f      	beq.n	80012b2 <HAL_GPIO_Init+0x21e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <HAL_GPIO_Init+0x320>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x21a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <HAL_GPIO_Init+0x324>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x216>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4d      	ldr	r2, [pc, #308]	; (80013bc <HAL_GPIO_Init+0x328>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x212>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <HAL_GPIO_Init+0x32c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x20e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_GPIO_Init+0x330>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x20a>
 800129a:	2307      	movs	r3, #7
 800129c:	e00e      	b.n	80012bc <HAL_GPIO_Init+0x228>
 800129e:	2308      	movs	r3, #8
 80012a0:	e00c      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012a2:	2306      	movs	r3, #6
 80012a4:	e00a      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012a6:	2305      	movs	r3, #5
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x310>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <HAL_GPIO_Init+0x334>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001352:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f ae90 	bls.w	80010b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40021c00 	.word	0x40021c00
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001410:	887a      	ldrh	r2, [r7, #2]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	041a      	lsls	r2, r3, #16
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43d9      	mvns	r1, r3
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	400b      	ands	r3, r1
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e267      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d075      	beq.n	800153e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d00c      	beq.n	8001478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b85      	ldr	r3, [pc, #532]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d112      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b82      	ldr	r3, [pc, #520]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001476:	d10b      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d05b      	beq.n	800153c <HAL_RCC_OscConfig+0x108>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d157      	bne.n	800153c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e242      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	d106      	bne.n	80014a8 <HAL_RCC_OscConfig+0x74>
 800149a:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a75      	ldr	r2, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6f      	ldr	r2, [pc, #444]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6c      	ldr	r2, [pc, #432]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014cc:	4b69      	ldr	r3, [pc, #420]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a68      	ldr	r2, [pc, #416]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b66      	ldr	r3, [pc, #408]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a65      	ldr	r2, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc2e 	bl	8000d4c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fc2a 	bl	8000d4c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e207      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xc0>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fc1a 	bl	8000d4c <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc16 	bl	8000d4c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1f3      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0xe8>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154a:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b44      	ldr	r3, [pc, #272]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1c7      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4937      	ldr	r1, [pc, #220]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_RCC_OscConfig+0x244>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fbcf 	bl	8000d4c <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fbcb 	bl	8000d4c <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1a8      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4925      	ldr	r1, [pc, #148]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_OscConfig+0x244>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fbae 	bl	8000d4c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fbaa 	bl	8000d4c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e187      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d036      	beq.n	800168c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d016      	beq.n	8001654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_RCC_OscConfig+0x248>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fb8e 	bl	8000d4c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fb8a 	bl	8000d4c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e167      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x200>
 8001652:	e01b      	b.n	800168c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_OscConfig+0x248>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fb77 	bl	8000d4c <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	e00e      	b.n	8001680 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff fb73 	bl	8000d4c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d907      	bls.n	8001680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e150      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 8001674:	40023800 	.word	0x40023800
 8001678:	42470000 	.word	0x42470000
 800167c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ea      	bne.n	8001662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8097 	beq.w	80017c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10f      	bne.n	80016ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a7c      	ldr	r2, [pc, #496]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	4b77      	ldr	r3, [pc, #476]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d6:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a73      	ldr	r2, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fb33 	bl	8000d4c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7ff fb2f 	bl	8000d4c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e10c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x2ea>
 8001710:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a63      	ldr	r2, [pc, #396]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x30c>
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a5b      	ldr	r2, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a57      	ldr	r2, [pc, #348]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0304 	bic.w	r3, r3, #4
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d015      	beq.n	800178c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff faf4 	bl	8000d4c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff faf0 	bl	8000d4c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0cb      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0ee      	beq.n	8001768 <HAL_RCC_OscConfig+0x334>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fade 	bl	8000d4c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fada 	bl	8000d4c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0b5      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ee      	bne.n	8001794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a38      	ldr	r2, [pc, #224]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a1 	beq.w	8001914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d05c      	beq.n	8001898 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d141      	bne.n	800186a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff faae 	bl	8000d4c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff faaa 	bl	8000d4c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e087      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fa83 	bl	8000d4c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff fa7f 	bl	8000d4c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e05c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x416>
 8001868:	e054      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fa6c 	bl	8000d4c <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fa68 	bl	8000d4c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e045      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e038      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x4ec>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d028      	beq.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d121      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11a      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	3b01      	subs	r3, #1
 80018fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0cc      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d90c      	bls.n	8001960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b65      	ldr	r3, [pc, #404]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b8      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d020      	beq.n	80019ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001978:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a58      	ldr	r2, [pc, #352]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800199a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	494d      	ldr	r1, [pc, #308]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d044      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d119      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e07f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e067      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4934      	ldr	r1, [pc, #208]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff f99a 	bl	8000d4c <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff f996 	bl	8000d4c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e04f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20c      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e032      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4916      	ldr	r1, [pc, #88]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aaa:	f000 f821 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	490a      	ldr	r1, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	5ccb      	ldrb	r3, [r1, r3]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fff8 	bl	8000ac0 <HAL_InitTick>

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023c00 	.word	0x40023c00
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	0800534c 	.word	0x0800534c
 8001ae8:	20000014 	.word	0x20000014
 8001aec:	20000018 	.word	0x20000018

08001af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b094      	sub	sp, #80	; 0x50
 8001af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
 8001afc:	2300      	movs	r3, #0
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b00:	2300      	movs	r3, #0
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b08:	4b79      	ldr	r3, [pc, #484]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d00d      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x40>
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	f200 80e1 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b22:	e0db      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b28:	e0db      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2a:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2e:	e0d8      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b62:	4622      	mov	r2, r4
 8001b64:	462b      	mov	r3, r5
 8001b66:	f04f 0000 	mov.w	r0, #0
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	0159      	lsls	r1, r3, #5
 8001b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b74:	0150      	lsls	r0, r2, #5
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	1a51      	subs	r1, r2, r1
 8001b7e:	6139      	str	r1, [r7, #16]
 8001b80:	4629      	mov	r1, r5
 8001b82:	eb63 0301 	sbc.w	r3, r3, r1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b94:	4659      	mov	r1, fp
 8001b96:	018b      	lsls	r3, r1, #6
 8001b98:	4651      	mov	r1, sl
 8001b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	018a      	lsls	r2, r1, #6
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba8:	4659      	mov	r1, fp
 8001baa:	eb63 0901 	sbc.w	r9, r3, r1
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc2:	4690      	mov	r8, r2
 8001bc4:	4699      	mov	r9, r3
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	eb18 0303 	adds.w	r3, r8, r3
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	462b      	mov	r3, r5
 8001bd0:	eb49 0303 	adc.w	r3, r9, r3
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001be2:	4629      	mov	r1, r5
 8001be4:	024b      	lsls	r3, r1, #9
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bec:	4621      	mov	r1, r4
 8001bee:	024a      	lsls	r2, r1, #9
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c00:	f7fe fb36 	bl	8000270 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c0c:	e058      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	2200      	movs	r2, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	4611      	mov	r1, r2
 8001c1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
 8001c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c28:	4642      	mov	r2, r8
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	f04f 0000 	mov.w	r0, #0
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	0159      	lsls	r1, r3, #5
 8001c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3a:	0150      	lsls	r0, r2, #5
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4641      	mov	r1, r8
 8001c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c46:	4649      	mov	r1, r9
 8001c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c60:	ebb2 040a 	subs.w	r4, r2, sl
 8001c64:	eb63 050b 	sbc.w	r5, r3, fp
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	00eb      	lsls	r3, r5, #3
 8001c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c76:	00e2      	lsls	r2, r4, #3
 8001c78:	4614      	mov	r4, r2
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	18e3      	adds	r3, r4, r3
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	464b      	mov	r3, r9
 8001c84:	eb45 0303 	adc.w	r3, r5, r3
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c96:	4629      	mov	r1, r5
 8001c98:	028b      	lsls	r3, r1, #10
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	028a      	lsls	r2, r1, #10
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001caa:	2200      	movs	r2, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	61fa      	str	r2, [r7, #28]
 8001cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb4:	f7fe fadc 	bl	8000270 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3750      	adds	r7, #80	; 0x50
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000014 	.word	0x20000014

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	0800535c 	.word	0x0800535c

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffdc 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0b5b      	lsrs	r3, r3, #13
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	0800535c 	.word	0x0800535c

08001d64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	220f      	movs	r2, #15
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <HAL_RCC_GetClockConfig+0x60>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0207 	and.w	r2, r3, #7
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e041      	b.n	8001e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f839 	bl	8001e66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f000 f9d8 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d001      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e04e      	b.n	8001f32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d022      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d01d      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d018      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00e      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d009      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d004      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d111      	bne.n	8001f20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d010      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1e:	e007      	b.n	8001f30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40000800 	.word	0x40000800
 8001f4c:	40000c00 	.word	0x40000c00
 8001f50:	40010400 	.word	0x40010400
 8001f54:	40014000 	.word	0x40014000
 8001f58:	40001800 	.word	0x40001800

08001f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0202 	mvn.w	r2, #2
 8001f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8ee 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8e0 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8f1 	bl	8002194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d122      	bne.n	800200c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0204 	mvn.w	r2, #4
 8001fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8c4 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8b6 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f8c7 	bl	8002194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b08      	cmp	r3, #8
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0208 	mvn.w	r2, #8
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2204      	movs	r2, #4
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f89a 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f88c 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f89d 	bl	8002194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b10      	cmp	r3, #16
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b10      	cmp	r3, #16
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0210 	mvn.w	r2, #16
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2208      	movs	r2, #8
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f870 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f862 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f873 	bl	8002194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0201 	mvn.w	r2, #1
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe fc5c 	bl	8000998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b80      	cmp	r3, #128	; 0x80
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d107      	bne.n	800210c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f902 	bl	8002310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b40      	cmp	r3, #64	; 0x40
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f838 	bl	80021a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b20      	cmp	r3, #32
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b20      	cmp	r3, #32
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0220 	mvn.w	r2, #32
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8cc 	bl	80022fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a40      	ldr	r2, [pc, #256]	; (80022d0 <TIM_Base_SetConfig+0x114>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d013      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021da:	d00f      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3d      	ldr	r2, [pc, #244]	; (80022d4 <TIM_Base_SetConfig+0x118>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00b      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3c      	ldr	r2, [pc, #240]	; (80022d8 <TIM_Base_SetConfig+0x11c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <TIM_Base_SetConfig+0x120>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3a      	ldr	r2, [pc, #232]	; (80022e0 <TIM_Base_SetConfig+0x124>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d108      	bne.n	800220e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2f      	ldr	r2, [pc, #188]	; (80022d0 <TIM_Base_SetConfig+0x114>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d02b      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221c:	d027      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <TIM_Base_SetConfig+0x118>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d023      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <TIM_Base_SetConfig+0x11c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01f      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <TIM_Base_SetConfig+0x120>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01b      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <TIM_Base_SetConfig+0x124>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d017      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <TIM_Base_SetConfig+0x128>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <TIM_Base_SetConfig+0x12c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00f      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a26      	ldr	r2, [pc, #152]	; (80022ec <TIM_Base_SetConfig+0x130>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00b      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <TIM_Base_SetConfig+0x134>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <TIM_Base_SetConfig+0x138>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d003      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a23      	ldr	r2, [pc, #140]	; (80022f8 <TIM_Base_SetConfig+0x13c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d108      	bne.n	8002280 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <TIM_Base_SetConfig+0x114>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d003      	beq.n	80022b4 <TIM_Base_SetConfig+0xf8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <TIM_Base_SetConfig+0x124>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d103      	bne.n	80022bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	615a      	str	r2, [r3, #20]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40000800 	.word	0x40000800
 80022dc:	40000c00 	.word	0x40000c00
 80022e0:	40010400 	.word	0x40010400
 80022e4:	40014000 	.word	0x40014000
 80022e8:	40014400 	.word	0x40014400
 80022ec:	40014800 	.word	0x40014800
 80022f0:	40001800 	.word	0x40001800
 80022f4:	40001c00 	.word	0x40001c00
 80022f8:	40002000 	.word	0x40002000

080022fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e03f      	b.n	80023b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fb68 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fd23 	bl	8002db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800237c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800238c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800239c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	4613      	mov	r3, r2
 80023ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d130      	bne.n	800243a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_UART_Transmit_IT+0x26>
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e029      	b.n	800243c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Transmit_IT+0x38>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e022      	b.n	800243c <HAL_UART_Transmit_IT+0x7e>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	88fa      	ldrh	r2, [r7, #6]
 800240e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2221      	movs	r2, #33	; 0x21
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002434:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b20      	cmp	r3, #32
 8002460:	d11d      	bne.n	800249e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_UART_Receive_IT+0x26>
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e016      	b.n	80024a0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_UART_Receive_IT+0x38>
 800247c:	2302      	movs	r3, #2
 800247e:	e00f      	b.n	80024a0 <HAL_UART_Receive_IT+0x58>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	461a      	mov	r2, r3
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fab5 	bl	8002a04 <UART_Start_Receive_IT>
 800249a:	4603      	mov	r3, r0
 800249c:	e000      	b.n	80024a0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800249e:	2302      	movs	r3, #2
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0ba      	sub	sp, #232	; 0xe8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80024e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_UART_IRQHandler+0x66>
 80024fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fb99 	bl	8002c3e <UART_Receive_IT>
      return;
 800250c:	e256      	b.n	80029bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800250e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80de 	beq.w	80026d4 <HAL_UART_IRQHandler+0x22c>
 8002518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002528:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80d1 	beq.w	80026d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_UART_IRQHandler+0xae>
 800253e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_UART_IRQHandler+0xd2>
 8002562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0202 	orr.w	r2, r3, #2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_UART_IRQHandler+0xf6>
 8002586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f043 0204 	orr.w	r2, r3, #4
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d011      	beq.n	80025ce <HAL_UART_IRQHandler+0x126>
 80025aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f043 0208 	orr.w	r2, r3, #8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 81ed 	beq.w	80029b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_UART_IRQHandler+0x14e>
 80025e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fb24 	bl	8002c3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <HAL_UART_IRQHandler+0x17a>
 800261a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04f      	beq.n	80026c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fa2c 	bl	8002a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b40      	cmp	r3, #64	; 0x40
 8002634:	d141      	bne.n	80026ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3314      	adds	r3, #20
 800263c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800264c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3314      	adds	r3, #20
 800265e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800266e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002672:	e841 2300 	strex	r3, r2, [r1]
 8002676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800267a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1d9      	bne.n	8002636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	2b00      	cmp	r3, #0
 8002688:	d013      	beq.n	80026b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	4a7d      	ldr	r2, [pc, #500]	; (8002884 <HAL_UART_IRQHandler+0x3dc>)
 8002690:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fcda 	bl	8001050 <HAL_DMA_Abort_IT>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026ac:	4610      	mov	r0, r2
 80026ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b0:	e00e      	b.n	80026d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f990 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b8:	e00a      	b.n	80026d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f98c 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c0:	e006      	b.n	80026d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f988 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026ce:	e170      	b.n	80029b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	bf00      	nop
    return;
 80026d2:	e16e      	b.n	80029b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	2b01      	cmp	r3, #1
 80026da:	f040 814a 	bne.w	8002972 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8143 	beq.w	8002972 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 813c 	beq.w	8002972 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271a:	2b40      	cmp	r3, #64	; 0x40
 800271c:	f040 80b4 	bne.w	8002888 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800272c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8140 	beq.w	80029b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800273a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800273e:	429a      	cmp	r2, r3
 8002740:	f080 8139 	bcs.w	80029b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800274a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002756:	f000 8088 	beq.w	800286a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	330c      	adds	r3, #12
 8002760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002768:	e853 3f00 	ldrex	r3, [r3]
 800276c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002786:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800278a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002792:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800279e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1d9      	bne.n	800275a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3314      	adds	r3, #20
 80027ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b0:	e853 3f00 	ldrex	r3, [r3]
 80027b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3314      	adds	r3, #20
 80027c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027d6:	e841 2300 	strex	r3, r2, [r1]
 80027da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1e1      	bne.n	80027a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3314      	adds	r3, #20
 80027e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ec:	e853 3f00 	ldrex	r3, [r3]
 80027f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80027f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3314      	adds	r3, #20
 8002802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002806:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002808:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800280c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800280e:	e841 2300 	strex	r3, r2, [r1]
 8002812:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e3      	bne.n	80027e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002832:	e853 3f00 	ldrex	r3, [r3]
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283a:	f023 0310 	bic.w	r3, r3, #16
 800283e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800284c:	65ba      	str	r2, [r7, #88]	; 0x58
 800284e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002854:	e841 2300 	strex	r3, r2, [r1]
 8002858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800285a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e3      	bne.n	8002828 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fb83 	bl	8000f70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002872:	b29b      	uxth	r3, r3
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	b29b      	uxth	r3, r3
 8002878:	4619      	mov	r1, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8b6 	bl	80029ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002880:	e099      	b.n	80029b6 <HAL_UART_IRQHandler+0x50e>
 8002882:	bf00      	nop
 8002884:	08002b47 	.word	0x08002b47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002890:	b29b      	uxth	r3, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 808b 	beq.w	80029ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8086 	beq.w	80029ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	330c      	adds	r3, #12
 80028b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b8:	e853 3f00 	ldrex	r3, [r3]
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028d2:	647a      	str	r2, [r7, #68]	; 0x44
 80028d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e3      	bne.n	80028ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3314      	adds	r3, #20
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	e853 3f00 	ldrex	r3, [r3]
 80028f4:	623b      	str	r3, [r7, #32]
   return(result);
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3314      	adds	r3, #20
 8002906:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800290a:	633a      	str	r2, [r7, #48]	; 0x30
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002912:	e841 2300 	strex	r3, r2, [r1]
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1e3      	bne.n	80028e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	e853 3f00 	ldrex	r3, [r3]
 800293a:	60fb      	str	r3, [r7, #12]
   return(result);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0310 	bic.w	r3, r3, #16
 8002942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
 800294c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002950:	61fa      	str	r2, [r7, #28]
 8002952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	69b9      	ldr	r1, [r7, #24]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	e841 2300 	strex	r3, r2, [r1]
 800295c:	617b      	str	r3, [r7, #20]
   return(result);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e3      	bne.n	800292c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f83e 	bl	80029ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002970:	e023      	b.n	80029ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_UART_IRQHandler+0x4ea>
 800297e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8ef 	bl	8002b6e <UART_Transmit_IT>
    return;
 8002990:	e014      	b.n	80029bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00e      	beq.n	80029bc <HAL_UART_IRQHandler+0x514>
 800299e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f92f 	bl	8002c0e <UART_EndTransmit_IT>
    return;
 80029b0:	e004      	b.n	80029bc <HAL_UART_IRQHandler+0x514>
    return;
 80029b2:	bf00      	nop
 80029b4:	e002      	b.n	80029bc <HAL_UART_IRQHandler+0x514>
      return;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <HAL_UART_IRQHandler+0x514>
      return;
 80029ba:	bf00      	nop
  }
}
 80029bc:	37e8      	adds	r7, #232	; 0xe8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop

080029c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2222      	movs	r2, #34	; 0x22
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0220 	orr.w	r2, r2, #32
 8002a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b095      	sub	sp, #84	; 0x54
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aa8:	643a      	str	r2, [r7, #64]	; 0x40
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ab0:	e841 2300 	strex	r3, r2, [r1]
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e5      	bne.n	8002a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	e853 3f00 	ldrex	r3, [r3]
 8002aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3314      	adds	r3, #20
 8002ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae4:	e841 2300 	strex	r3, r2, [r1]
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e5      	bne.n	8002abc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d119      	bne.n	8002b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f023 0310 	bic.w	r3, r3, #16
 8002b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	330c      	adds	r3, #12
 8002b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b18:	61ba      	str	r2, [r7, #24]
 8002b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	6979      	ldr	r1, [r7, #20]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	613b      	str	r3, [r7, #16]
   return(result);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e5      	bne.n	8002af8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b3a:	bf00      	nop
 8002b3c:	3754      	adds	r7, #84	; 0x54
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f7ff ff39 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b21      	cmp	r3, #33	; 0x21
 8002b80:	d13e      	bne.n	8002c00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d114      	bne.n	8002bb6 <UART_Transmit_IT+0x48>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d110      	bne.n	8002bb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	1c9a      	adds	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	621a      	str	r2, [r3, #32]
 8002bb4:	e008      	b.n	8002bc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6211      	str	r1, [r2, #32]
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10f      	bne.n	8002bfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fec8 	bl	80029c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b08c      	sub	sp, #48	; 0x30
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b22      	cmp	r3, #34	; 0x22
 8002c50:	f040 80ab 	bne.w	8002daa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5c:	d117      	bne.n	8002c8e <UART_Receive_IT+0x50>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d113      	bne.n	8002c8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	1c9a      	adds	r2, r3, #2
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c8c:	e026      	b.n	8002cdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d007      	beq.n	8002cb2 <UART_Receive_IT+0x74>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <UART_Receive_IT+0x82>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e008      	b.n	8002cd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d15a      	bne.n	8002da6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0220 	bic.w	r2, r2, #32
 8002cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d135      	bne.n	8002d9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	613b      	str	r3, [r7, #16]
   return(result);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f023 0310 	bic.w	r3, r3, #16
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d56:	623a      	str	r2, [r7, #32]
 8002d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	69f9      	ldr	r1, [r7, #28]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e5      	bne.n	8002d36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d10a      	bne.n	8002d8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff fe29 	bl	80029ec <HAL_UARTEx_RxEventCallback>
 8002d9a:	e002      	b.n	8002da2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7fd fd23 	bl	80007e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e002      	b.n	8002dac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3730      	adds	r7, #48	; 0x30
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db8:	b0c0      	sub	sp, #256	; 0x100
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	68d9      	ldr	r1, [r3, #12]
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	ea40 0301 	orr.w	r3, r0, r1
 8002ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e0c:	f021 010c 	bic.w	r1, r1, #12
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2e:	6999      	ldr	r1, [r3, #24]
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	ea40 0301 	orr.w	r3, r0, r1
 8002e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b8f      	ldr	r3, [pc, #572]	; (8003080 <UART_SetConfig+0x2cc>)
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d005      	beq.n	8002e54 <UART_SetConfig+0xa0>
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b8d      	ldr	r3, [pc, #564]	; (8003084 <UART_SetConfig+0x2d0>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d104      	bne.n	8002e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e54:	f7fe ff72 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002e58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e5c:	e003      	b.n	8002e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e5e:	f7fe ff59 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002e62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	f040 810c 	bne.w	800308c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e86:	4622      	mov	r2, r4
 8002e88:	462b      	mov	r3, r5
 8002e8a:	1891      	adds	r1, r2, r2
 8002e8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e8e:	415b      	adcs	r3, r3
 8002e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e96:	4621      	mov	r1, r4
 8002e98:	eb12 0801 	adds.w	r8, r2, r1
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	eb43 0901 	adc.w	r9, r3, r1
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb6:	4690      	mov	r8, r2
 8002eb8:	4699      	mov	r9, r3
 8002eba:	4623      	mov	r3, r4
 8002ebc:	eb18 0303 	adds.w	r3, r8, r3
 8002ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	eb49 0303 	adc.w	r3, r9, r3
 8002eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002eda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	18db      	adds	r3, r3, r3
 8002ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ee8:	4613      	mov	r3, r2
 8002eea:	eb42 0303 	adc.w	r3, r2, r3
 8002eee:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ef8:	f7fd f9ba 	bl	8000270 <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4b61      	ldr	r3, [pc, #388]	; (8003088 <UART_SetConfig+0x2d4>)
 8002f02:	fba3 2302 	umull	r2, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	011c      	lsls	r4, r3, #4
 8002f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	1891      	adds	r1, r2, r2
 8002f22:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f24:	415b      	adcs	r3, r3
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f32:	4649      	mov	r1, r9
 8002f34:	eb43 0b01 	adc.w	fp, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f4c:	4692      	mov	sl, r2
 8002f4e:	469b      	mov	fp, r3
 8002f50:	4643      	mov	r3, r8
 8002f52:	eb1a 0303 	adds.w	r3, sl, r3
 8002f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	18db      	adds	r3, r3, r3
 8002f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f7e:	4613      	mov	r3, r2
 8002f80:	eb42 0303 	adc.w	r3, r2, r3
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44
 8002f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f8e:	f7fd f96f 	bl	8000270 <__aeabi_uldivmod>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <UART_SetConfig+0x2d4>)
 8002f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2264      	movs	r2, #100	; 0x64
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	1acb      	subs	r3, r1, r3
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <UART_SetConfig+0x2d4>)
 8002fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fbc:	441c      	add	r4, r3
 8002fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	1891      	adds	r1, r2, r2
 8002fd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fd8:	415b      	adcs	r3, r3
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	1851      	adds	r1, r2, r1
 8002fe4:	6339      	str	r1, [r7, #48]	; 0x30
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	414b      	adcs	r3, r1
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	00cb      	lsls	r3, r1, #3
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003002:	4651      	mov	r1, sl
 8003004:	00ca      	lsls	r2, r1, #3
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	4603      	mov	r3, r0
 800300c:	4642      	mov	r2, r8
 800300e:	189b      	adds	r3, r3, r2
 8003010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003014:	464b      	mov	r3, r9
 8003016:	460a      	mov	r2, r1
 8003018:	eb42 0303 	adc.w	r3, r2, r3
 800301c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800302c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003034:	460b      	mov	r3, r1
 8003036:	18db      	adds	r3, r3, r3
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
 800303a:	4613      	mov	r3, r2
 800303c:	eb42 0303 	adc.w	r3, r2, r3
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800304a:	f7fd f911 	bl	8000270 <__aeabi_uldivmod>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <UART_SetConfig+0x2d4>)
 8003054:	fba3 1302 	umull	r1, r3, r3, r2
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	2164      	movs	r1, #100	; 0x64
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	3332      	adds	r3, #50	; 0x32
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <UART_SetConfig+0x2d4>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	f003 0207 	and.w	r2, r3, #7
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4422      	add	r2, r4
 800307a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800307c:	e105      	b.n	800328a <UART_SetConfig+0x4d6>
 800307e:	bf00      	nop
 8003080:	40011000 	.word	0x40011000
 8003084:	40011400 	.word	0x40011400
 8003088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800308c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003090:	2200      	movs	r2, #0
 8003092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003096:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800309a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800309e:	4642      	mov	r2, r8
 80030a0:	464b      	mov	r3, r9
 80030a2:	1891      	adds	r1, r2, r2
 80030a4:	6239      	str	r1, [r7, #32]
 80030a6:	415b      	adcs	r3, r3
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
 80030aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ae:	4641      	mov	r1, r8
 80030b0:	1854      	adds	r4, r2, r1
 80030b2:	4649      	mov	r1, r9
 80030b4:	eb43 0501 	adc.w	r5, r3, r1
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	00eb      	lsls	r3, r5, #3
 80030c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030c6:	00e2      	lsls	r2, r4, #3
 80030c8:	4614      	mov	r4, r2
 80030ca:	461d      	mov	r5, r3
 80030cc:	4643      	mov	r3, r8
 80030ce:	18e3      	adds	r3, r4, r3
 80030d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030d4:	464b      	mov	r3, r9
 80030d6:	eb45 0303 	adc.w	r3, r5, r3
 80030da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030fa:	4629      	mov	r1, r5
 80030fc:	008b      	lsls	r3, r1, #2
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003104:	4621      	mov	r1, r4
 8003106:	008a      	lsls	r2, r1, #2
 8003108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800310c:	f7fd f8b0 	bl	8000270 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4b60      	ldr	r3, [pc, #384]	; (8003298 <UART_SetConfig+0x4e4>)
 8003116:	fba3 2302 	umull	r2, r3, r3, r2
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	011c      	lsls	r4, r3, #4
 800311e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003128:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800312c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003130:	4642      	mov	r2, r8
 8003132:	464b      	mov	r3, r9
 8003134:	1891      	adds	r1, r2, r2
 8003136:	61b9      	str	r1, [r7, #24]
 8003138:	415b      	adcs	r3, r3
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003140:	4641      	mov	r1, r8
 8003142:	1851      	adds	r1, r2, r1
 8003144:	6139      	str	r1, [r7, #16]
 8003146:	4649      	mov	r1, r9
 8003148:	414b      	adcs	r3, r1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003158:	4659      	mov	r1, fp
 800315a:	00cb      	lsls	r3, r1, #3
 800315c:	4651      	mov	r1, sl
 800315e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003162:	4651      	mov	r1, sl
 8003164:	00ca      	lsls	r2, r1, #3
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	4603      	mov	r3, r0
 800316c:	4642      	mov	r2, r8
 800316e:	189b      	adds	r3, r3, r2
 8003170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003174:	464b      	mov	r3, r9
 8003176:	460a      	mov	r2, r1
 8003178:	eb42 0303 	adc.w	r3, r2, r3
 800317c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	67bb      	str	r3, [r7, #120]	; 0x78
 800318a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003198:	4649      	mov	r1, r9
 800319a:	008b      	lsls	r3, r1, #2
 800319c:	4641      	mov	r1, r8
 800319e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031a2:	4641      	mov	r1, r8
 80031a4:	008a      	lsls	r2, r1, #2
 80031a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031aa:	f7fd f861 	bl	8000270 <__aeabi_uldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <UART_SetConfig+0x4e4>)
 80031b4:	fba3 1302 	umull	r1, r3, r3, r2
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	2164      	movs	r1, #100	; 0x64
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	3332      	adds	r3, #50	; 0x32
 80031c6:	4a34      	ldr	r2, [pc, #208]	; (8003298 <UART_SetConfig+0x4e4>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d2:	441c      	add	r4, r3
 80031d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d8:	2200      	movs	r2, #0
 80031da:	673b      	str	r3, [r7, #112]	; 0x70
 80031dc:	677a      	str	r2, [r7, #116]	; 0x74
 80031de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031e2:	4642      	mov	r2, r8
 80031e4:	464b      	mov	r3, r9
 80031e6:	1891      	adds	r1, r2, r2
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	415b      	adcs	r3, r3
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031f2:	4641      	mov	r1, r8
 80031f4:	1851      	adds	r1, r2, r1
 80031f6:	6039      	str	r1, [r7, #0]
 80031f8:	4649      	mov	r1, r9
 80031fa:	414b      	adcs	r3, r1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800320a:	4659      	mov	r1, fp
 800320c:	00cb      	lsls	r3, r1, #3
 800320e:	4651      	mov	r1, sl
 8003210:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003214:	4651      	mov	r1, sl
 8003216:	00ca      	lsls	r2, r1, #3
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	4603      	mov	r3, r0
 800321e:	4642      	mov	r2, r8
 8003220:	189b      	adds	r3, r3, r2
 8003222:	66bb      	str	r3, [r7, #104]	; 0x68
 8003224:	464b      	mov	r3, r9
 8003226:	460a      	mov	r2, r1
 8003228:	eb42 0303 	adc.w	r3, r2, r3
 800322c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	663b      	str	r3, [r7, #96]	; 0x60
 8003238:	667a      	str	r2, [r7, #100]	; 0x64
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003246:	4649      	mov	r1, r9
 8003248:	008b      	lsls	r3, r1, #2
 800324a:	4641      	mov	r1, r8
 800324c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003250:	4641      	mov	r1, r8
 8003252:	008a      	lsls	r2, r1, #2
 8003254:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003258:	f7fd f80a 	bl	8000270 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <UART_SetConfig+0x4e4>)
 8003262:	fba3 1302 	umull	r1, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2164      	movs	r1, #100	; 0x64
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	; 0x32
 8003274:	4a08      	ldr	r2, [pc, #32]	; (8003298 <UART_SetConfig+0x4e4>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4422      	add	r2, r4
 8003288:	609a      	str	r2, [r3, #8]
}
 800328a:	bf00      	nop
 800328c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003290:	46bd      	mov	sp, r7
 8003292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003296:	bf00      	nop
 8003298:	51eb851f 	.word	0x51eb851f

0800329c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ae:	2b84      	cmp	r3, #132	; 0x84
 80032b0:	d005      	beq.n	80032be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	3303      	adds	r3, #3
 80032bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032d0:	f000 fc00 	bl	8003ad4 <vTaskStartScheduler>
  
  return osOK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}

080032da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032dc:	b089      	sub	sp, #36	; 0x24
 80032de:	af04      	add	r7, sp, #16
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d020      	beq.n	800332e <osThreadCreate+0x54>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01c      	beq.n	800332e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685c      	ldr	r4, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681d      	ldr	r5, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691e      	ldr	r6, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ffc8 	bl	800329c <makeFreeRtosPriority>
 800330c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003316:	9202      	str	r2, [sp, #8]
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	9100      	str	r1, [sp, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4632      	mov	r2, r6
 8003320:	4629      	mov	r1, r5
 8003322:	4620      	mov	r0, r4
 8003324:	f000 f8ed 	bl	8003502 <xTaskCreateStatic>
 8003328:	4603      	mov	r3, r0
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e01c      	b.n	8003368 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685c      	ldr	r4, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800333a:	b29e      	uxth	r6, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ffaa 	bl	800329c <makeFreeRtosPriority>
 8003348:	4602      	mov	r2, r0
 800334a:	f107 030c 	add.w	r3, r7, #12
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	9200      	str	r2, [sp, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	4632      	mov	r2, r6
 8003356:	4629      	mov	r1, r5
 8003358:	4620      	mov	r0, r4
 800335a:	f000 f92f 	bl	80035bc <xTaskCreate>
 800335e:	4603      	mov	r3, r0
 8003360:	2b01      	cmp	r3, #1
 8003362:	d001      	beq.n	8003368 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003368:	68fb      	ldr	r3, [r7, #12]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003372 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <osDelay+0x16>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	e000      	b.n	800338a <osDelay+0x18>
 8003388:	2301      	movs	r3, #1
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fa4c 	bl	8003828 <vTaskDelay>
  
  return osOK;
 8003390:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f103 0208 	add.w	r2, r3, #8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f04f 32ff 	mov.w	r2, #4294967295
 80033b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f103 0208 	add.w	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f103 0208 	add.w	r2, r3, #8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d103      	bne.n	800345c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e00c      	b.n	8003476 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3308      	adds	r3, #8
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e002      	b.n	800346a <vListInsert+0x2e>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	429a      	cmp	r2, r3
 8003474:	d2f6      	bcs.n	8003464 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	601a      	str	r2, [r3, #0]
}
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6892      	ldr	r2, [r2, #8]
 80034c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6852      	ldr	r2, [r2, #4]
 80034ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d103      	bne.n	80034e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1e5a      	subs	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08e      	sub	sp, #56	; 0x38
 8003506:	af04      	add	r7, sp, #16
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <xTaskCreateStatic+0x46>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	61fb      	str	r3, [r7, #28]
}
 8003544:	bf00      	nop
 8003546:	e7fe      	b.n	8003546 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003548:	2354      	movs	r3, #84	; 0x54
 800354a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b54      	cmp	r3, #84	; 0x54
 8003550:	d00a      	beq.n	8003568 <xTaskCreateStatic+0x66>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	61bb      	str	r3, [r7, #24]
}
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003568:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01e      	beq.n	80035ae <xTaskCreateStatic+0xac>
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01b      	beq.n	80035ae <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003588:	2300      	movs	r3, #0
 800358a:	9303      	str	r3, [sp, #12]
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	9302      	str	r3, [sp, #8]
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f850 	bl	8003646 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035a8:	f000 f8d4 	bl	8003754 <prvAddNewTaskToReadyList>
 80035ac:	e001      	b.n	80035b2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035b2:	697b      	ldr	r3, [r7, #20]
	}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3728      	adds	r7, #40	; 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08c      	sub	sp, #48	; 0x30
 80035c0:	af04      	add	r7, sp, #16
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 ffe9 	bl	80045a8 <pvPortMalloc>
 80035d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00e      	beq.n	80035fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035de:	2054      	movs	r0, #84	; 0x54
 80035e0:	f000 ffe2 	bl	80045a8 <pvPortMalloc>
 80035e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
 80035f2:	e005      	b.n	8003600 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035f4:	6978      	ldr	r0, [r7, #20]
 80035f6:	f001 f8a3 	bl	8004740 <vPortFree>
 80035fa:	e001      	b.n	8003600 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d017      	beq.n	8003636 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	2300      	movs	r3, #0
 8003612:	9303      	str	r3, [sp, #12]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	9302      	str	r3, [sp, #8]
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f80e 	bl	8003646 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800362a:	69f8      	ldr	r0, [r7, #28]
 800362c:	f000 f892 	bl	8003754 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003630:	2301      	movs	r3, #1
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	e002      	b.n	800363c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295
 800363a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800363c:	69bb      	ldr	r3, [r7, #24]
	}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b088      	sub	sp, #32
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800365e:	3b01      	subs	r3, #1
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f023 0307 	bic.w	r3, r3, #7
 800366c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <prvInitialiseNewTask+0x48>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	617b      	str	r3, [r7, #20]
}
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01f      	beq.n	80036d4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e012      	b.n	80036c0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	7819      	ldrb	r1, [r3, #0]
 80036a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	4413      	add	r3, r2
 80036a8:	3334      	adds	r3, #52	; 0x34
 80036aa:	460a      	mov	r2, r1
 80036ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	d9e9      	bls.n	800369a <prvInitialiseNewTask+0x54>
 80036c6:	e000      	b.n	80036ca <prvInitialiseNewTask+0x84>
			{
				break;
 80036c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d2:	e003      	b.n	80036dc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d901      	bls.n	80036e6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036e2:	2306      	movs	r3, #6
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	2200      	movs	r2, #0
 80036f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	3304      	adds	r3, #4
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fe6c 	bl	80033da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	3318      	adds	r3, #24
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fe67 	bl	80033da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003710:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	f1c3 0207 	rsb	r2, r3, #7
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	2200      	movs	r2, #0
 8003726:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	68f9      	ldr	r1, [r7, #12]
 8003734:	69b8      	ldr	r0, [r7, #24]
 8003736:	f000 fd27 	bl	8004188 <pxPortInitialiseStack>
 800373a:	4602      	mov	r2, r0
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800374c:	bf00      	nop
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800375c:	f000 fe42 	bl	80043e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003760:	4b2a      	ldr	r3, [pc, #168]	; (800380c <prvAddNewTaskToReadyList+0xb8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <prvAddNewTaskToReadyList+0xb8>)
 8003768:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800376a:	4b29      	ldr	r3, [pc, #164]	; (8003810 <prvAddNewTaskToReadyList+0xbc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003772:	4a27      	ldr	r2, [pc, #156]	; (8003810 <prvAddNewTaskToReadyList+0xbc>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003778:	4b24      	ldr	r3, [pc, #144]	; (800380c <prvAddNewTaskToReadyList+0xb8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d110      	bne.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003780:	f000 fbde 	bl	8003f40 <prvInitialiseTaskLists>
 8003784:	e00d      	b.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003786:	4b23      	ldr	r3, [pc, #140]	; (8003814 <prvAddNewTaskToReadyList+0xc0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <prvAddNewTaskToReadyList+0xbc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	429a      	cmp	r2, r3
 800379a:	d802      	bhi.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <prvAddNewTaskToReadyList+0xbc>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037a2:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <prvAddNewTaskToReadyList+0xc4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <prvAddNewTaskToReadyList+0xc4>)
 80037aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	2201      	movs	r2, #1
 80037b2:	409a      	lsls	r2, r3
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <prvAddNewTaskToReadyList+0xc8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	4a18      	ldr	r2, [pc, #96]	; (800381c <prvAddNewTaskToReadyList+0xc8>)
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4a15      	ldr	r2, [pc, #84]	; (8003820 <prvAddNewTaskToReadyList+0xcc>)
 80037cc:	441a      	add	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7ff fe0d 	bl	80033f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037da:	f000 fe33 	bl	8004444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037de:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <prvAddNewTaskToReadyList+0xc0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00e      	beq.n	8003804 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <prvAddNewTaskToReadyList+0xbc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d207      	bcs.n	8003804 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <prvAddNewTaskToReadyList+0xd0>)
 80037f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200004b0 	.word	0x200004b0
 8003810:	200003b0 	.word	0x200003b0
 8003814:	200004bc 	.word	0x200004bc
 8003818:	200004cc 	.word	0x200004cc
 800381c:	200004b8 	.word	0x200004b8
 8003820:	200003b4 	.word	0x200003b4
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800383a:	4b13      	ldr	r3, [pc, #76]	; (8003888 <vTaskDelay+0x60>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <vTaskDelay+0x30>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	60bb      	str	r3, [r7, #8]
}
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003858:	f000 f99c 	bl	8003b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800385c:	2100      	movs	r1, #0
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fc2c 	bl	80040bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003864:	f000 f9a4 	bl	8003bb0 <xTaskResumeAll>
 8003868:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <vTaskDelay+0x64>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	200004d8 	.word	0x200004d8
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003898:	f000 fda4 	bl	80043e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <vTaskSuspend+0x18>
 80038a2:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <vTaskSuspend+0x104>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	e000      	b.n	80038aa <vTaskSuspend+0x1a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fdfc 	bl	80034ae <uxListRemove>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d115      	bne.n	80038e8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	4935      	ldr	r1, [pc, #212]	; (8003998 <vTaskSuspend+0x108>)
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <vTaskSuspend+0x58>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	2201      	movs	r2, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43da      	mvns	r2, r3
 80038de:	4b2f      	ldr	r3, [pc, #188]	; (800399c <vTaskSuspend+0x10c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4013      	ands	r3, r2
 80038e4:	4a2d      	ldr	r2, [pc, #180]	; (800399c <vTaskSuspend+0x10c>)
 80038e6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3318      	adds	r3, #24
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fdda 	bl	80034ae <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4619      	mov	r1, r3
 8003900:	4827      	ldr	r0, [pc, #156]	; (80039a0 <vTaskSuspend+0x110>)
 8003902:	f7ff fd77 	bl	80033f4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d103      	bne.n	800391a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800391a:	f000 fd93 	bl	8004444 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <vTaskSuspend+0x114>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003926:	f000 fd5d 	bl	80043e4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800392a:	f000 fba7 	bl	800407c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800392e:	f000 fd89 	bl	8004444 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <vTaskSuspend+0x104>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	429a      	cmp	r2, r3
 800393a:	d127      	bne.n	800398c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <vTaskSuspend+0x114>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003944:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <vTaskSuspend+0x118>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <vTaskSuspend+0xd2>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	60bb      	str	r3, [r7, #8]
}
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <vTaskSuspend+0x11c>)
 8003964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003972:	e00b      	b.n	800398c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <vTaskSuspend+0x110>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <vTaskSuspend+0x120>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d103      	bne.n	8003988 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <vTaskSuspend+0x104>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
	}
 8003986:	e001      	b.n	800398c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003988:	f000 fa66 	bl	8003e58 <vTaskSwitchContext>
	}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200003b0 	.word	0x200003b0
 8003998:	200003b4 	.word	0x200003b4
 800399c:	200004b8 	.word	0x200004b8
 80039a0:	2000049c 	.word	0x2000049c
 80039a4:	200004bc 	.word	0x200004bc
 80039a8:	200004d8 	.word	0x200004d8
 80039ac:	e000ed04 	.word	0xe000ed04
 80039b0:	200004b0 	.word	0x200004b0

080039b4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60fb      	str	r3, [r7, #12]
}
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <prvTaskIsTaskSuspended+0x5c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d10a      	bne.n	8003a00 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <prvTaskIsTaskSuspended+0x60>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d005      	beq.n	8003a00 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a00:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003a02:	4618      	mov	r0, r3
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	2000049c 	.word	0x2000049c
 8003a14:	20000470 	.word	0x20000470

08003a18 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <vTaskResume+0x28>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	60bb      	str	r3, [r7, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003a40:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <vTaskResume+0xac>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d037      	beq.n	8003aba <vTaskResume+0xa2>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d034      	beq.n	8003aba <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003a50:	f000 fcc8 	bl	80043e4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff ffad 	bl	80039b4 <prvTaskIsTaskSuspended>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02a      	beq.n	8003ab6 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fd22 	bl	80034ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	2201      	movs	r2, #1
 8003a70:	409a      	lsls	r2, r3
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <vTaskResume+0xb0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <vTaskResume+0xb0>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4a10      	ldr	r2, [pc, #64]	; (8003acc <vTaskResume+0xb4>)
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7ff fcae 	bl	80033f4 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <vTaskResume+0xac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d307      	bcc.n	8003ab6 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <vTaskResume+0xb8>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003ab6:	f000 fcc5 	bl	8004444 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200003b0 	.word	0x200003b0
 8003ac8:	200004b8 	.word	0x200004b8
 8003acc:	200003b4 	.word	0x200003b4
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ae2:	463a      	mov	r2, r7
 8003ae4:	1d39      	adds	r1, r7, #4
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fc fd42 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	9202      	str	r2, [sp, #8]
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	2300      	movs	r3, #0
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	460a      	mov	r2, r1
 8003b02:	491e      	ldr	r1, [pc, #120]	; (8003b7c <vTaskStartScheduler+0xa8>)
 8003b04:	481e      	ldr	r0, [pc, #120]	; (8003b80 <vTaskStartScheduler+0xac>)
 8003b06:	f7ff fcfc 	bl	8003502 <xTaskCreateStatic>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <vTaskStartScheduler+0xb0>)
 8003b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b10:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <vTaskStartScheduler+0xb0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e001      	b.n	8003b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d116      	bne.n	8003b56 <vTaskStartScheduler+0x82>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	613b      	str	r3, [r7, #16]
}
 8003b3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <vTaskStartScheduler+0xb4>)
 8003b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <vTaskStartScheduler+0xb8>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <vTaskStartScheduler+0xbc>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b50:	f000 fba6 	bl	80042a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b54:	e00e      	b.n	8003b74 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d10a      	bne.n	8003b74 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	60fb      	str	r3, [r7, #12]
}
 8003b70:	bf00      	nop
 8003b72:	e7fe      	b.n	8003b72 <vTaskStartScheduler+0x9e>
}
 8003b74:	bf00      	nop
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	08005344 	.word	0x08005344
 8003b80:	08003f11 	.word	0x08003f11
 8003b84:	200004d4 	.word	0x200004d4
 8003b88:	200004d0 	.word	0x200004d0
 8003b8c:	200004bc 	.word	0x200004bc
 8003b90:	200004b4 	.word	0x200004b4

08003b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <vTaskSuspendAll+0x18>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	4a03      	ldr	r2, [pc, #12]	; (8003bac <vTaskSuspendAll+0x18>)
 8003ba0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	200004d8 	.word	0x200004d8

08003bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bbe:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <xTaskResumeAll+0x114>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <xTaskResumeAll+0x2c>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	603b      	str	r3, [r7, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bdc:	f000 fc02 	bl	80043e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003be0:	4b38      	ldr	r3, [pc, #224]	; (8003cc4 <xTaskResumeAll+0x114>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	4a37      	ldr	r2, [pc, #220]	; (8003cc4 <xTaskResumeAll+0x114>)
 8003be8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <xTaskResumeAll+0x114>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d161      	bne.n	8003cb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bf2:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <xTaskResumeAll+0x118>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d05d      	beq.n	8003cb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bfa:	e02e      	b.n	8003c5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bfc:	4b33      	ldr	r3, [pc, #204]	; (8003ccc <xTaskResumeAll+0x11c>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3318      	adds	r3, #24
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fc50 	bl	80034ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fc4b 	bl	80034ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <xTaskResumeAll+0x120>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <xTaskResumeAll+0x120>)
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <xTaskResumeAll+0x124>)
 8003c38:	441a      	add	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7ff fbd7 	bl	80033f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <xTaskResumeAll+0x128>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d302      	bcc.n	8003c5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c54:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <xTaskResumeAll+0x12c>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <xTaskResumeAll+0x11c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1cc      	bne.n	8003bfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c68:	f000 fa08 	bl	800407c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <xTaskResumeAll+0x130>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c78:	f000 f836 	bl	8003ce8 <xTaskIncrementTick>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <xTaskResumeAll+0x12c>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f1      	bne.n	8003c78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003c94:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <xTaskResumeAll+0x130>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <xTaskResumeAll+0x12c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <xTaskResumeAll+0x134>)
 8003ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cb6:	f000 fbc5 	bl	8004444 <vPortExitCritical>

	return xAlreadyYielded;
 8003cba:	68bb      	ldr	r3, [r7, #8]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	200004d8 	.word	0x200004d8
 8003cc8:	200004b0 	.word	0x200004b0
 8003ccc:	20000470 	.word	0x20000470
 8003cd0:	200004b8 	.word	0x200004b8
 8003cd4:	200003b4 	.word	0x200003b4
 8003cd8:	200003b0 	.word	0x200003b0
 8003cdc:	200004c4 	.word	0x200004c4
 8003ce0:	200004c0 	.word	0x200004c0
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf2:	4b4e      	ldr	r3, [pc, #312]	; (8003e2c <xTaskIncrementTick+0x144>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 808e 	bne.w	8003e18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cfc:	4b4c      	ldr	r3, [pc, #304]	; (8003e30 <xTaskIncrementTick+0x148>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d04:	4a4a      	ldr	r2, [pc, #296]	; (8003e30 <xTaskIncrementTick+0x148>)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d120      	bne.n	8003d52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d10:	4b48      	ldr	r3, [pc, #288]	; (8003e34 <xTaskIncrementTick+0x14c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	603b      	str	r3, [r7, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	e7fe      	b.n	8003d2e <xTaskIncrementTick+0x46>
 8003d30:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <xTaskIncrementTick+0x14c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <xTaskIncrementTick+0x150>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3e      	ldr	r2, [pc, #248]	; (8003e34 <xTaskIncrementTick+0x14c>)
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4a3e      	ldr	r2, [pc, #248]	; (8003e38 <xTaskIncrementTick+0x150>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <xTaskIncrementTick+0x154>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	4a3c      	ldr	r2, [pc, #240]	; (8003e3c <xTaskIncrementTick+0x154>)
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	f000 f995 	bl	800407c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d52:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <xTaskIncrementTick+0x158>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d348      	bcc.n	8003dee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d5c:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <xTaskIncrementTick+0x14c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <xTaskIncrementTick+0x158>)
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	601a      	str	r2, [r3, #0]
					break;
 8003d6e:	e03e      	b.n	8003dee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d70:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <xTaskIncrementTick+0x14c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d203      	bcs.n	8003d90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d88:	4a2d      	ldr	r2, [pc, #180]	; (8003e40 <xTaskIncrementTick+0x158>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d8e:	e02e      	b.n	8003dee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	3304      	adds	r3, #4
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fb8a 	bl	80034ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3318      	adds	r3, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fb81 	bl	80034ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2201      	movs	r2, #1
 8003db2:	409a      	lsls	r2, r3
 8003db4:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <xTaskIncrementTick+0x15c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	4a22      	ldr	r2, [pc, #136]	; (8003e44 <xTaskIncrementTick+0x15c>)
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <xTaskIncrementTick+0x160>)
 8003dcc:	441a      	add	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7ff fb0d 	bl	80033f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <xTaskIncrementTick+0x164>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d3b9      	bcc.n	8003d5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dec:	e7b6      	b.n	8003d5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dee:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <xTaskIncrementTick+0x164>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	4914      	ldr	r1, [pc, #80]	; (8003e48 <xTaskIncrementTick+0x160>)
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d901      	bls.n	8003e0a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003e06:	2301      	movs	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <xTaskIncrementTick+0x168>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e12:	2301      	movs	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	e004      	b.n	8003e22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <xTaskIncrementTick+0x16c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <xTaskIncrementTick+0x16c>)
 8003e20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e22:	697b      	ldr	r3, [r7, #20]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	200004d8 	.word	0x200004d8
 8003e30:	200004b4 	.word	0x200004b4
 8003e34:	20000468 	.word	0x20000468
 8003e38:	2000046c 	.word	0x2000046c
 8003e3c:	200004c8 	.word	0x200004c8
 8003e40:	200004d0 	.word	0x200004d0
 8003e44:	200004b8 	.word	0x200004b8
 8003e48:	200003b4 	.word	0x200003b4
 8003e4c:	200003b0 	.word	0x200003b0
 8003e50:	200004c4 	.word	0x200004c4
 8003e54:	200004c0 	.word	0x200004c0

08003e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e5e:	4b27      	ldr	r3, [pc, #156]	; (8003efc <vTaskSwitchContext+0xa4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <vTaskSwitchContext+0xa8>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e6c:	e03f      	b.n	8003eee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003e6e:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <vTaskSwitchContext+0xa8>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e74:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <vTaskSwitchContext+0xac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e82:	7afb      	ldrb	r3, [r7, #11]
 8003e84:	f1c3 031f 	rsb	r3, r3, #31
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	491f      	ldr	r1, [pc, #124]	; (8003f08 <vTaskSwitchContext+0xb0>)
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	607b      	str	r3, [r7, #4]
}
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <vTaskSwitchContext+0x5a>
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <vTaskSwitchContext+0xb0>)
 8003ec0:	4413      	add	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d104      	bne.n	8003ee4 <vTaskSwitchContext+0x8c>
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <vTaskSwitchContext+0xb4>)
 8003eec:	6013      	str	r3, [r2, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	200004d8 	.word	0x200004d8
 8003f00:	200004c4 	.word	0x200004c4
 8003f04:	200004b8 	.word	0x200004b8
 8003f08:	200003b4 	.word	0x200003b4
 8003f0c:	200003b0 	.word	0x200003b0

08003f10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f18:	f000 f852 	bl	8003fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <prvIdleTask+0x28>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d9f9      	bls.n	8003f18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <prvIdleTask+0x2c>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f34:	e7f0      	b.n	8003f18 <prvIdleTask+0x8>
 8003f36:	bf00      	nop
 8003f38:	200003b4 	.word	0x200003b4
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	e00c      	b.n	8003f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <prvInitialiseTaskLists+0x60>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fa1d 	bl	800339a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3301      	adds	r3, #1
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b06      	cmp	r3, #6
 8003f6a:	d9ef      	bls.n	8003f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f6c:	480d      	ldr	r0, [pc, #52]	; (8003fa4 <prvInitialiseTaskLists+0x64>)
 8003f6e:	f7ff fa14 	bl	800339a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f72:	480d      	ldr	r0, [pc, #52]	; (8003fa8 <prvInitialiseTaskLists+0x68>)
 8003f74:	f7ff fa11 	bl	800339a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f78:	480c      	ldr	r0, [pc, #48]	; (8003fac <prvInitialiseTaskLists+0x6c>)
 8003f7a:	f7ff fa0e 	bl	800339a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f7e:	480c      	ldr	r0, [pc, #48]	; (8003fb0 <prvInitialiseTaskLists+0x70>)
 8003f80:	f7ff fa0b 	bl	800339a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f84:	480b      	ldr	r0, [pc, #44]	; (8003fb4 <prvInitialiseTaskLists+0x74>)
 8003f86:	f7ff fa08 	bl	800339a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <prvInitialiseTaskLists+0x78>)
 8003f8c:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <prvInitialiseTaskLists+0x64>)
 8003f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <prvInitialiseTaskLists+0x7c>)
 8003f92:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <prvInitialiseTaskLists+0x68>)
 8003f94:	601a      	str	r2, [r3, #0]
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200003b4 	.word	0x200003b4
 8003fa4:	20000440 	.word	0x20000440
 8003fa8:	20000454 	.word	0x20000454
 8003fac:	20000470 	.word	0x20000470
 8003fb0:	20000484 	.word	0x20000484
 8003fb4:	2000049c 	.word	0x2000049c
 8003fb8:	20000468 	.word	0x20000468
 8003fbc:	2000046c 	.word	0x2000046c

08003fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fc6:	e019      	b.n	8003ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fc8:	f000 fa0c 	bl	80043e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <prvCheckTasksWaitingTermination+0x50>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fa68 	bl	80034ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <prvCheckTasksWaitingTermination+0x54>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <prvCheckTasksWaitingTermination+0x54>)
 8003fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <prvCheckTasksWaitingTermination+0x58>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <prvCheckTasksWaitingTermination+0x58>)
 8003ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ff2:	f000 fa27 	bl	8004444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f810 	bl	800401c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <prvCheckTasksWaitingTermination+0x58>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e1      	bne.n	8003fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000484 	.word	0x20000484
 8004014:	200004b0 	.word	0x200004b0
 8004018:	20000498 	.word	0x20000498

0800401c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fb84 	bl	8004740 <vPortFree>
				vPortFree( pxTCB );
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fb81 	bl	8004740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800403e:	e018      	b.n	8004072 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004046:	2b01      	cmp	r3, #1
 8004048:	d103      	bne.n	8004052 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fb78 	bl	8004740 <vPortFree>
	}
 8004050:	e00f      	b.n	8004072 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004058:	2b02      	cmp	r3, #2
 800405a:	d00a      	beq.n	8004072 <prvDeleteTCB+0x56>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60fb      	str	r3, [r7, #12]
}
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <prvDeleteTCB+0x54>
	}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <prvResetNextTaskUnblockTime+0x38>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <prvResetNextTaskUnblockTime+0x3c>)
 800408e:	f04f 32ff 	mov.w	r2, #4294967295
 8004092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004094:	e008      	b.n	80040a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <prvResetNextTaskUnblockTime+0x38>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <prvResetNextTaskUnblockTime+0x3c>)
 80040a6:	6013      	str	r3, [r2, #0]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	20000468 	.word	0x20000468
 80040b8:	200004d0 	.word	0x200004d0

080040bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <prvAddCurrentTaskToDelayedList+0xb0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040cc:	4b28      	ldr	r3, [pc, #160]	; (8004170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff f9eb 	bl	80034ae <uxListRemove>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	2201      	movs	r2, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4013      	ands	r3, r2
 80040f2:	4a20      	ldr	r2, [pc, #128]	; (8004174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d10a      	bne.n	8004114 <prvAddCurrentTaskToDelayedList+0x58>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004104:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	481a      	ldr	r0, [pc, #104]	; (8004178 <prvAddCurrentTaskToDelayedList+0xbc>)
 800410e:	f7ff f971 	bl	80033f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004112:	e026      	b.n	8004162 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800411c:	4b14      	ldr	r3, [pc, #80]	; (8004170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	429a      	cmp	r2, r3
 800412a:	d209      	bcs.n	8004140 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <prvAddCurrentTaskToDelayedList+0xc0>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3304      	adds	r3, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7ff f97f 	bl	800343c <vListInsert>
}
 800413e:	e010      	b.n	8004162 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f7ff f975 	bl	800343c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	d202      	bcs.n	8004162 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800415c:	4a09      	ldr	r2, [pc, #36]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6013      	str	r3, [r2, #0]
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	200004b4 	.word	0x200004b4
 8004170:	200003b0 	.word	0x200003b0
 8004174:	200004b8 	.word	0x200004b8
 8004178:	2000049c 	.word	0x2000049c
 800417c:	2000046c 	.word	0x2000046c
 8004180:	20000468 	.word	0x20000468
 8004184:	200004d0 	.word	0x200004d0

08004188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3b04      	subs	r3, #4
 8004198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3b04      	subs	r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b04      	subs	r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041b8:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <pxPortInitialiseStack+0x64>)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b14      	subs	r3, #20
 80041c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3b04      	subs	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f06f 0202 	mvn.w	r2, #2
 80041d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3b20      	subs	r3, #32
 80041dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041de:	68fb      	ldr	r3, [r7, #12]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	080041f1 	.word	0x080041f1

080041f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <prvTaskExitError+0x54>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d00a      	beq.n	800421a <prvTaskExitError+0x2a>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <prvTaskExitError+0x28>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60bb      	str	r3, [r7, #8]
}
 800422c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800422e:	bf00      	nop
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0fc      	beq.n	8004230 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	20000020 	.word	0x20000020
	...

08004250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <pxCurrentTCBConst2>)
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	6808      	ldr	r0, [r1, #0]
 8004256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425a:	f380 8809 	msr	PSP, r0
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f380 8811 	msr	BASEPRI, r0
 800426a:	4770      	bx	lr
 800426c:	f3af 8000 	nop.w

08004270 <pxCurrentTCBConst2>:
 8004270:	200003b0 	.word	0x200003b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004278:	4808      	ldr	r0, [pc, #32]	; (800429c <prvPortStartFirstTask+0x24>)
 800427a:	6800      	ldr	r0, [r0, #0]
 800427c:	6800      	ldr	r0, [r0, #0]
 800427e:	f380 8808 	msr	MSP, r0
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8814 	msr	CONTROL, r0
 800428a:	b662      	cpsie	i
 800428c:	b661      	cpsie	f
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	df00      	svc	0
 8004298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800429a:	bf00      	nop
 800429c:	e000ed08 	.word	0xe000ed08

080042a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042a6:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <xPortStartScheduler+0x120>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a46      	ldr	r2, [pc, #280]	; (80043c4 <xPortStartScheduler+0x124>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10a      	bne.n	80042c6 <xPortStartScheduler+0x26>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	613b      	str	r3, [r7, #16]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042c6:	4b3e      	ldr	r3, [pc, #248]	; (80043c0 <xPortStartScheduler+0x120>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3f      	ldr	r2, [pc, #252]	; (80043c8 <xPortStartScheduler+0x128>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10a      	bne.n	80042e6 <xPortStartScheduler+0x46>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <xPortStartScheduler+0x12c>)
 80042e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	22ff      	movs	r2, #255	; 0xff
 80042f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <xPortStartScheduler+0x130>)
 800430c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800430e:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <xPortStartScheduler+0x134>)
 8004310:	2207      	movs	r2, #7
 8004312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004314:	e009      	b.n	800432a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004316:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <xPortStartScheduler+0x134>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3b01      	subs	r3, #1
 800431c:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <xPortStartScheduler+0x134>)
 800431e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	b2db      	uxtb	r3, r3
 8004328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004332:	2b80      	cmp	r3, #128	; 0x80
 8004334:	d0ef      	beq.n	8004316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <xPortStartScheduler+0x134>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1c3 0307 	rsb	r3, r3, #7
 800433e:	2b04      	cmp	r3, #4
 8004340:	d00a      	beq.n	8004358 <xPortStartScheduler+0xb8>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60bb      	str	r3, [r7, #8]
}
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004358:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <xPortStartScheduler+0x134>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <xPortStartScheduler+0x134>)
 8004360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <xPortStartScheduler+0x134>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800436a:	4a1a      	ldr	r2, [pc, #104]	; (80043d4 <xPortStartScheduler+0x134>)
 800436c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004376:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <xPortStartScheduler+0x138>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <xPortStartScheduler+0x138>)
 800437c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <xPortStartScheduler+0x138>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <xPortStartScheduler+0x138>)
 8004388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800438c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800438e:	f000 f8dd 	bl	800454c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <xPortStartScheduler+0x13c>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004398:	f000 f8fc 	bl	8004594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <xPortStartScheduler+0x140>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0f      	ldr	r2, [pc, #60]	; (80043e0 <xPortStartScheduler+0x140>)
 80043a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043a8:	f7ff ff66 	bl	8004278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043ac:	f7ff fd54 	bl	8003e58 <vTaskSwitchContext>
	prvTaskExitError();
 80043b0:	f7ff ff1e 	bl	80041f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	e000ed00 	.word	0xe000ed00
 80043c4:	410fc271 	.word	0x410fc271
 80043c8:	410fc270 	.word	0x410fc270
 80043cc:	e000e400 	.word	0xe000e400
 80043d0:	200004dc 	.word	0x200004dc
 80043d4:	200004e0 	.word	0x200004e0
 80043d8:	e000ed20 	.word	0xe000ed20
 80043dc:	20000020 	.word	0x20000020
 80043e0:	e000ef34 	.word	0xe000ef34

080043e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	607b      	str	r3, [r7, #4]
}
 80043fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <vPortEnterCritical+0x58>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	4a0d      	ldr	r2, [pc, #52]	; (800443c <vPortEnterCritical+0x58>)
 8004406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <vPortEnterCritical+0x58>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d10f      	bne.n	8004430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <vPortEnterCritical+0x5c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <vPortEnterCritical+0x4c>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	603b      	str	r3, [r7, #0]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <vPortEnterCritical+0x4a>
	}
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	20000020 	.word	0x20000020
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <vPortExitCritical+0x50>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <vPortExitCritical+0x24>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	607b      	str	r3, [r7, #4]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <vPortExitCritical+0x50>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3b01      	subs	r3, #1
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <vPortExitCritical+0x50>)
 8004470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <vPortExitCritical+0x50>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <vPortExitCritical+0x42>
 800447a:	2300      	movs	r3, #0
 800447c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000020 	.word	0x20000020
	...

080044a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044a0:	f3ef 8009 	mrs	r0, PSP
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <pxCurrentTCBConst>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	f01e 0f10 	tst.w	lr, #16
 80044b0:	bf08      	it	eq
 80044b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	6010      	str	r0, [r2, #0]
 80044bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044c4:	f380 8811 	msr	BASEPRI, r0
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f7ff fcc2 	bl	8003e58 <vTaskSwitchContext>
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f380 8811 	msr	BASEPRI, r0
 80044dc:	bc09      	pop	{r0, r3}
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	6808      	ldr	r0, [r1, #0]
 80044e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e6:	f01e 0f10 	tst.w	lr, #16
 80044ea:	bf08      	it	eq
 80044ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044f0:	f380 8809 	msr	PSP, r0
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	f3af 8000 	nop.w

08004500 <pxCurrentTCBConst>:
 8004500:	200003b0 	.word	0x200003b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop

08004508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
}
 8004520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004522:	f7ff fbe1 	bl	8003ce8 <xTaskIncrementTick>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <SysTick_Handler+0x40>)
 800452e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	2300      	movs	r3, #0
 8004536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f383 8811 	msr	BASEPRI, r3
}
 800453e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <vPortSetupTimerInterrupt+0x34>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <vPortSetupTimerInterrupt+0x38>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <vPortSetupTimerInterrupt+0x3c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <vPortSetupTimerInterrupt+0x40>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <vPortSetupTimerInterrupt+0x44>)
 800456a:	3b01      	subs	r3, #1
 800456c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <vPortSetupTimerInterrupt+0x34>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	e000e010 	.word	0xe000e010
 8004584:	e000e018 	.word	0xe000e018
 8004588:	20000014 	.word	0x20000014
 800458c:	10624dd3 	.word	0x10624dd3
 8004590:	e000e014 	.word	0xe000e014

08004594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045a4 <vPortEnableVFP+0x10>
 8004598:	6801      	ldr	r1, [r0, #0]
 800459a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800459e:	6001      	str	r1, [r0, #0]
 80045a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045a2:	bf00      	nop
 80045a4:	e000ed88 	.word	0xe000ed88

080045a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045b4:	f7ff faee 	bl	8003b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045b8:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <pvPortMalloc+0x180>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045c0:	f000 f920 	bl	8004804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <pvPortMalloc+0x184>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 8093 	bne.w	80046f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01d      	beq.n	8004614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045d8:	2208      	movs	r2, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d014      	beq.n	8004614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f023 0307 	bic.w	r3, r3, #7
 80045f0:	3308      	adds	r3, #8
 80045f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <pvPortMalloc+0x6c>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	617b      	str	r3, [r7, #20]
}
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d06e      	beq.n	80046f8 <pvPortMalloc+0x150>
 800461a:	4b45      	ldr	r3, [pc, #276]	; (8004730 <pvPortMalloc+0x188>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d869      	bhi.n	80046f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004624:	4b43      	ldr	r3, [pc, #268]	; (8004734 <pvPortMalloc+0x18c>)
 8004626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004628:	4b42      	ldr	r3, [pc, #264]	; (8004734 <pvPortMalloc+0x18c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800462e:	e004      	b.n	800463a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d903      	bls.n	800464c <pvPortMalloc+0xa4>
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f1      	bne.n	8004630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <pvPortMalloc+0x180>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004652:	429a      	cmp	r2, r3
 8004654:	d050      	beq.n	80046f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2208      	movs	r2, #8
 800465c:	4413      	add	r3, r2
 800465e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	1ad2      	subs	r2, r2, r3
 8004670:	2308      	movs	r3, #8
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	429a      	cmp	r2, r3
 8004676:	d91f      	bls.n	80046b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <pvPortMalloc+0xf8>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	613b      	str	r3, [r7, #16]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046b2:	69b8      	ldr	r0, [r7, #24]
 80046b4:	f000 f908 	bl	80048c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <pvPortMalloc+0x188>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <pvPortMalloc+0x188>)
 80046c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <pvPortMalloc+0x188>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <pvPortMalloc+0x190>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d203      	bcs.n	80046da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <pvPortMalloc+0x188>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a18      	ldr	r2, [pc, #96]	; (8004738 <pvPortMalloc+0x190>)
 80046d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <pvPortMalloc+0x184>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <pvPortMalloc+0x194>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3301      	adds	r3, #1
 80046f4:	4a11      	ldr	r2, [pc, #68]	; (800473c <pvPortMalloc+0x194>)
 80046f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046f8:	f7ff fa5a 	bl	8003bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <pvPortMalloc+0x174>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	60fb      	str	r3, [r7, #12]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <pvPortMalloc+0x172>
	return pvReturn;
 800471c:	69fb      	ldr	r3, [r7, #28]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3728      	adds	r7, #40	; 0x28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	200040ec 	.word	0x200040ec
 800472c:	20004100 	.word	0x20004100
 8004730:	200040f0 	.word	0x200040f0
 8004734:	200040e4 	.word	0x200040e4
 8004738:	200040f4 	.word	0x200040f4
 800473c:	200040f8 	.word	0x200040f8

08004740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d04d      	beq.n	80047ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004752:	2308      	movs	r3, #8
 8004754:	425b      	negs	r3, r3
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4413      	add	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <vPortFree+0xb8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <vPortFree+0x44>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	60fb      	str	r3, [r7, #12]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <vPortFree+0x62>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60bb      	str	r3, [r7, #8]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <vPortFree+0xb8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01e      	beq.n	80047ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11a      	bne.n	80047ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <vPortFree+0xb8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	401a      	ands	r2, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047c8:	f7ff f9e4 	bl	8003b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <vPortFree+0xbc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4413      	add	r3, r2
 80047d6:	4a09      	ldr	r2, [pc, #36]	; (80047fc <vPortFree+0xbc>)
 80047d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047da:	6938      	ldr	r0, [r7, #16]
 80047dc:	f000 f874 	bl	80048c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <vPortFree+0xc0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a06      	ldr	r2, [pc, #24]	; (8004800 <vPortFree+0xc0>)
 80047e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047ea:	f7ff f9e1 	bl	8003bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20004100 	.word	0x20004100
 80047fc:	200040f0 	.word	0x200040f0
 8004800:	200040fc 	.word	0x200040fc

08004804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800480a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800480e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <prvHeapInit+0xac>)
 8004812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00c      	beq.n	8004838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3307      	adds	r3, #7
 8004822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <prvHeapInit+0xac>)
 8004834:	4413      	add	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <prvHeapInit+0xb0>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <prvHeapInit+0xb0>)
 8004844:	2200      	movs	r2, #0
 8004846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	4413      	add	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004850:	2208      	movs	r2, #8
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <prvHeapInit+0xb4>)
 8004864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <prvHeapInit+0xb4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <prvHeapInit+0xb4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <prvHeapInit+0xb4>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <prvHeapInit+0xb8>)
 8004892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <prvHeapInit+0xbc>)
 800489a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <prvHeapInit+0xc0>)
 800489e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048a2:	601a      	str	r2, [r3, #0]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	200004e4 	.word	0x200004e4
 80048b4:	200040e4 	.word	0x200040e4
 80048b8:	200040ec 	.word	0x200040ec
 80048bc:	200040f4 	.word	0x200040f4
 80048c0:	200040f0 	.word	0x200040f0
 80048c4:	20004100 	.word	0x20004100

080048c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <prvInsertBlockIntoFreeList+0xac>)
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e002      	b.n	80048dc <prvInsertBlockIntoFreeList+0x14>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d8f7      	bhi.n	80048d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4413      	add	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d108      	bne.n	800490a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	441a      	add	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	441a      	add	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d118      	bne.n	8004950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <prvInsertBlockIntoFreeList+0xb0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d00d      	beq.n	8004946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e008      	b.n	8004958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <prvInsertBlockIntoFreeList+0xb0>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e003      	b.n	8004958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d002      	beq.n	8004966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	200040e4 	.word	0x200040e4
 8004978:	200040ec 	.word	0x200040ec

0800497c <__errno>:
 800497c:	4b01      	ldr	r3, [pc, #4]	; (8004984 <__errno+0x8>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000024 	.word	0x20000024

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4d0d      	ldr	r5, [pc, #52]	; (80049c0 <__libc_init_array+0x38>)
 800498c:	4c0d      	ldr	r4, [pc, #52]	; (80049c4 <__libc_init_array+0x3c>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	2600      	movs	r6, #0
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	4d0b      	ldr	r5, [pc, #44]	; (80049c8 <__libc_init_array+0x40>)
 800499a:	4c0c      	ldr	r4, [pc, #48]	; (80049cc <__libc_init_array+0x44>)
 800499c:	f000 fc8e 	bl	80052bc <_init>
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	2600      	movs	r6, #0
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	080053a0 	.word	0x080053a0
 80049c4:	080053a0 	.word	0x080053a0
 80049c8:	080053a0 	.word	0x080053a0
 80049cc:	080053a4 	.word	0x080053a4

080049d0 <memcpy>:
 80049d0:	440a      	add	r2, r1
 80049d2:	4291      	cmp	r1, r2
 80049d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049d8:	d100      	bne.n	80049dc <memcpy+0xc>
 80049da:	4770      	bx	lr
 80049dc:	b510      	push	{r4, lr}
 80049de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049e6:	4291      	cmp	r1, r2
 80049e8:	d1f9      	bne.n	80049de <memcpy+0xe>
 80049ea:	bd10      	pop	{r4, pc}

080049ec <memset>:
 80049ec:	4402      	add	r2, r0
 80049ee:	4603      	mov	r3, r0
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d100      	bne.n	80049f6 <memset+0xa>
 80049f4:	4770      	bx	lr
 80049f6:	f803 1b01 	strb.w	r1, [r3], #1
 80049fa:	e7f9      	b.n	80049f0 <memset+0x4>

080049fc <siprintf>:
 80049fc:	b40e      	push	{r1, r2, r3}
 80049fe:	b500      	push	{lr}
 8004a00:	b09c      	sub	sp, #112	; 0x70
 8004a02:	ab1d      	add	r3, sp, #116	; 0x74
 8004a04:	9002      	str	r0, [sp, #8]
 8004a06:	9006      	str	r0, [sp, #24]
 8004a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a0c:	4809      	ldr	r0, [pc, #36]	; (8004a34 <siprintf+0x38>)
 8004a0e:	9107      	str	r1, [sp, #28]
 8004a10:	9104      	str	r1, [sp, #16]
 8004a12:	4909      	ldr	r1, [pc, #36]	; (8004a38 <siprintf+0x3c>)
 8004a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a18:	9105      	str	r1, [sp, #20]
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	a902      	add	r1, sp, #8
 8004a20:	f000 f868 	bl	8004af4 <_svfiprintf_r>
 8004a24:	9b02      	ldr	r3, [sp, #8]
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	b01c      	add	sp, #112	; 0x70
 8004a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a30:	b003      	add	sp, #12
 8004a32:	4770      	bx	lr
 8004a34:	20000024 	.word	0x20000024
 8004a38:	ffff0208 	.word	0xffff0208

08004a3c <__ssputs_r>:
 8004a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	688e      	ldr	r6, [r1, #8]
 8004a42:	429e      	cmp	r6, r3
 8004a44:	4682      	mov	sl, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	4690      	mov	r8, r2
 8004a4a:	461f      	mov	r7, r3
 8004a4c:	d838      	bhi.n	8004ac0 <__ssputs_r+0x84>
 8004a4e:	898a      	ldrh	r2, [r1, #12]
 8004a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a54:	d032      	beq.n	8004abc <__ssputs_r+0x80>
 8004a56:	6825      	ldr	r5, [r4, #0]
 8004a58:	6909      	ldr	r1, [r1, #16]
 8004a5a:	eba5 0901 	sub.w	r9, r5, r1
 8004a5e:	6965      	ldr	r5, [r4, #20]
 8004a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a68:	3301      	adds	r3, #1
 8004a6a:	444b      	add	r3, r9
 8004a6c:	106d      	asrs	r5, r5, #1
 8004a6e:	429d      	cmp	r5, r3
 8004a70:	bf38      	it	cc
 8004a72:	461d      	movcc	r5, r3
 8004a74:	0553      	lsls	r3, r2, #21
 8004a76:	d531      	bpl.n	8004adc <__ssputs_r+0xa0>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	f000 fb55 	bl	8005128 <_malloc_r>
 8004a7e:	4606      	mov	r6, r0
 8004a80:	b950      	cbnz	r0, 8004a98 <__ssputs_r+0x5c>
 8004a82:	230c      	movs	r3, #12
 8004a84:	f8ca 3000 	str.w	r3, [sl]
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a98:	6921      	ldr	r1, [r4, #16]
 8004a9a:	464a      	mov	r2, r9
 8004a9c:	f7ff ff98 	bl	80049d0 <memcpy>
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aaa:	81a3      	strh	r3, [r4, #12]
 8004aac:	6126      	str	r6, [r4, #16]
 8004aae:	6165      	str	r5, [r4, #20]
 8004ab0:	444e      	add	r6, r9
 8004ab2:	eba5 0509 	sub.w	r5, r5, r9
 8004ab6:	6026      	str	r6, [r4, #0]
 8004ab8:	60a5      	str	r5, [r4, #8]
 8004aba:	463e      	mov	r6, r7
 8004abc:	42be      	cmp	r6, r7
 8004abe:	d900      	bls.n	8004ac2 <__ssputs_r+0x86>
 8004ac0:	463e      	mov	r6, r7
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	f000 faa8 	bl	800501c <memmove>
 8004acc:	68a3      	ldr	r3, [r4, #8]
 8004ace:	1b9b      	subs	r3, r3, r6
 8004ad0:	60a3      	str	r3, [r4, #8]
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	4433      	add	r3, r6
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e7db      	b.n	8004a94 <__ssputs_r+0x58>
 8004adc:	462a      	mov	r2, r5
 8004ade:	f000 fb97 	bl	8005210 <_realloc_r>
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d1e1      	bne.n	8004aac <__ssputs_r+0x70>
 8004ae8:	6921      	ldr	r1, [r4, #16]
 8004aea:	4650      	mov	r0, sl
 8004aec:	f000 fab0 	bl	8005050 <_free_r>
 8004af0:	e7c7      	b.n	8004a82 <__ssputs_r+0x46>
	...

08004af4 <_svfiprintf_r>:
 8004af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af8:	4698      	mov	r8, r3
 8004afa:	898b      	ldrh	r3, [r1, #12]
 8004afc:	061b      	lsls	r3, r3, #24
 8004afe:	b09d      	sub	sp, #116	; 0x74
 8004b00:	4607      	mov	r7, r0
 8004b02:	460d      	mov	r5, r1
 8004b04:	4614      	mov	r4, r2
 8004b06:	d50e      	bpl.n	8004b26 <_svfiprintf_r+0x32>
 8004b08:	690b      	ldr	r3, [r1, #16]
 8004b0a:	b963      	cbnz	r3, 8004b26 <_svfiprintf_r+0x32>
 8004b0c:	2140      	movs	r1, #64	; 0x40
 8004b0e:	f000 fb0b 	bl	8005128 <_malloc_r>
 8004b12:	6028      	str	r0, [r5, #0]
 8004b14:	6128      	str	r0, [r5, #16]
 8004b16:	b920      	cbnz	r0, 8004b22 <_svfiprintf_r+0x2e>
 8004b18:	230c      	movs	r3, #12
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	e0d1      	b.n	8004cc6 <_svfiprintf_r+0x1d2>
 8004b22:	2340      	movs	r3, #64	; 0x40
 8004b24:	616b      	str	r3, [r5, #20]
 8004b26:	2300      	movs	r3, #0
 8004b28:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2a:	2320      	movs	r3, #32
 8004b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b34:	2330      	movs	r3, #48	; 0x30
 8004b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ce0 <_svfiprintf_r+0x1ec>
 8004b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b3e:	f04f 0901 	mov.w	r9, #1
 8004b42:	4623      	mov	r3, r4
 8004b44:	469a      	mov	sl, r3
 8004b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b4a:	b10a      	cbz	r2, 8004b50 <_svfiprintf_r+0x5c>
 8004b4c:	2a25      	cmp	r2, #37	; 0x25
 8004b4e:	d1f9      	bne.n	8004b44 <_svfiprintf_r+0x50>
 8004b50:	ebba 0b04 	subs.w	fp, sl, r4
 8004b54:	d00b      	beq.n	8004b6e <_svfiprintf_r+0x7a>
 8004b56:	465b      	mov	r3, fp
 8004b58:	4622      	mov	r2, r4
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	f7ff ff6d 	bl	8004a3c <__ssputs_r>
 8004b62:	3001      	adds	r0, #1
 8004b64:	f000 80aa 	beq.w	8004cbc <_svfiprintf_r+0x1c8>
 8004b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b6a:	445a      	add	r2, fp
 8004b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80a2 	beq.w	8004cbc <_svfiprintf_r+0x1c8>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b82:	f10a 0a01 	add.w	sl, sl, #1
 8004b86:	9304      	str	r3, [sp, #16]
 8004b88:	9307      	str	r3, [sp, #28]
 8004b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8004b90:	4654      	mov	r4, sl
 8004b92:	2205      	movs	r2, #5
 8004b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b98:	4851      	ldr	r0, [pc, #324]	; (8004ce0 <_svfiprintf_r+0x1ec>)
 8004b9a:	f7fb fb19 	bl	80001d0 <memchr>
 8004b9e:	9a04      	ldr	r2, [sp, #16]
 8004ba0:	b9d8      	cbnz	r0, 8004bda <_svfiprintf_r+0xe6>
 8004ba2:	06d0      	lsls	r0, r2, #27
 8004ba4:	bf44      	itt	mi
 8004ba6:	2320      	movmi	r3, #32
 8004ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bac:	0711      	lsls	r1, r2, #28
 8004bae:	bf44      	itt	mi
 8004bb0:	232b      	movmi	r3, #43	; 0x2b
 8004bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bba:	2b2a      	cmp	r3, #42	; 0x2a
 8004bbc:	d015      	beq.n	8004bea <_svfiprintf_r+0xf6>
 8004bbe:	9a07      	ldr	r2, [sp, #28]
 8004bc0:	4654      	mov	r4, sl
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f04f 0c0a 	mov.w	ip, #10
 8004bc8:	4621      	mov	r1, r4
 8004bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bce:	3b30      	subs	r3, #48	; 0x30
 8004bd0:	2b09      	cmp	r3, #9
 8004bd2:	d94e      	bls.n	8004c72 <_svfiprintf_r+0x17e>
 8004bd4:	b1b0      	cbz	r0, 8004c04 <_svfiprintf_r+0x110>
 8004bd6:	9207      	str	r2, [sp, #28]
 8004bd8:	e014      	b.n	8004c04 <_svfiprintf_r+0x110>
 8004bda:	eba0 0308 	sub.w	r3, r0, r8
 8004bde:	fa09 f303 	lsl.w	r3, r9, r3
 8004be2:	4313      	orrs	r3, r2
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	46a2      	mov	sl, r4
 8004be8:	e7d2      	b.n	8004b90 <_svfiprintf_r+0x9c>
 8004bea:	9b03      	ldr	r3, [sp, #12]
 8004bec:	1d19      	adds	r1, r3, #4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	9103      	str	r1, [sp, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bfbb      	ittet	lt
 8004bf6:	425b      	neglt	r3, r3
 8004bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8004bfc:	9307      	strge	r3, [sp, #28]
 8004bfe:	9307      	strlt	r3, [sp, #28]
 8004c00:	bfb8      	it	lt
 8004c02:	9204      	strlt	r2, [sp, #16]
 8004c04:	7823      	ldrb	r3, [r4, #0]
 8004c06:	2b2e      	cmp	r3, #46	; 0x2e
 8004c08:	d10c      	bne.n	8004c24 <_svfiprintf_r+0x130>
 8004c0a:	7863      	ldrb	r3, [r4, #1]
 8004c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c0e:	d135      	bne.n	8004c7c <_svfiprintf_r+0x188>
 8004c10:	9b03      	ldr	r3, [sp, #12]
 8004c12:	1d1a      	adds	r2, r3, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	9203      	str	r2, [sp, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bfb8      	it	lt
 8004c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c20:	3402      	adds	r4, #2
 8004c22:	9305      	str	r3, [sp, #20]
 8004c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004cf0 <_svfiprintf_r+0x1fc>
 8004c28:	7821      	ldrb	r1, [r4, #0]
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	4650      	mov	r0, sl
 8004c2e:	f7fb facf 	bl	80001d0 <memchr>
 8004c32:	b140      	cbz	r0, 8004c46 <_svfiprintf_r+0x152>
 8004c34:	2340      	movs	r3, #64	; 0x40
 8004c36:	eba0 000a 	sub.w	r0, r0, sl
 8004c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c3e:	9b04      	ldr	r3, [sp, #16]
 8004c40:	4303      	orrs	r3, r0
 8004c42:	3401      	adds	r4, #1
 8004c44:	9304      	str	r3, [sp, #16]
 8004c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c4a:	4826      	ldr	r0, [pc, #152]	; (8004ce4 <_svfiprintf_r+0x1f0>)
 8004c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c50:	2206      	movs	r2, #6
 8004c52:	f7fb fabd 	bl	80001d0 <memchr>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d038      	beq.n	8004ccc <_svfiprintf_r+0x1d8>
 8004c5a:	4b23      	ldr	r3, [pc, #140]	; (8004ce8 <_svfiprintf_r+0x1f4>)
 8004c5c:	bb1b      	cbnz	r3, 8004ca6 <_svfiprintf_r+0x1b2>
 8004c5e:	9b03      	ldr	r3, [sp, #12]
 8004c60:	3307      	adds	r3, #7
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	3308      	adds	r3, #8
 8004c68:	9303      	str	r3, [sp, #12]
 8004c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6c:	4433      	add	r3, r6
 8004c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c70:	e767      	b.n	8004b42 <_svfiprintf_r+0x4e>
 8004c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c76:	460c      	mov	r4, r1
 8004c78:	2001      	movs	r0, #1
 8004c7a:	e7a5      	b.n	8004bc8 <_svfiprintf_r+0xd4>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	3401      	adds	r4, #1
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	4619      	mov	r1, r3
 8004c84:	f04f 0c0a 	mov.w	ip, #10
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c8e:	3a30      	subs	r2, #48	; 0x30
 8004c90:	2a09      	cmp	r2, #9
 8004c92:	d903      	bls.n	8004c9c <_svfiprintf_r+0x1a8>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0c5      	beq.n	8004c24 <_svfiprintf_r+0x130>
 8004c98:	9105      	str	r1, [sp, #20]
 8004c9a:	e7c3      	b.n	8004c24 <_svfiprintf_r+0x130>
 8004c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e7f0      	b.n	8004c88 <_svfiprintf_r+0x194>
 8004ca6:	ab03      	add	r3, sp, #12
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	462a      	mov	r2, r5
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <_svfiprintf_r+0x1f8>)
 8004cae:	a904      	add	r1, sp, #16
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	f3af 8000 	nop.w
 8004cb6:	1c42      	adds	r2, r0, #1
 8004cb8:	4606      	mov	r6, r0
 8004cba:	d1d6      	bne.n	8004c6a <_svfiprintf_r+0x176>
 8004cbc:	89ab      	ldrh	r3, [r5, #12]
 8004cbe:	065b      	lsls	r3, r3, #25
 8004cc0:	f53f af2c 	bmi.w	8004b1c <_svfiprintf_r+0x28>
 8004cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cc6:	b01d      	add	sp, #116	; 0x74
 8004cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ccc:	ab03      	add	r3, sp, #12
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	462a      	mov	r2, r5
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <_svfiprintf_r+0x1f8>)
 8004cd4:	a904      	add	r1, sp, #16
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f000 f87a 	bl	8004dd0 <_printf_i>
 8004cdc:	e7eb      	b.n	8004cb6 <_svfiprintf_r+0x1c2>
 8004cde:	bf00      	nop
 8004ce0:	08005364 	.word	0x08005364
 8004ce4:	0800536e 	.word	0x0800536e
 8004ce8:	00000000 	.word	0x00000000
 8004cec:	08004a3d 	.word	0x08004a3d
 8004cf0:	0800536a 	.word	0x0800536a

08004cf4 <_printf_common>:
 8004cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	4699      	mov	r9, r3
 8004cfc:	688a      	ldr	r2, [r1, #8]
 8004cfe:	690b      	ldr	r3, [r1, #16]
 8004d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bfb8      	it	lt
 8004d08:	4613      	movlt	r3, r2
 8004d0a:	6033      	str	r3, [r6, #0]
 8004d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d10:	4607      	mov	r7, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	b10a      	cbz	r2, 8004d1a <_printf_common+0x26>
 8004d16:	3301      	adds	r3, #1
 8004d18:	6033      	str	r3, [r6, #0]
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	0699      	lsls	r1, r3, #26
 8004d1e:	bf42      	ittt	mi
 8004d20:	6833      	ldrmi	r3, [r6, #0]
 8004d22:	3302      	addmi	r3, #2
 8004d24:	6033      	strmi	r3, [r6, #0]
 8004d26:	6825      	ldr	r5, [r4, #0]
 8004d28:	f015 0506 	ands.w	r5, r5, #6
 8004d2c:	d106      	bne.n	8004d3c <_printf_common+0x48>
 8004d2e:	f104 0a19 	add.w	sl, r4, #25
 8004d32:	68e3      	ldr	r3, [r4, #12]
 8004d34:	6832      	ldr	r2, [r6, #0]
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	dc26      	bgt.n	8004d8a <_printf_common+0x96>
 8004d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d40:	1e13      	subs	r3, r2, #0
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	bf18      	it	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	0692      	lsls	r2, r2, #26
 8004d4a:	d42b      	bmi.n	8004da4 <_printf_common+0xb0>
 8004d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d50:	4649      	mov	r1, r9
 8004d52:	4638      	mov	r0, r7
 8004d54:	47c0      	blx	r8
 8004d56:	3001      	adds	r0, #1
 8004d58:	d01e      	beq.n	8004d98 <_printf_common+0xa4>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	68e5      	ldr	r5, [r4, #12]
 8004d5e:	6832      	ldr	r2, [r6, #0]
 8004d60:	f003 0306 	and.w	r3, r3, #6
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	bf08      	it	eq
 8004d68:	1aad      	subeq	r5, r5, r2
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	6922      	ldr	r2, [r4, #16]
 8004d6e:	bf0c      	ite	eq
 8004d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d74:	2500      	movne	r5, #0
 8004d76:	4293      	cmp	r3, r2
 8004d78:	bfc4      	itt	gt
 8004d7a:	1a9b      	subgt	r3, r3, r2
 8004d7c:	18ed      	addgt	r5, r5, r3
 8004d7e:	2600      	movs	r6, #0
 8004d80:	341a      	adds	r4, #26
 8004d82:	42b5      	cmp	r5, r6
 8004d84:	d11a      	bne.n	8004dbc <_printf_common+0xc8>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e008      	b.n	8004d9c <_printf_common+0xa8>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4652      	mov	r2, sl
 8004d8e:	4649      	mov	r1, r9
 8004d90:	4638      	mov	r0, r7
 8004d92:	47c0      	blx	r8
 8004d94:	3001      	adds	r0, #1
 8004d96:	d103      	bne.n	8004da0 <_printf_common+0xac>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da0:	3501      	adds	r5, #1
 8004da2:	e7c6      	b.n	8004d32 <_printf_common+0x3e>
 8004da4:	18e1      	adds	r1, r4, r3
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	2030      	movs	r0, #48	; 0x30
 8004daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dae:	4422      	add	r2, r4
 8004db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004db8:	3302      	adds	r3, #2
 8004dba:	e7c7      	b.n	8004d4c <_printf_common+0x58>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	47c0      	blx	r8
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d0e6      	beq.n	8004d98 <_printf_common+0xa4>
 8004dca:	3601      	adds	r6, #1
 8004dcc:	e7d9      	b.n	8004d82 <_printf_common+0x8e>
	...

08004dd0 <_printf_i>:
 8004dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd4:	7e0f      	ldrb	r7, [r1, #24]
 8004dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dd8:	2f78      	cmp	r7, #120	; 0x78
 8004dda:	4691      	mov	r9, r2
 8004ddc:	4680      	mov	r8, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	469a      	mov	sl, r3
 8004de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004de6:	d807      	bhi.n	8004df8 <_printf_i+0x28>
 8004de8:	2f62      	cmp	r7, #98	; 0x62
 8004dea:	d80a      	bhi.n	8004e02 <_printf_i+0x32>
 8004dec:	2f00      	cmp	r7, #0
 8004dee:	f000 80d8 	beq.w	8004fa2 <_printf_i+0x1d2>
 8004df2:	2f58      	cmp	r7, #88	; 0x58
 8004df4:	f000 80a3 	beq.w	8004f3e <_printf_i+0x16e>
 8004df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e00:	e03a      	b.n	8004e78 <_printf_i+0xa8>
 8004e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e06:	2b15      	cmp	r3, #21
 8004e08:	d8f6      	bhi.n	8004df8 <_printf_i+0x28>
 8004e0a:	a101      	add	r1, pc, #4	; (adr r1, 8004e10 <_printf_i+0x40>)
 8004e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e10:	08004e69 	.word	0x08004e69
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004df9 	.word	0x08004df9
 8004e1c:	08004df9 	.word	0x08004df9
 8004e20:	08004df9 	.word	0x08004df9
 8004e24:	08004df9 	.word	0x08004df9
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004df9 	.word	0x08004df9
 8004e30:	08004df9 	.word	0x08004df9
 8004e34:	08004df9 	.word	0x08004df9
 8004e38:	08004df9 	.word	0x08004df9
 8004e3c:	08004f89 	.word	0x08004f89
 8004e40:	08004ead 	.word	0x08004ead
 8004e44:	08004f6b 	.word	0x08004f6b
 8004e48:	08004df9 	.word	0x08004df9
 8004e4c:	08004df9 	.word	0x08004df9
 8004e50:	08004fab 	.word	0x08004fab
 8004e54:	08004df9 	.word	0x08004df9
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004df9 	.word	0x08004df9
 8004e60:	08004df9 	.word	0x08004df9
 8004e64:	08004f73 	.word	0x08004f73
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	1d1a      	adds	r2, r3, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	602a      	str	r2, [r5, #0]
 8004e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0a3      	b.n	8004fc4 <_printf_i+0x1f4>
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	6829      	ldr	r1, [r5, #0]
 8004e80:	0606      	lsls	r6, r0, #24
 8004e82:	f101 0304 	add.w	r3, r1, #4
 8004e86:	d50a      	bpl.n	8004e9e <_printf_i+0xce>
 8004e88:	680e      	ldr	r6, [r1, #0]
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	2e00      	cmp	r6, #0
 8004e8e:	da03      	bge.n	8004e98 <_printf_i+0xc8>
 8004e90:	232d      	movs	r3, #45	; 0x2d
 8004e92:	4276      	negs	r6, r6
 8004e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e98:	485e      	ldr	r0, [pc, #376]	; (8005014 <_printf_i+0x244>)
 8004e9a:	230a      	movs	r3, #10
 8004e9c:	e019      	b.n	8004ed2 <_printf_i+0x102>
 8004e9e:	680e      	ldr	r6, [r1, #0]
 8004ea0:	602b      	str	r3, [r5, #0]
 8004ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ea6:	bf18      	it	ne
 8004ea8:	b236      	sxthne	r6, r6
 8004eaa:	e7ef      	b.n	8004e8c <_printf_i+0xbc>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	1d19      	adds	r1, r3, #4
 8004eb2:	6029      	str	r1, [r5, #0]
 8004eb4:	0601      	lsls	r1, r0, #24
 8004eb6:	d501      	bpl.n	8004ebc <_printf_i+0xec>
 8004eb8:	681e      	ldr	r6, [r3, #0]
 8004eba:	e002      	b.n	8004ec2 <_printf_i+0xf2>
 8004ebc:	0646      	lsls	r6, r0, #25
 8004ebe:	d5fb      	bpl.n	8004eb8 <_printf_i+0xe8>
 8004ec0:	881e      	ldrh	r6, [r3, #0]
 8004ec2:	4854      	ldr	r0, [pc, #336]	; (8005014 <_printf_i+0x244>)
 8004ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2308      	moveq	r3, #8
 8004eca:	230a      	movne	r3, #10
 8004ecc:	2100      	movs	r1, #0
 8004ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ed2:	6865      	ldr	r5, [r4, #4]
 8004ed4:	60a5      	str	r5, [r4, #8]
 8004ed6:	2d00      	cmp	r5, #0
 8004ed8:	bfa2      	ittt	ge
 8004eda:	6821      	ldrge	r1, [r4, #0]
 8004edc:	f021 0104 	bicge.w	r1, r1, #4
 8004ee0:	6021      	strge	r1, [r4, #0]
 8004ee2:	b90e      	cbnz	r6, 8004ee8 <_printf_i+0x118>
 8004ee4:	2d00      	cmp	r5, #0
 8004ee6:	d04d      	beq.n	8004f84 <_printf_i+0x1b4>
 8004ee8:	4615      	mov	r5, r2
 8004eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8004eee:	fb03 6711 	mls	r7, r3, r1, r6
 8004ef2:	5dc7      	ldrb	r7, [r0, r7]
 8004ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ef8:	4637      	mov	r7, r6
 8004efa:	42bb      	cmp	r3, r7
 8004efc:	460e      	mov	r6, r1
 8004efe:	d9f4      	bls.n	8004eea <_printf_i+0x11a>
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d10b      	bne.n	8004f1c <_printf_i+0x14c>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	07de      	lsls	r6, r3, #31
 8004f08:	d508      	bpl.n	8004f1c <_printf_i+0x14c>
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	6861      	ldr	r1, [r4, #4]
 8004f0e:	4299      	cmp	r1, r3
 8004f10:	bfde      	ittt	le
 8004f12:	2330      	movle	r3, #48	; 0x30
 8004f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f1c:	1b52      	subs	r2, r2, r5
 8004f1e:	6122      	str	r2, [r4, #16]
 8004f20:	f8cd a000 	str.w	sl, [sp]
 8004f24:	464b      	mov	r3, r9
 8004f26:	aa03      	add	r2, sp, #12
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f7ff fee2 	bl	8004cf4 <_printf_common>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d14c      	bne.n	8004fce <_printf_i+0x1fe>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	b004      	add	sp, #16
 8004f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3e:	4835      	ldr	r0, [pc, #212]	; (8005014 <_printf_i+0x244>)
 8004f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f44:	6829      	ldr	r1, [r5, #0]
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f4c:	6029      	str	r1, [r5, #0]
 8004f4e:	061d      	lsls	r5, r3, #24
 8004f50:	d514      	bpl.n	8004f7c <_printf_i+0x1ac>
 8004f52:	07df      	lsls	r7, r3, #31
 8004f54:	bf44      	itt	mi
 8004f56:	f043 0320 	orrmi.w	r3, r3, #32
 8004f5a:	6023      	strmi	r3, [r4, #0]
 8004f5c:	b91e      	cbnz	r6, 8004f66 <_printf_i+0x196>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f023 0320 	bic.w	r3, r3, #32
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	2310      	movs	r3, #16
 8004f68:	e7b0      	b.n	8004ecc <_printf_i+0xfc>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	f043 0320 	orr.w	r3, r3, #32
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	2378      	movs	r3, #120	; 0x78
 8004f74:	4828      	ldr	r0, [pc, #160]	; (8005018 <_printf_i+0x248>)
 8004f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f7a:	e7e3      	b.n	8004f44 <_printf_i+0x174>
 8004f7c:	0659      	lsls	r1, r3, #25
 8004f7e:	bf48      	it	mi
 8004f80:	b2b6      	uxthmi	r6, r6
 8004f82:	e7e6      	b.n	8004f52 <_printf_i+0x182>
 8004f84:	4615      	mov	r5, r2
 8004f86:	e7bb      	b.n	8004f00 <_printf_i+0x130>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	6826      	ldr	r6, [r4, #0]
 8004f8c:	6961      	ldr	r1, [r4, #20]
 8004f8e:	1d18      	adds	r0, r3, #4
 8004f90:	6028      	str	r0, [r5, #0]
 8004f92:	0635      	lsls	r5, r6, #24
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	d501      	bpl.n	8004f9c <_printf_i+0x1cc>
 8004f98:	6019      	str	r1, [r3, #0]
 8004f9a:	e002      	b.n	8004fa2 <_printf_i+0x1d2>
 8004f9c:	0670      	lsls	r0, r6, #25
 8004f9e:	d5fb      	bpl.n	8004f98 <_printf_i+0x1c8>
 8004fa0:	8019      	strh	r1, [r3, #0]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	6123      	str	r3, [r4, #16]
 8004fa6:	4615      	mov	r5, r2
 8004fa8:	e7ba      	b.n	8004f20 <_printf_i+0x150>
 8004faa:	682b      	ldr	r3, [r5, #0]
 8004fac:	1d1a      	adds	r2, r3, #4
 8004fae:	602a      	str	r2, [r5, #0]
 8004fb0:	681d      	ldr	r5, [r3, #0]
 8004fb2:	6862      	ldr	r2, [r4, #4]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f7fb f90a 	bl	80001d0 <memchr>
 8004fbc:	b108      	cbz	r0, 8004fc2 <_printf_i+0x1f2>
 8004fbe:	1b40      	subs	r0, r0, r5
 8004fc0:	6060      	str	r0, [r4, #4]
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	6123      	str	r3, [r4, #16]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fcc:	e7a8      	b.n	8004f20 <_printf_i+0x150>
 8004fce:	6923      	ldr	r3, [r4, #16]
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	47d0      	blx	sl
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d0ab      	beq.n	8004f34 <_printf_i+0x164>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	079b      	lsls	r3, r3, #30
 8004fe0:	d413      	bmi.n	800500a <_printf_i+0x23a>
 8004fe2:	68e0      	ldr	r0, [r4, #12]
 8004fe4:	9b03      	ldr	r3, [sp, #12]
 8004fe6:	4298      	cmp	r0, r3
 8004fe8:	bfb8      	it	lt
 8004fea:	4618      	movlt	r0, r3
 8004fec:	e7a4      	b.n	8004f38 <_printf_i+0x168>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	4632      	mov	r2, r6
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	4640      	mov	r0, r8
 8004ff6:	47d0      	blx	sl
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d09b      	beq.n	8004f34 <_printf_i+0x164>
 8004ffc:	3501      	adds	r5, #1
 8004ffe:	68e3      	ldr	r3, [r4, #12]
 8005000:	9903      	ldr	r1, [sp, #12]
 8005002:	1a5b      	subs	r3, r3, r1
 8005004:	42ab      	cmp	r3, r5
 8005006:	dcf2      	bgt.n	8004fee <_printf_i+0x21e>
 8005008:	e7eb      	b.n	8004fe2 <_printf_i+0x212>
 800500a:	2500      	movs	r5, #0
 800500c:	f104 0619 	add.w	r6, r4, #25
 8005010:	e7f5      	b.n	8004ffe <_printf_i+0x22e>
 8005012:	bf00      	nop
 8005014:	08005375 	.word	0x08005375
 8005018:	08005386 	.word	0x08005386

0800501c <memmove>:
 800501c:	4288      	cmp	r0, r1
 800501e:	b510      	push	{r4, lr}
 8005020:	eb01 0402 	add.w	r4, r1, r2
 8005024:	d902      	bls.n	800502c <memmove+0x10>
 8005026:	4284      	cmp	r4, r0
 8005028:	4623      	mov	r3, r4
 800502a:	d807      	bhi.n	800503c <memmove+0x20>
 800502c:	1e43      	subs	r3, r0, #1
 800502e:	42a1      	cmp	r1, r4
 8005030:	d008      	beq.n	8005044 <memmove+0x28>
 8005032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800503a:	e7f8      	b.n	800502e <memmove+0x12>
 800503c:	4402      	add	r2, r0
 800503e:	4601      	mov	r1, r0
 8005040:	428a      	cmp	r2, r1
 8005042:	d100      	bne.n	8005046 <memmove+0x2a>
 8005044:	bd10      	pop	{r4, pc}
 8005046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800504a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800504e:	e7f7      	b.n	8005040 <memmove+0x24>

08005050 <_free_r>:
 8005050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005052:	2900      	cmp	r1, #0
 8005054:	d044      	beq.n	80050e0 <_free_r+0x90>
 8005056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f1a1 0404 	sub.w	r4, r1, #4
 8005062:	bfb8      	it	lt
 8005064:	18e4      	addlt	r4, r4, r3
 8005066:	f000 f913 	bl	8005290 <__malloc_lock>
 800506a:	4a1e      	ldr	r2, [pc, #120]	; (80050e4 <_free_r+0x94>)
 800506c:	9801      	ldr	r0, [sp, #4]
 800506e:	6813      	ldr	r3, [r2, #0]
 8005070:	b933      	cbnz	r3, 8005080 <_free_r+0x30>
 8005072:	6063      	str	r3, [r4, #4]
 8005074:	6014      	str	r4, [r2, #0]
 8005076:	b003      	add	sp, #12
 8005078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800507c:	f000 b90e 	b.w	800529c <__malloc_unlock>
 8005080:	42a3      	cmp	r3, r4
 8005082:	d908      	bls.n	8005096 <_free_r+0x46>
 8005084:	6825      	ldr	r5, [r4, #0]
 8005086:	1961      	adds	r1, r4, r5
 8005088:	428b      	cmp	r3, r1
 800508a:	bf01      	itttt	eq
 800508c:	6819      	ldreq	r1, [r3, #0]
 800508e:	685b      	ldreq	r3, [r3, #4]
 8005090:	1949      	addeq	r1, r1, r5
 8005092:	6021      	streq	r1, [r4, #0]
 8005094:	e7ed      	b.n	8005072 <_free_r+0x22>
 8005096:	461a      	mov	r2, r3
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	b10b      	cbz	r3, 80050a0 <_free_r+0x50>
 800509c:	42a3      	cmp	r3, r4
 800509e:	d9fa      	bls.n	8005096 <_free_r+0x46>
 80050a0:	6811      	ldr	r1, [r2, #0]
 80050a2:	1855      	adds	r5, r2, r1
 80050a4:	42a5      	cmp	r5, r4
 80050a6:	d10b      	bne.n	80050c0 <_free_r+0x70>
 80050a8:	6824      	ldr	r4, [r4, #0]
 80050aa:	4421      	add	r1, r4
 80050ac:	1854      	adds	r4, r2, r1
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	6011      	str	r1, [r2, #0]
 80050b2:	d1e0      	bne.n	8005076 <_free_r+0x26>
 80050b4:	681c      	ldr	r4, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	6053      	str	r3, [r2, #4]
 80050ba:	4421      	add	r1, r4
 80050bc:	6011      	str	r1, [r2, #0]
 80050be:	e7da      	b.n	8005076 <_free_r+0x26>
 80050c0:	d902      	bls.n	80050c8 <_free_r+0x78>
 80050c2:	230c      	movs	r3, #12
 80050c4:	6003      	str	r3, [r0, #0]
 80050c6:	e7d6      	b.n	8005076 <_free_r+0x26>
 80050c8:	6825      	ldr	r5, [r4, #0]
 80050ca:	1961      	adds	r1, r4, r5
 80050cc:	428b      	cmp	r3, r1
 80050ce:	bf04      	itt	eq
 80050d0:	6819      	ldreq	r1, [r3, #0]
 80050d2:	685b      	ldreq	r3, [r3, #4]
 80050d4:	6063      	str	r3, [r4, #4]
 80050d6:	bf04      	itt	eq
 80050d8:	1949      	addeq	r1, r1, r5
 80050da:	6021      	streq	r1, [r4, #0]
 80050dc:	6054      	str	r4, [r2, #4]
 80050de:	e7ca      	b.n	8005076 <_free_r+0x26>
 80050e0:	b003      	add	sp, #12
 80050e2:	bd30      	pop	{r4, r5, pc}
 80050e4:	20004104 	.word	0x20004104

080050e8 <sbrk_aligned>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	4e0e      	ldr	r6, [pc, #56]	; (8005124 <sbrk_aligned+0x3c>)
 80050ec:	460c      	mov	r4, r1
 80050ee:	6831      	ldr	r1, [r6, #0]
 80050f0:	4605      	mov	r5, r0
 80050f2:	b911      	cbnz	r1, 80050fa <sbrk_aligned+0x12>
 80050f4:	f000 f8bc 	bl	8005270 <_sbrk_r>
 80050f8:	6030      	str	r0, [r6, #0]
 80050fa:	4621      	mov	r1, r4
 80050fc:	4628      	mov	r0, r5
 80050fe:	f000 f8b7 	bl	8005270 <_sbrk_r>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	d00a      	beq.n	800511c <sbrk_aligned+0x34>
 8005106:	1cc4      	adds	r4, r0, #3
 8005108:	f024 0403 	bic.w	r4, r4, #3
 800510c:	42a0      	cmp	r0, r4
 800510e:	d007      	beq.n	8005120 <sbrk_aligned+0x38>
 8005110:	1a21      	subs	r1, r4, r0
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f8ac 	bl	8005270 <_sbrk_r>
 8005118:	3001      	adds	r0, #1
 800511a:	d101      	bne.n	8005120 <sbrk_aligned+0x38>
 800511c:	f04f 34ff 	mov.w	r4, #4294967295
 8005120:	4620      	mov	r0, r4
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	20004108 	.word	0x20004108

08005128 <_malloc_r>:
 8005128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512c:	1ccd      	adds	r5, r1, #3
 800512e:	f025 0503 	bic.w	r5, r5, #3
 8005132:	3508      	adds	r5, #8
 8005134:	2d0c      	cmp	r5, #12
 8005136:	bf38      	it	cc
 8005138:	250c      	movcc	r5, #12
 800513a:	2d00      	cmp	r5, #0
 800513c:	4607      	mov	r7, r0
 800513e:	db01      	blt.n	8005144 <_malloc_r+0x1c>
 8005140:	42a9      	cmp	r1, r5
 8005142:	d905      	bls.n	8005150 <_malloc_r+0x28>
 8005144:	230c      	movs	r3, #12
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	2600      	movs	r6, #0
 800514a:	4630      	mov	r0, r6
 800514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005150:	4e2e      	ldr	r6, [pc, #184]	; (800520c <_malloc_r+0xe4>)
 8005152:	f000 f89d 	bl	8005290 <__malloc_lock>
 8005156:	6833      	ldr	r3, [r6, #0]
 8005158:	461c      	mov	r4, r3
 800515a:	bb34      	cbnz	r4, 80051aa <_malloc_r+0x82>
 800515c:	4629      	mov	r1, r5
 800515e:	4638      	mov	r0, r7
 8005160:	f7ff ffc2 	bl	80050e8 <sbrk_aligned>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	4604      	mov	r4, r0
 8005168:	d14d      	bne.n	8005206 <_malloc_r+0xde>
 800516a:	6834      	ldr	r4, [r6, #0]
 800516c:	4626      	mov	r6, r4
 800516e:	2e00      	cmp	r6, #0
 8005170:	d140      	bne.n	80051f4 <_malloc_r+0xcc>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	4631      	mov	r1, r6
 8005176:	4638      	mov	r0, r7
 8005178:	eb04 0803 	add.w	r8, r4, r3
 800517c:	f000 f878 	bl	8005270 <_sbrk_r>
 8005180:	4580      	cmp	r8, r0
 8005182:	d13a      	bne.n	80051fa <_malloc_r+0xd2>
 8005184:	6821      	ldr	r1, [r4, #0]
 8005186:	3503      	adds	r5, #3
 8005188:	1a6d      	subs	r5, r5, r1
 800518a:	f025 0503 	bic.w	r5, r5, #3
 800518e:	3508      	adds	r5, #8
 8005190:	2d0c      	cmp	r5, #12
 8005192:	bf38      	it	cc
 8005194:	250c      	movcc	r5, #12
 8005196:	4629      	mov	r1, r5
 8005198:	4638      	mov	r0, r7
 800519a:	f7ff ffa5 	bl	80050e8 <sbrk_aligned>
 800519e:	3001      	adds	r0, #1
 80051a0:	d02b      	beq.n	80051fa <_malloc_r+0xd2>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	442b      	add	r3, r5
 80051a6:	6023      	str	r3, [r4, #0]
 80051a8:	e00e      	b.n	80051c8 <_malloc_r+0xa0>
 80051aa:	6822      	ldr	r2, [r4, #0]
 80051ac:	1b52      	subs	r2, r2, r5
 80051ae:	d41e      	bmi.n	80051ee <_malloc_r+0xc6>
 80051b0:	2a0b      	cmp	r2, #11
 80051b2:	d916      	bls.n	80051e2 <_malloc_r+0xba>
 80051b4:	1961      	adds	r1, r4, r5
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	6025      	str	r5, [r4, #0]
 80051ba:	bf18      	it	ne
 80051bc:	6059      	strne	r1, [r3, #4]
 80051be:	6863      	ldr	r3, [r4, #4]
 80051c0:	bf08      	it	eq
 80051c2:	6031      	streq	r1, [r6, #0]
 80051c4:	5162      	str	r2, [r4, r5]
 80051c6:	604b      	str	r3, [r1, #4]
 80051c8:	4638      	mov	r0, r7
 80051ca:	f104 060b 	add.w	r6, r4, #11
 80051ce:	f000 f865 	bl	800529c <__malloc_unlock>
 80051d2:	f026 0607 	bic.w	r6, r6, #7
 80051d6:	1d23      	adds	r3, r4, #4
 80051d8:	1af2      	subs	r2, r6, r3
 80051da:	d0b6      	beq.n	800514a <_malloc_r+0x22>
 80051dc:	1b9b      	subs	r3, r3, r6
 80051de:	50a3      	str	r3, [r4, r2]
 80051e0:	e7b3      	b.n	800514a <_malloc_r+0x22>
 80051e2:	6862      	ldr	r2, [r4, #4]
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	bf0c      	ite	eq
 80051e8:	6032      	streq	r2, [r6, #0]
 80051ea:	605a      	strne	r2, [r3, #4]
 80051ec:	e7ec      	b.n	80051c8 <_malloc_r+0xa0>
 80051ee:	4623      	mov	r3, r4
 80051f0:	6864      	ldr	r4, [r4, #4]
 80051f2:	e7b2      	b.n	800515a <_malloc_r+0x32>
 80051f4:	4634      	mov	r4, r6
 80051f6:	6876      	ldr	r6, [r6, #4]
 80051f8:	e7b9      	b.n	800516e <_malloc_r+0x46>
 80051fa:	230c      	movs	r3, #12
 80051fc:	603b      	str	r3, [r7, #0]
 80051fe:	4638      	mov	r0, r7
 8005200:	f000 f84c 	bl	800529c <__malloc_unlock>
 8005204:	e7a1      	b.n	800514a <_malloc_r+0x22>
 8005206:	6025      	str	r5, [r4, #0]
 8005208:	e7de      	b.n	80051c8 <_malloc_r+0xa0>
 800520a:	bf00      	nop
 800520c:	20004104 	.word	0x20004104

08005210 <_realloc_r>:
 8005210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005214:	4680      	mov	r8, r0
 8005216:	4614      	mov	r4, r2
 8005218:	460e      	mov	r6, r1
 800521a:	b921      	cbnz	r1, 8005226 <_realloc_r+0x16>
 800521c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005220:	4611      	mov	r1, r2
 8005222:	f7ff bf81 	b.w	8005128 <_malloc_r>
 8005226:	b92a      	cbnz	r2, 8005234 <_realloc_r+0x24>
 8005228:	f7ff ff12 	bl	8005050 <_free_r>
 800522c:	4625      	mov	r5, r4
 800522e:	4628      	mov	r0, r5
 8005230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005234:	f000 f838 	bl	80052a8 <_malloc_usable_size_r>
 8005238:	4284      	cmp	r4, r0
 800523a:	4607      	mov	r7, r0
 800523c:	d802      	bhi.n	8005244 <_realloc_r+0x34>
 800523e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005242:	d812      	bhi.n	800526a <_realloc_r+0x5a>
 8005244:	4621      	mov	r1, r4
 8005246:	4640      	mov	r0, r8
 8005248:	f7ff ff6e 	bl	8005128 <_malloc_r>
 800524c:	4605      	mov	r5, r0
 800524e:	2800      	cmp	r0, #0
 8005250:	d0ed      	beq.n	800522e <_realloc_r+0x1e>
 8005252:	42bc      	cmp	r4, r7
 8005254:	4622      	mov	r2, r4
 8005256:	4631      	mov	r1, r6
 8005258:	bf28      	it	cs
 800525a:	463a      	movcs	r2, r7
 800525c:	f7ff fbb8 	bl	80049d0 <memcpy>
 8005260:	4631      	mov	r1, r6
 8005262:	4640      	mov	r0, r8
 8005264:	f7ff fef4 	bl	8005050 <_free_r>
 8005268:	e7e1      	b.n	800522e <_realloc_r+0x1e>
 800526a:	4635      	mov	r5, r6
 800526c:	e7df      	b.n	800522e <_realloc_r+0x1e>
	...

08005270 <_sbrk_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d06      	ldr	r5, [pc, #24]	; (800528c <_sbrk_r+0x1c>)
 8005274:	2300      	movs	r3, #0
 8005276:	4604      	mov	r4, r0
 8005278:	4608      	mov	r0, r1
 800527a:	602b      	str	r3, [r5, #0]
 800527c:	f7fb fcbe 	bl	8000bfc <_sbrk>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d102      	bne.n	800528a <_sbrk_r+0x1a>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	b103      	cbz	r3, 800528a <_sbrk_r+0x1a>
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	bd38      	pop	{r3, r4, r5, pc}
 800528c:	2000410c 	.word	0x2000410c

08005290 <__malloc_lock>:
 8005290:	4801      	ldr	r0, [pc, #4]	; (8005298 <__malloc_lock+0x8>)
 8005292:	f000 b811 	b.w	80052b8 <__retarget_lock_acquire_recursive>
 8005296:	bf00      	nop
 8005298:	20004110 	.word	0x20004110

0800529c <__malloc_unlock>:
 800529c:	4801      	ldr	r0, [pc, #4]	; (80052a4 <__malloc_unlock+0x8>)
 800529e:	f000 b80c 	b.w	80052ba <__retarget_lock_release_recursive>
 80052a2:	bf00      	nop
 80052a4:	20004110 	.word	0x20004110

080052a8 <_malloc_usable_size_r>:
 80052a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ac:	1f18      	subs	r0, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfbc      	itt	lt
 80052b2:	580b      	ldrlt	r3, [r1, r0]
 80052b4:	18c0      	addlt	r0, r0, r3
 80052b6:	4770      	bx	lr

080052b8 <__retarget_lock_acquire_recursive>:
 80052b8:	4770      	bx	lr

080052ba <__retarget_lock_release_recursive>:
 80052ba:	4770      	bx	lr

080052bc <_init>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	bf00      	nop
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr

080052c8 <_fini>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr
