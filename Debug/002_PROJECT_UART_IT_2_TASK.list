
002_PROJECT_UART_IT_2_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f68  08004f68  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f70  08004f70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000040a4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004118  20004118  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012afd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aa1  00000000  00000000  00032ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00035648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  00036740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ce6  00000000  00000000  00037720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fde  00000000  00000000  0005a406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3bb6  00000000  00000000  0006d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140f9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a60  00000000  00000000  00140fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e8c 	.word	0x08004e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004e8c 	.word	0x08004e8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000090 	.word	0x20000090
 80005a4:	200000e4 	.word	0x200000e4

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b08e      	sub	sp, #56	; 0x38
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fb09 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f833 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8c5 	bl	8000744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f899 	bl	80006f0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <main+0x64>)
 80005c0:	f107 041c 	add.w	r4, r7, #28
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fd8c 	bl	80030f6 <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <main+0x68>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0x6c>)
 80005e6:	463c      	mov	r4, r7
 80005e8:	461d      	mov	r5, r3
 80005ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fd7b 	bl	80030f6 <osThreadCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <main+0x70>)
 8000604:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000606:	f002 fd6f 	bl	80030e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	e7fe      	b.n	800060a <main+0x62>
 800060c:	08004eb4 	.word	0x08004eb4
 8000610:	20000328 	.word	0x20000328
 8000614:	08004ed0 	.word	0x08004ed0
 8000618:	2000032c 	.word	0x2000032c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 ffc6 	bl	80045bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fe39 	bl	8001318 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f8f8 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f89a 	bl	8001808 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f8e1 	bl	80008a0 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f001 fd6e 	bl	8002208 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f8b5 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200002e4 	.word	0x200002e4
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_GPIO_Init+0x9c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0x9c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_GPIO_Init+0x9c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x9c>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x9c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0xa0>)
 80007b6:	f000 fd7b 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0xa0>)
 80007d4:	f000 fbd0 	bl	8000f78 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020c00 	.word	0x40020c00

080007e8 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task01 Work ! \r\n"));		// TASK01 USART Transmit and Cooperative Multitasking test.
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <StartTask01+0x3c>)
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <StartTask01+0x40>)
 80007f4:	f003 feea 	bl	80045cc <siprintf>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	461a      	mov	r2, r3
 80007fe:	490a      	ldr	r1, [pc, #40]	; (8000828 <StartTask01+0x40>)
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <StartTask01+0x44>)
 8000802:	f001 fd4e 	bl	80022a2 <HAL_UART_Transmit_IT>
	  osDelay(1000);
 8000806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080a:	f002 fcc0 	bl	800318e <osDelay>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800080e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <StartTask01+0x48>)
 8000814:	f000 fd65 	bl	80012e2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081c:	f000 fa14 	bl	8000c48 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task01 Work ! \r\n"));		// TASK01 USART Transmit and Cooperative Multitasking test.
 8000820:	e7e6      	b.n	80007f0 <StartTask01+0x8>
 8000822:	bf00      	nop
 8000824:	08004eec 	.word	0x08004eec
 8000828:	20000330 	.word	0x20000330
 800082c:	200002e4 	.word	0x200002e4
 8000830:	40020c00 	.word	0x40020c00

08000834 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task02 Work ! \r\n"));		// TASK02 USART Transmit and Cooperative Multitasking test.
 800083c:	490b      	ldr	r1, [pc, #44]	; (800086c <StartTask02+0x38>)
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <StartTask02+0x3c>)
 8000840:	f003 fec4 	bl	80045cc <siprintf>
 8000844:	4603      	mov	r3, r0
 8000846:	b29b      	uxth	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	4909      	ldr	r1, [pc, #36]	; (8000870 <StartTask02+0x3c>)
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <StartTask02+0x40>)
 800084e:	f001 fd28 	bl	80022a2 <HAL_UART_Transmit_IT>
	  osDelay(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000856:	f002 fc9a 	bl	800318e <osDelay>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <StartTask02+0x44>)
 8000860:	f000 fd3f 	bl	80012e2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f000 f9ef 	bl	8000c48 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task02 Work ! \r\n"));		// TASK02 USART Transmit and Cooperative Multitasking test.
 800086a:	e7e7      	b.n	800083c <StartTask02+0x8>
 800086c:	08004f00 	.word	0x08004f00
 8000870:	20000330 	.word	0x20000330
 8000874:	200002e4 	.word	0x200002e4
 8000878:	40020c00 	.word	0x40020c00

0800087c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d101      	bne.n	8000892 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800088e:	f000 f9bb 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40010000 	.word	0x40010000

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_MspInit+0x54>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <HAL_MspInit+0x54>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	; 0x44
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_MspInit+0x54>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_MspInit+0x54>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_MspInit+0x54>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_MspInit+0x54>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	210f      	movs	r1, #15
 80008ee:	f06f 0001 	mvn.w	r0, #1
 80008f2:	f000 fa85 	bl	8000e00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1d      	ldr	r2, [pc, #116]	; (8000998 <HAL_UART_MspInit+0x94>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d133      	bne.n	800098e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_UART_MspInit+0x98>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <HAL_UART_MspInit+0x98>)
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_UART_MspInit+0x98>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_UART_MspInit+0x98>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <HAL_UART_MspInit+0x98>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_UART_MspInit+0x98>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800095e:	230c      	movs	r3, #12
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096e:	2307      	movs	r3, #7
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <HAL_UART_MspInit+0x9c>)
 800097a:	f000 fafd 	bl	8000f78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	2026      	movs	r0, #38	; 0x26
 8000984:	f000 fa3c 	bl	8000e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000988:	2026      	movs	r0, #38	; 0x26
 800098a:	f000 fa55 	bl	8000e38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40004400 	.word	0x40004400
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000

080009a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <HAL_InitTick+0xd4>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009bc:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <HAL_InitTick+0xd4>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6453      	str	r3, [r2, #68]	; 0x44
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <HAL_InitTick+0xd4>)
 80009c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d0:	f107 020c 	add.w	r2, r7, #12
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f934 	bl	8001c48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009e0:	f001 f91e 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 80009e4:	4603      	mov	r3, r0
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ec:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <HAL_InitTick+0xd8>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0c9b      	lsrs	r3, r3, #18
 80009f4:	3b01      	subs	r3, #1
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <HAL_InitTick+0xdc>)
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_InitTick+0xe0>)
 80009fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_InitTick+0xdc>)
 8000a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <HAL_InitTick+0xdc>)
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_InitTick+0xdc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_InitTick+0xdc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_InitTick+0xdc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a1e:	4818      	ldr	r0, [pc, #96]	; (8000a80 <HAL_InitTick+0xdc>)
 8000a20:	f001 f944 	bl	8001cac <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d11b      	bne.n	8000a6a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <HAL_InitTick+0xdc>)
 8000a34:	f001 f994 	bl	8001d60 <HAL_TIM_Base_Start_IT>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d111      	bne.n	8000a6a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a46:	2019      	movs	r0, #25
 8000a48:	f000 f9f6 	bl	8000e38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b0f      	cmp	r3, #15
 8000a50:	d808      	bhi.n	8000a64 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a52:	2200      	movs	r2, #0
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	2019      	movs	r0, #25
 8000a58:	f000 f9d2 	bl	8000e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_InitTick+0xe4>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
 8000a62:	e002      	b.n	8000a6a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	431bde83 	.word	0x431bde83
 8000a80:	20000364 	.word	0x20000364
 8000a84:	40010000 	.word	0x40010000
 8000a88:	20000004 	.word	0x20000004

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000abe:	f001 f9bf 	bl	8001e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000364 	.word	0x20000364

08000acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <USART2_IRQHandler+0x10>)
 8000ad2:	f001 fc2b 	bl	800232c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200002e4 	.word	0x200002e4

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f003 fd1c 	bl	800454c <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20020000 	.word	0x20020000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	200003ac 	.word	0x200003ac
 8000b48:	20004118 	.word	0x20004118

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9a:	f7ff ffd7 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f003 fcdb 	bl	8004558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fd01 	bl	80005a8 <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bb4:	08004f78 	.word	0x08004f78
  ldr r2, =_sbss
 8000bb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bbc:	20004118 	.word	0x20004118

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f8fc 	bl	8000dea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f7ff fed6 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe58 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200003b0 	.word	0x200003b0

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200003b0 	.word	0x200003b0

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff ffee 	bl	8000c30 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_Delay+0x44>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffde 	bl	8000c30 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <__NVIC_EnableIRQ+0x38>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	; (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	; (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff4c 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e12:	f7ff ff61 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	6978      	ldr	r0, [r7, #20]
 8000e1e:	f7ff ffb1 	bl	8000d84 <NVIC_EncodePriority>
 8000e22:	4602      	mov	r2, r0
 8000e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff80 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff54 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e62:	f7ff fee5 	bl	8000c30 <HAL_GetTick>
 8000e66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d008      	beq.n	8000e86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e052      	b.n	8000f2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0216 	bic.w	r2, r2, #22
 8000e94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	695a      	ldr	r2, [r3, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <HAL_DMA_Abort+0x62>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0208 	bic.w	r2, r2, #8
 8000ec4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed6:	e013      	b.n	8000f00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ed8:	f7ff feaa 	bl	8000c30 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	d90c      	bls.n	8000f00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2220      	movs	r2, #32
 8000eea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2203      	movs	r2, #3
 8000ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e015      	b.n	8000f2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1e4      	bne.n	8000ed8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f12:	223f      	movs	r2, #63	; 0x3f
 8000f14:	409a      	lsls	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d004      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00c      	b.n	8000f6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2205      	movs	r2, #5
 8000f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0201 	bic.w	r2, r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e16b      	b.n	800126c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 815a 	bne.w	8001266 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d005      	beq.n	8000fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80b4 	beq.w	8001266 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b60      	ldr	r3, [pc, #384]	; (8001284 <HAL_GPIO_Init+0x30c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a5f      	ldr	r2, [pc, #380]	; (8001284 <HAL_GPIO_Init+0x30c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <HAL_GPIO_Init+0x30c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111a:	4a5b      	ldr	r2, [pc, #364]	; (8001288 <HAL_GPIO_Init+0x310>)
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <HAL_GPIO_Init+0x314>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d02b      	beq.n	800119e <HAL_GPIO_Init+0x226>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a51      	ldr	r2, [pc, #324]	; (8001290 <HAL_GPIO_Init+0x318>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d025      	beq.n	800119a <HAL_GPIO_Init+0x222>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a50      	ldr	r2, [pc, #320]	; (8001294 <HAL_GPIO_Init+0x31c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01f      	beq.n	8001196 <HAL_GPIO_Init+0x21e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4f      	ldr	r2, [pc, #316]	; (8001298 <HAL_GPIO_Init+0x320>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x21a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4e      	ldr	r2, [pc, #312]	; (800129c <HAL_GPIO_Init+0x324>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x216>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <HAL_GPIO_Init+0x328>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x212>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4c      	ldr	r2, [pc, #304]	; (80012a4 <HAL_GPIO_Init+0x32c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x20e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_GPIO_Init+0x330>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x20a>
 800117e:	2307      	movs	r3, #7
 8001180:	e00e      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 8001182:	2308      	movs	r3, #8
 8001184:	e00c      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 8001186:	2306      	movs	r3, #6
 8001188:	e00a      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 800118a:	2305      	movs	r3, #5
 800118c:	e008      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 800118e:	2304      	movs	r3, #4
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 8001192:	2303      	movs	r3, #3
 8001194:	e004      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 8001196:	2302      	movs	r3, #2
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 800119e:	2300      	movs	r3, #0
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	f002 0203 	and.w	r2, r2, #3
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	4093      	lsls	r3, r2
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b0:	4935      	ldr	r1, [pc, #212]	; (8001288 <HAL_GPIO_Init+0x310>)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <HAL_GPIO_Init+0x334>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e2:	4a32      	ldr	r2, [pc, #200]	; (80012ac <HAL_GPIO_Init+0x334>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e8:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_GPIO_Init+0x334>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800120c:	4a27      	ldr	r2, [pc, #156]	; (80012ac <HAL_GPIO_Init+0x334>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_GPIO_Init+0x334>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_GPIO_Init+0x334>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_GPIO_Init+0x334>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <HAL_GPIO_Init+0x334>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	f67f ae90 	bls.w	8000f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40021000 	.word	0x40021000
 80012a0:	40021400 	.word	0x40021400
 80012a4:	40021800 	.word	0x40021800
 80012a8:	40021c00 	.word	0x40021c00
 80012ac:	40013c00 	.word	0x40013c00

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f4:	887a      	ldrh	r2, [r7, #2]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4013      	ands	r3, r2
 80012fa:	041a      	lsls	r2, r3, #16
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43d9      	mvns	r1, r3
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	400b      	ands	r3, r1
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e267      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d075      	beq.n	8001422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001336:	4b88      	ldr	r3, [pc, #544]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b04      	cmp	r3, #4
 8001340:	d00c      	beq.n	800135c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001342:	4b85      	ldr	r3, [pc, #532]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134a:	2b08      	cmp	r3, #8
 800134c:	d112      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134e:	4b82      	ldr	r3, [pc, #520]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800135a:	d10b      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	4b7e      	ldr	r3, [pc, #504]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d05b      	beq.n	8001420 <HAL_RCC_OscConfig+0x108>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d157      	bne.n	8001420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e242      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137c:	d106      	bne.n	800138c <HAL_RCC_OscConfig+0x74>
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a75      	ldr	r2, [pc, #468]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x98>
 8001396:	4b70      	ldr	r3, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6f      	ldr	r2, [pc, #444]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6c      	ldr	r2, [pc, #432]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 80013b0:	4b69      	ldr	r3, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a68      	ldr	r2, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b66      	ldr	r3, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a65      	ldr	r2, [pc, #404]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc2e 	bl	8000c30 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc2a 	bl	8000c30 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e207      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b5b      	ldr	r3, [pc, #364]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xc0>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc1a 	bl	8000c30 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fc16 	bl	8000c30 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1f3      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b51      	ldr	r3, [pc, #324]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0xe8>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800142e:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143a:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1c7      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4937      	ldr	r1, [pc, #220]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e03a      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_RCC_OscConfig+0x244>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fbcf 	bl	8000c30 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fbcb 	bl	8000c30 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1a8      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4925      	ldr	r1, [pc, #148]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e015      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_OscConfig+0x244>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fbae 	bl	8000c30 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fbaa 	bl	8000c30 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e187      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d036      	beq.n	8001570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d016      	beq.n	8001538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_RCC_OscConfig+0x248>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fb8e 	bl	8000c30 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fb8a 	bl	8000c30 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e167      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800152c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x200>
 8001536:	e01b      	b.n	8001570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_OscConfig+0x248>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb77 	bl	8000c30 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	e00e      	b.n	8001564 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff fb73 	bl	8000c30 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d907      	bls.n	8001564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e150      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	42470000 	.word	0x42470000
 8001560:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ea      	bne.n	8001546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8097 	beq.w	80016ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b7d      	ldr	r3, [pc, #500]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a7c      	ldr	r2, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015aa:	2301      	movs	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b77      	ldr	r3, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d118      	bne.n	80015ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ba:	4b74      	ldr	r3, [pc, #464]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a73      	ldr	r2, [pc, #460]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fb33 	bl	8000c30 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ce:	f7ff fb2f 	bl	8000c30 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e10c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x2ea>
 80015f4:	4b64      	ldr	r3, [pc, #400]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a63      	ldr	r2, [pc, #396]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	e01c      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x30c>
 800160a:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	4a5e      	ldr	r2, [pc, #376]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6713      	str	r3, [r2, #112]	; 0x70
 8001616:	4b5c      	ldr	r3, [pc, #368]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161a:	4a5b      	ldr	r2, [pc, #364]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6713      	str	r3, [r2, #112]	; 0x70
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001624:	4b58      	ldr	r3, [pc, #352]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	4a57      	ldr	r2, [pc, #348]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6713      	str	r3, [r2, #112]	; 0x70
 8001630:	4b55      	ldr	r3, [pc, #340]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	4a54      	ldr	r2, [pc, #336]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d015      	beq.n	8001670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff faf4 	bl	8000c30 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff faf0 	bl	8000c30 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0cb      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	4b49      	ldr	r3, [pc, #292]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0ee      	beq.n	800164c <HAL_RCC_OscConfig+0x334>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff fade 	bl	8000c30 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff fada 	bl	8000c30 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0b5      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ee      	bne.n	8001678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a38      	ldr	r2, [pc, #224]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80a1 	beq.w	80017f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d05c      	beq.n	800177c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d141      	bne.n	800174e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_RCC_OscConfig+0x478>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff faae 	bl	8000c30 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff faaa 	bl	8000c30 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e087      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	3b01      	subs	r3, #1
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	491b      	ldr	r1, [pc, #108]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x478>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fa83 	bl	8000c30 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fa7f 	bl	8000c30 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e05c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x416>
 800174c:	e054      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fa6c 	bl	8000c30 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fa68 	bl	8000c30 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e045      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x444>
 800177a:	e03d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e038      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
 8001790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_RCC_OscConfig+0x4ec>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d028      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d121      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d11a      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c4:	4013      	ands	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d111      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	3b01      	subs	r3, #1
 80017de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0cc      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d90c      	bls.n	8001844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0b8      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800187e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	494d      	ldr	r1, [pc, #308]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d044      	beq.n	8001928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e067      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4934      	ldr	r1, [pc, #208]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f8:	f7ff f99a 	bl	8000c30 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff f996 	bl	8000c30 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e04f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d20c      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e032      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4916      	ldr	r1, [pc, #88]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198e:	f000 f821 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001992:	4602      	mov	r2, r0
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	490a      	ldr	r1, [pc, #40]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fff8 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08004f1c 	.word	0x08004f1c
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d8:	b094      	sub	sp, #80	; 0x50
 80019da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	647b      	str	r3, [r7, #68]	; 0x44
 80019e0:	2300      	movs	r3, #0
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019e4:	2300      	movs	r3, #0
 80019e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ec:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d00d      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x40>
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	f200 80e1 	bhi.w	8001bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x34>
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a06:	e0db      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a0c:	e0db      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a0e:	4b73      	ldr	r3, [pc, #460]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8001a10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a12:	e0d8      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a14:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
 8001a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a46:	4622      	mov	r2, r4
 8001a48:	462b      	mov	r3, r5
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	0159      	lsls	r1, r3, #5
 8001a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a58:	0150      	lsls	r0, r2, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4621      	mov	r1, r4
 8001a60:	1a51      	subs	r1, r2, r1
 8001a62:	6139      	str	r1, [r7, #16]
 8001a64:	4629      	mov	r1, r5
 8001a66:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a78:	4659      	mov	r1, fp
 8001a7a:	018b      	lsls	r3, r1, #6
 8001a7c:	4651      	mov	r1, sl
 8001a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a82:	4651      	mov	r1, sl
 8001a84:	018a      	lsls	r2, r1, #6
 8001a86:	4651      	mov	r1, sl
 8001a88:	ebb2 0801 	subs.w	r8, r2, r1
 8001a8c:	4659      	mov	r1, fp
 8001a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aa6:	4690      	mov	r8, r2
 8001aa8:	4699      	mov	r9, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	eb18 0303 	adds.w	r3, r8, r3
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	eb49 0303 	adc.w	r3, r9, r3
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	024b      	lsls	r3, r1, #9
 8001aca:	4621      	mov	r1, r4
 8001acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	024a      	lsls	r2, r1, #9
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	2200      	movs	r2, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ae4:	f7fe fbc4 	bl	8000270 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af0:	e058      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	2200      	movs	r2, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	4611      	mov	r1, r2
 8001afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b02:	623b      	str	r3, [r7, #32]
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	464b      	mov	r3, r9
 8001b10:	f04f 0000 	mov.w	r0, #0
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	0159      	lsls	r1, r3, #5
 8001b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b1e:	0150      	lsls	r0, r2, #5
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4641      	mov	r1, r8
 8001b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b2a:	4649      	mov	r1, r9
 8001b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b44:	ebb2 040a 	subs.w	r4, r2, sl
 8001b48:	eb63 050b 	sbc.w	r5, r3, fp
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	00eb      	lsls	r3, r5, #3
 8001b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b5a:	00e2      	lsls	r2, r4, #3
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	461d      	mov	r5, r3
 8001b60:	4643      	mov	r3, r8
 8001b62:	18e3      	adds	r3, r4, r3
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	464b      	mov	r3, r9
 8001b68:	eb45 0303 	adc.w	r3, r5, r3
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	028b      	lsls	r3, r1, #10
 8001b7e:	4621      	mov	r1, r4
 8001b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b84:	4621      	mov	r1, r4
 8001b86:	028a      	lsls	r2, r1, #10
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	61fa      	str	r2, [r7, #28]
 8001b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b98:	f7fe fb6a 	bl	8000270 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3750      	adds	r7, #80	; 0x50
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	007a1200 	.word	0x007a1200

08001be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0a9b      	lsrs	r3, r3, #10
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	08004f2c 	.word	0x08004f2c

08001c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c24:	f7ff ffdc 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0b5b      	lsrs	r3, r3, #13
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08004f2c 	.word	0x08004f2c

08001c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	220f      	movs	r2, #15
 8001c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_RCC_GetClockConfig+0x60>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0207 	and.w	r2, r3, #7
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e041      	b.n	8001d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f839 	bl	8001d4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f000 f9d8 	bl	80020a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d001      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e04e      	b.n	8001e16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d022      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da2:	d01d      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_TIM_Base_Start_IT+0xc8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d018      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <HAL_TIM_Base_Start_IT+0xcc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d013      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00e      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d111      	bne.n	8001e04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d010      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	e007      	b.n	8001e14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40010400 	.word	0x40010400
 8001e38:	40014000 	.word	0x40014000
 8001e3c:	40001800 	.word	0x40001800

08001e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d122      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d11b      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0202 	mvn.w	r2, #2
 8001e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8ee 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8e0 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8f1 	bl	8002078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0204 	mvn.w	r2, #4
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8c4 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8b6 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f8c7 	bl	8002078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0208 	mvn.w	r2, #8
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f89a 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f88c 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f89d 	bl	8002078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0210 	mvn.w	r2, #16
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f870 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f862 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f873 	bl	8002078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0201 	mvn.w	r2, #1
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fc5c 	bl	800087c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b80      	cmp	r3, #128	; 0x80
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b80      	cmp	r3, #128	; 0x80
 8001fde:	d107      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f902 	bl	80021f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b40      	cmp	r3, #64	; 0x40
 8001ffc:	d10e      	bne.n	800201c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002008:	2b40      	cmp	r3, #64	; 0x40
 800200a:	d107      	bne.n	800201c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f838 	bl	800208c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b20      	cmp	r3, #32
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b20      	cmp	r3, #32
 8002036:	d107      	bne.n	8002048 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0220 	mvn.w	r2, #32
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8cc 	bl	80021e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a40      	ldr	r2, [pc, #256]	; (80021b4 <TIM_Base_SetConfig+0x114>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020be:	d00f      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3d      	ldr	r2, [pc, #244]	; (80021b8 <TIM_Base_SetConfig+0x118>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00b      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3c      	ldr	r2, [pc, #240]	; (80021bc <TIM_Base_SetConfig+0x11c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3b      	ldr	r2, [pc, #236]	; (80021c0 <TIM_Base_SetConfig+0x120>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3a      	ldr	r2, [pc, #232]	; (80021c4 <TIM_Base_SetConfig+0x124>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d108      	bne.n	80020f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <TIM_Base_SetConfig+0x114>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d02b      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002100:	d027      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2c      	ldr	r2, [pc, #176]	; (80021b8 <TIM_Base_SetConfig+0x118>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d023      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2b      	ldr	r2, [pc, #172]	; (80021bc <TIM_Base_SetConfig+0x11c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <TIM_Base_SetConfig+0x120>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01b      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <TIM_Base_SetConfig+0x124>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d017      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <TIM_Base_SetConfig+0x128>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <TIM_Base_SetConfig+0x12c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00f      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <TIM_Base_SetConfig+0x130>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00b      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <TIM_Base_SetConfig+0x134>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a24      	ldr	r2, [pc, #144]	; (80021d8 <TIM_Base_SetConfig+0x138>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a23      	ldr	r2, [pc, #140]	; (80021dc <TIM_Base_SetConfig+0x13c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d108      	bne.n	8002164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <TIM_Base_SetConfig+0x114>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0xf8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a0c      	ldr	r2, [pc, #48]	; (80021c4 <TIM_Base_SetConfig+0x124>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d103      	bne.n	80021a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	615a      	str	r2, [r3, #20]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40000400 	.word	0x40000400
 80021bc:	40000800 	.word	0x40000800
 80021c0:	40000c00 	.word	0x40000c00
 80021c4:	40010400 	.word	0x40010400
 80021c8:	40014000 	.word	0x40014000
 80021cc:	40014400 	.word	0x40014400
 80021d0:	40014800 	.word	0x40014800
 80021d4:	40001800 	.word	0x40001800
 80021d8:	40001c00 	.word	0x40001c00
 80021dc:	40002000 	.word	0x40002000

080021e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e03f      	b.n	800229a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fb68 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2224      	movs	r2, #36	; 0x24
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fcbf 	bl	8002bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	4613      	mov	r3, r2
 80022ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d130      	bne.n	800231e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_UART_Transmit_IT+0x26>
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e029      	b.n	8002320 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_UART_Transmit_IT+0x38>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e022      	b.n	8002320 <HAL_UART_Transmit_IT+0x7e>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	88fa      	ldrh	r2, [r7, #6]
 80022ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2221      	movs	r2, #33	; 0x21
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002318:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
  }
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0ba      	sub	sp, #232	; 0xe8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800236a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_UART_IRQHandler+0x66>
 800237e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fb65 	bl	8002a5a <UART_Receive_IT>
      return;
 8002390:	e256      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80de 	beq.w	8002558 <HAL_UART_IRQHandler+0x22c>
 800239c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80d1 	beq.w	8002558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_UART_IRQHandler+0xae>
 80023c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_UART_IRQHandler+0xd2>
 80023e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_UART_IRQHandler+0xf6>
 800240a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d011      	beq.n	8002452 <HAL_UART_IRQHandler+0x126>
 800242e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800243a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0208 	orr.w	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 81ed 	beq.w	8002836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800245c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_UART_IRQHandler+0x14e>
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 faf0 	bl	8002a5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <HAL_UART_IRQHandler+0x17a>
 800249e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d04f      	beq.n	8002546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f9f8 	bl	800289c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d141      	bne.n	800253e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024c8:	e853 3f00 	ldrex	r3, [r3]
 80024cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024f6:	e841 2300 	strex	r3, r2, [r1]
 80024fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1d9      	bne.n	80024ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	2b00      	cmp	r3, #0
 800250c:	d013      	beq.n	8002536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	4a7d      	ldr	r2, [pc, #500]	; (8002708 <HAL_UART_IRQHandler+0x3dc>)
 8002514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fd0a 	bl	8000f34 <HAL_DMA_Abort_IT>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002530:	4610      	mov	r0, r2
 8002532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002534:	e00e      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f99a 	bl	8002870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253c:	e00a      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f996 	bl	8002870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	e006      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f992 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002552:	e170      	b.n	8002836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002554:	bf00      	nop
    return;
 8002556:	e16e      	b.n	8002836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	2b01      	cmp	r3, #1
 800255e:	f040 814a 	bne.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8143 	beq.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 813c 	beq.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	f040 80b4 	bne.w	800270c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8140 	beq.w	800283a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025c2:	429a      	cmp	r2, r3
 80025c4:	f080 8139 	bcs.w	800283a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025da:	f000 8088 	beq.w	80026ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800260a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800261a:	e841 2300 	strex	r3, r2, [r1]
 800261e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1d9      	bne.n	80025de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800263a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3314      	adds	r3, #20
 800264a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800264e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800265a:	e841 2300 	strex	r3, r2, [r1]
 800265e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e1      	bne.n	800262a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800268a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800268c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e3      	bne.n	8002666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	330c      	adds	r3, #12
 80026b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b6:	e853 3f00 	ldrex	r3, [r3]
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026be:	f023 0310 	bic.w	r3, r3, #16
 80026c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80026d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e3      	bne.n	80026ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fbb3 	bl	8000e54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8c0 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002704:	e099      	b.n	800283a <HAL_UART_IRQHandler+0x50e>
 8002706:	bf00      	nop
 8002708:	08002963 	.word	0x08002963
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002714:	b29b      	uxth	r3, r3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 808b 	beq.w	800283e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8086 	beq.w	800283e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002756:	647a      	str	r2, [r7, #68]	; 0x44
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800275c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1e3      	bne.n	8002732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3314      	adds	r3, #20
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	623b      	str	r3, [r7, #32]
   return(result);
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800278e:	633a      	str	r2, [r7, #48]	; 0x30
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e3      	bne.n	800276a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	e853 3f00 	ldrex	r3, [r3]
 80027be:	60fb      	str	r3, [r7, #12]
   return(result);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0310 	bic.w	r3, r3, #16
 80027c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027d4:	61fa      	str	r2, [r7, #28]
 80027d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d8:	69b9      	ldr	r1, [r7, #24]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	e841 2300 	strex	r3, r2, [r1]
 80027e0:	617b      	str	r3, [r7, #20]
   return(result);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e3      	bne.n	80027b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f848 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f4:	e023      	b.n	800283e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_UART_IRQHandler+0x4ea>
 8002802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8bb 	bl	800298a <UART_Transmit_IT>
    return;
 8002814:	e014      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00e      	beq.n	8002840 <HAL_UART_IRQHandler+0x514>
 8002822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8fb 	bl	8002a2a <UART_EndTransmit_IT>
    return;
 8002834:	e004      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
    return;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
      return;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
      return;
 800283e:	bf00      	nop
  }
}
 8002840:	37e8      	adds	r7, #232	; 0xe8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop

08002848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800289c:	b480      	push	{r7}
 800289e:	b095      	sub	sp, #84	; 0x54
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c4:	643a      	str	r2, [r7, #64]	; 0x40
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028cc:	e841 2300 	strex	r3, r2, [r1]
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e5      	bne.n	80028a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3314      	adds	r3, #20
 80028de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	e853 3f00 	ldrex	r3, [r3]
 80028e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3314      	adds	r3, #20
 80028f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e5      	bne.n	80028d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	2b01      	cmp	r3, #1
 8002912:	d119      	bne.n	8002948 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330c      	adds	r3, #12
 800291a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	e853 3f00 	ldrex	r3, [r3]
 8002922:	60bb      	str	r3, [r7, #8]
   return(result);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f023 0310 	bic.w	r3, r3, #16
 800292a:	647b      	str	r3, [r7, #68]	; 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002934:	61ba      	str	r2, [r7, #24]
 8002936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002938:	6979      	ldr	r1, [r7, #20]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	e841 2300 	strex	r3, r2, [r1]
 8002940:	613b      	str	r3, [r7, #16]
   return(result);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e5      	bne.n	8002914 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002956:	bf00      	nop
 8002958:	3754      	adds	r7, #84	; 0x54
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff ff77 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b21      	cmp	r3, #33	; 0x21
 800299c:	d13e      	bne.n	8002a1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d114      	bne.n	80029d2 <UART_Transmit_IT+0x48>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d110      	bne.n	80029d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	1c9a      	adds	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	621a      	str	r2, [r3, #32]
 80029d0:	e008      	b.n	80029e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	1c59      	adds	r1, r3, #1
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6211      	str	r1, [r2, #32]
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4619      	mov	r1, r3
 80029f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10f      	bne.n	8002a18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff fefc 	bl	8002848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b08c      	sub	sp, #48	; 0x30
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b22      	cmp	r3, #34	; 0x22
 8002a6c:	f040 80ab 	bne.w	8002bc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a78:	d117      	bne.n	8002aaa <UART_Receive_IT+0x50>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d113      	bne.n	8002aaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	1c9a      	adds	r2, r3, #2
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8002aa8:	e026      	b.n	8002af8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d007      	beq.n	8002ace <UART_Receive_IT+0x74>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <UART_Receive_IT+0x82>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e008      	b.n	8002aee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4619      	mov	r1, r3
 8002b06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d15a      	bne.n	8002bc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0220 	bic.w	r2, r2, #32
 8002b1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d135      	bne.n	8002bb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	613b      	str	r3, [r7, #16]
   return(result);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f023 0310 	bic.w	r3, r3, #16
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	623a      	str	r2, [r7, #32]
 8002b74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	69f9      	ldr	r1, [r7, #28]
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e5      	bne.n	8002b52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d10a      	bne.n	8002baa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff fe67 	bl	8002884 <HAL_UARTEx_RxEventCallback>
 8002bb6:	e002      	b.n	8002bbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff fe4f 	bl	800285c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e002      	b.n	8002bc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
  }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3730      	adds	r7, #48	; 0x30
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd4:	b0c0      	sub	sp, #256	; 0x100
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	68d9      	ldr	r1, [r3, #12]
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	ea40 0301 	orr.w	r3, r0, r1
 8002bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c28:	f021 010c 	bic.w	r1, r1, #12
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c36:	430b      	orrs	r3, r1
 8002c38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4a:	6999      	ldr	r1, [r3, #24]
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	ea40 0301 	orr.w	r3, r0, r1
 8002c56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b8f      	ldr	r3, [pc, #572]	; (8002e9c <UART_SetConfig+0x2cc>)
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d005      	beq.n	8002c70 <UART_SetConfig+0xa0>
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4b8d      	ldr	r3, [pc, #564]	; (8002ea0 <UART_SetConfig+0x2d0>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d104      	bne.n	8002c7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c70:	f7fe ffd6 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8002c74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c78:	e003      	b.n	8002c82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c7a:	f7fe ffbd 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002c7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8c:	f040 810c 	bne.w	8002ea8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	462b      	mov	r3, r5
 8002ca6:	1891      	adds	r1, r2, r2
 8002ca8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002caa:	415b      	adcs	r3, r3
 8002cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	eb12 0801 	adds.w	r8, r2, r1
 8002cb8:	4629      	mov	r1, r5
 8002cba:	eb43 0901 	adc.w	r9, r3, r1
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd2:	4690      	mov	r8, r2
 8002cd4:	4699      	mov	r9, r3
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	eb18 0303 	adds.w	r3, r8, r3
 8002cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ce0:	462b      	mov	r3, r5
 8002ce2:	eb49 0303 	adc.w	r3, r9, r3
 8002ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cfe:	460b      	mov	r3, r1
 8002d00:	18db      	adds	r3, r3, r3
 8002d02:	653b      	str	r3, [r7, #80]	; 0x50
 8002d04:	4613      	mov	r3, r2
 8002d06:	eb42 0303 	adc.w	r3, r2, r3
 8002d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d14:	f7fd faac 	bl	8000270 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <UART_SetConfig+0x2d4>)
 8002d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	011c      	lsls	r4, r3, #4
 8002d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d38:	4642      	mov	r2, r8
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	1891      	adds	r1, r2, r2
 8002d3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d40:	415b      	adcs	r3, r3
 8002d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d48:	4641      	mov	r1, r8
 8002d4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002d4e:	4649      	mov	r1, r9
 8002d50:	eb43 0b01 	adc.w	fp, r3, r1
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d68:	4692      	mov	sl, r2
 8002d6a:	469b      	mov	fp, r3
 8002d6c:	4643      	mov	r3, r8
 8002d6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002d72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d76:	464b      	mov	r3, r9
 8002d78:	eb4b 0303 	adc.w	r3, fp, r3
 8002d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d94:	460b      	mov	r3, r1
 8002d96:	18db      	adds	r3, r3, r3
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	eb42 0303 	adc.w	r3, r2, r3
 8002da0:	647b      	str	r3, [r7, #68]	; 0x44
 8002da2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002da6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002daa:	f7fd fa61 	bl	8000270 <__aeabi_uldivmod>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <UART_SetConfig+0x2d4>)
 8002db6:	fba3 2301 	umull	r2, r3, r3, r1
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2264      	movs	r2, #100	; 0x64
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	1acb      	subs	r3, r1, r3
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dca:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <UART_SetConfig+0x2d4>)
 8002dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dd8:	441c      	add	r4, r3
 8002dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002de4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002de8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	1891      	adds	r1, r2, r2
 8002df2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002df4:	415b      	adcs	r3, r3
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	1851      	adds	r1, r2, r1
 8002e00:	6339      	str	r1, [r7, #48]	; 0x30
 8002e02:	4649      	mov	r1, r9
 8002e04:	414b      	adcs	r3, r1
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e14:	4659      	mov	r1, fp
 8002e16:	00cb      	lsls	r3, r1, #3
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1e:	4651      	mov	r1, sl
 8002e20:	00ca      	lsls	r2, r1, #3
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	4642      	mov	r2, r8
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e30:	464b      	mov	r3, r9
 8002e32:	460a      	mov	r2, r1
 8002e34:	eb42 0303 	adc.w	r3, r2, r3
 8002e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e50:	460b      	mov	r3, r1
 8002e52:	18db      	adds	r3, r3, r3
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e56:	4613      	mov	r3, r2
 8002e58:	eb42 0303 	adc.w	r3, r2, r3
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e66:	f7fd fa03 	bl	8000270 <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <UART_SetConfig+0x2d4>)
 8002e70:	fba3 1302 	umull	r1, r3, r3, r2
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	2164      	movs	r1, #100	; 0x64
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	3332      	adds	r3, #50	; 0x32
 8002e82:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <UART_SetConfig+0x2d4>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	f003 0207 	and.w	r2, r3, #7
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4422      	add	r2, r4
 8002e96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e98:	e105      	b.n	80030a6 <UART_SetConfig+0x4d6>
 8002e9a:	bf00      	nop
 8002e9c:	40011000 	.word	0x40011000
 8002ea0:	40011400 	.word	0x40011400
 8002ea4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002eb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002eba:	4642      	mov	r2, r8
 8002ebc:	464b      	mov	r3, r9
 8002ebe:	1891      	adds	r1, r2, r2
 8002ec0:	6239      	str	r1, [r7, #32]
 8002ec2:	415b      	adcs	r3, r3
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eca:	4641      	mov	r1, r8
 8002ecc:	1854      	adds	r4, r2, r1
 8002ece:	4649      	mov	r1, r9
 8002ed0:	eb43 0501 	adc.w	r5, r3, r1
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	00eb      	lsls	r3, r5, #3
 8002ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ee2:	00e2      	lsls	r2, r4, #3
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	461d      	mov	r5, r3
 8002ee8:	4643      	mov	r3, r8
 8002eea:	18e3      	adds	r3, r4, r3
 8002eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	eb45 0303 	adc.w	r3, r5, r3
 8002ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f16:	4629      	mov	r1, r5
 8002f18:	008b      	lsls	r3, r1, #2
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f20:	4621      	mov	r1, r4
 8002f22:	008a      	lsls	r2, r1, #2
 8002f24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f28:	f7fd f9a2 	bl	8000270 <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4b60      	ldr	r3, [pc, #384]	; (80030b4 <UART_SetConfig+0x4e4>)
 8002f32:	fba3 2302 	umull	r2, r3, r3, r2
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	011c      	lsls	r4, r3, #4
 8002f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	1891      	adds	r1, r2, r2
 8002f52:	61b9      	str	r1, [r7, #24]
 8002f54:	415b      	adcs	r3, r3
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	1851      	adds	r1, r2, r1
 8002f60:	6139      	str	r1, [r7, #16]
 8002f62:	4649      	mov	r1, r9
 8002f64:	414b      	adcs	r3, r1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f74:	4659      	mov	r1, fp
 8002f76:	00cb      	lsls	r3, r1, #3
 8002f78:	4651      	mov	r1, sl
 8002f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f7e:	4651      	mov	r1, sl
 8002f80:	00ca      	lsls	r2, r1, #3
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	4642      	mov	r2, r8
 8002f8a:	189b      	adds	r3, r3, r2
 8002f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f90:	464b      	mov	r3, r9
 8002f92:	460a      	mov	r2, r1
 8002f94:	eb42 0303 	adc.w	r3, r2, r3
 8002f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fb4:	4649      	mov	r1, r9
 8002fb6:	008b      	lsls	r3, r1, #2
 8002fb8:	4641      	mov	r1, r8
 8002fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fbe:	4641      	mov	r1, r8
 8002fc0:	008a      	lsls	r2, r1, #2
 8002fc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fc6:	f7fd f953 	bl	8000270 <__aeabi_uldivmod>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4b39      	ldr	r3, [pc, #228]	; (80030b4 <UART_SetConfig+0x4e4>)
 8002fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	2164      	movs	r1, #100	; 0x64
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	3332      	adds	r3, #50	; 0x32
 8002fe2:	4a34      	ldr	r2, [pc, #208]	; (80030b4 <UART_SetConfig+0x4e4>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fee:	441c      	add	r4, r3
 8002ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ff8:	677a      	str	r2, [r7, #116]	; 0x74
 8002ffa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ffe:	4642      	mov	r2, r8
 8003000:	464b      	mov	r3, r9
 8003002:	1891      	adds	r1, r2, r2
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	415b      	adcs	r3, r3
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800300e:	4641      	mov	r1, r8
 8003010:	1851      	adds	r1, r2, r1
 8003012:	6039      	str	r1, [r7, #0]
 8003014:	4649      	mov	r1, r9
 8003016:	414b      	adcs	r3, r1
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003026:	4659      	mov	r1, fp
 8003028:	00cb      	lsls	r3, r1, #3
 800302a:	4651      	mov	r1, sl
 800302c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003030:	4651      	mov	r1, sl
 8003032:	00ca      	lsls	r2, r1, #3
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	4603      	mov	r3, r0
 800303a:	4642      	mov	r2, r8
 800303c:	189b      	adds	r3, r3, r2
 800303e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003040:	464b      	mov	r3, r9
 8003042:	460a      	mov	r2, r1
 8003044:	eb42 0303 	adc.w	r3, r2, r3
 8003048:	66fb      	str	r3, [r7, #108]	; 0x6c
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	663b      	str	r3, [r7, #96]	; 0x60
 8003054:	667a      	str	r2, [r7, #100]	; 0x64
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003062:	4649      	mov	r1, r9
 8003064:	008b      	lsls	r3, r1, #2
 8003066:	4641      	mov	r1, r8
 8003068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800306c:	4641      	mov	r1, r8
 800306e:	008a      	lsls	r2, r1, #2
 8003070:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003074:	f7fd f8fc 	bl	8000270 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <UART_SetConfig+0x4e4>)
 800307e:	fba3 1302 	umull	r1, r3, r3, r2
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2164      	movs	r1, #100	; 0x64
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	3332      	adds	r3, #50	; 0x32
 8003090:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <UART_SetConfig+0x4e4>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4422      	add	r2, r4
 80030a4:	609a      	str	r2, [r3, #8]
}
 80030a6:	bf00      	nop
 80030a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b2:	bf00      	nop
 80030b4:	51eb851f 	.word	0x51eb851f

080030b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ca:	2b84      	cmp	r3, #132	; 0x84
 80030cc:	d005      	beq.n	80030da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	3303      	adds	r3, #3
 80030d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030ec:	f000 fade 	bl	80036ac <vTaskStartScheduler>
  
  return osOK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f8:	b089      	sub	sp, #36	; 0x24
 80030fa:	af04      	add	r7, sp, #16
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <osThreadCreate+0x54>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01c      	beq.n	800314a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685c      	ldr	r4, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681d      	ldr	r5, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691e      	ldr	r6, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ffc8 	bl	80030b8 <makeFreeRtosPriority>
 8003128:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003132:	9202      	str	r2, [sp, #8]
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	9100      	str	r1, [sp, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4632      	mov	r2, r6
 800313c:	4629      	mov	r1, r5
 800313e:	4620      	mov	r0, r4
 8003140:	f000 f8ed 	bl	800331e <xTaskCreateStatic>
 8003144:	4603      	mov	r3, r0
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e01c      	b.n	8003184 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685c      	ldr	r4, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003156:	b29e      	uxth	r6, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ffaa 	bl	80030b8 <makeFreeRtosPriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f107 030c 	add.w	r3, r7, #12
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	9200      	str	r2, [sp, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	4632      	mov	r2, r6
 8003172:	4629      	mov	r1, r5
 8003174:	4620      	mov	r0, r4
 8003176:	f000 f92f 	bl	80033d8 <xTaskCreate>
 800317a:	4603      	mov	r3, r0
 800317c:	2b01      	cmp	r3, #1
 800317e:	d001      	beq.n	8003184 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003184:	68fb      	ldr	r3, [r7, #12]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800318e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <osDelay+0x16>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	e000      	b.n	80031a6 <osDelay+0x18>
 80031a4:	2301      	movs	r3, #1
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fa4c 	bl	8003644 <vTaskDelay>
  
  return osOK;
 80031ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f103 0208 	add.w	r2, r3, #8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f04f 32ff 	mov.w	r2, #4294967295
 80031ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f103 0208 	add.w	r2, r3, #8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0208 	add.w	r2, r3, #8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	601a      	str	r2, [r3, #0]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d103      	bne.n	8003278 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e00c      	b.n	8003292 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3308      	adds	r3, #8
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e002      	b.n	8003286 <vListInsert+0x2e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d2f6      	bcs.n	8003280 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	601a      	str	r2, [r3, #0]
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6892      	ldr	r2, [r2, #8]
 80032e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6852      	ldr	r2, [r2, #4]
 80032ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d103      	bne.n	80032fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	1e5a      	subs	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800331e:	b580      	push	{r7, lr}
 8003320:	b08e      	sub	sp, #56	; 0x38
 8003322:	af04      	add	r7, sp, #16
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800332c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <xTaskCreateStatic+0x46>
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	61fb      	str	r3, [r7, #28]
}
 8003360:	bf00      	nop
 8003362:	e7fe      	b.n	8003362 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003364:	2354      	movs	r3, #84	; 0x54
 8003366:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b54      	cmp	r3, #84	; 0x54
 800336c:	d00a      	beq.n	8003384 <xTaskCreateStatic+0x66>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	61bb      	str	r3, [r7, #24]
}
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003384:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01e      	beq.n	80033ca <xTaskCreateStatic+0xac>
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01b      	beq.n	80033ca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800339a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033a4:	2300      	movs	r3, #0
 80033a6:	9303      	str	r3, [sp, #12]
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	9302      	str	r3, [sp, #8]
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f850 	bl	8003462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033c4:	f000 f8d4 	bl	8003570 <prvAddNewTaskToReadyList>
 80033c8:	e001      	b.n	80033ce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033ce:	697b      	ldr	r3, [r7, #20]
	}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08c      	sub	sp, #48	; 0x30
 80033dc:	af04      	add	r7, sp, #16
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fec3 	bl	8004178 <pvPortMalloc>
 80033f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00e      	beq.n	8003418 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033fa:	2054      	movs	r0, #84	; 0x54
 80033fc:	f000 febc 	bl	8004178 <pvPortMalloc>
 8003400:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
 800340e:	e005      	b.n	800341c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003410:	6978      	ldr	r0, [r7, #20]
 8003412:	f000 ff7d 	bl	8004310 <vPortFree>
 8003416:	e001      	b.n	800341c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d017      	beq.n	8003452 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800342a:	88fa      	ldrh	r2, [r7, #6]
 800342c:	2300      	movs	r3, #0
 800342e:	9303      	str	r3, [sp, #12]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	9302      	str	r3, [sp, #8]
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f80e 	bl	8003462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003446:	69f8      	ldr	r0, [r7, #28]
 8003448:	f000 f892 	bl	8003570 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800344c:	2301      	movs	r3, #1
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e002      	b.n	8003458 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003458:	69bb      	ldr	r3, [r7, #24]
	}
 800345a:	4618      	mov	r0, r3
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b088      	sub	sp, #32
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800347a:	3b01      	subs	r3, #1
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f023 0307 	bic.w	r3, r3, #7
 8003488:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <prvInitialiseNewTask+0x48>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	617b      	str	r3, [r7, #20]
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01f      	beq.n	80034f0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	e012      	b.n	80034dc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	7819      	ldrb	r1, [r3, #0]
 80034be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	4413      	add	r3, r2
 80034c4:	3334      	adds	r3, #52	; 0x34
 80034c6:	460a      	mov	r2, r1
 80034c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3301      	adds	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b0f      	cmp	r3, #15
 80034e0:	d9e9      	bls.n	80034b6 <prvInitialiseNewTask+0x54>
 80034e2:	e000      	b.n	80034e6 <prvInitialiseNewTask+0x84>
			{
				break;
 80034e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034ee:	e003      	b.n	80034f8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d901      	bls.n	8003502 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034fe:	2306      	movs	r3, #6
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	3304      	adds	r3, #4
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fe6c 	bl	80031f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	3318      	adds	r3, #24
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fe67 	bl	80031f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	f1c3 0207 	rsb	r2, r3, #7
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	2200      	movs	r2, #0
 8003542:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	69b8      	ldr	r0, [r7, #24]
 8003552:	f000 fc05 	bl	8003d60 <pxPortInitialiseStack>
 8003556:	4602      	mov	r2, r0
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003566:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003568:	bf00      	nop
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003578:	f000 fd1c 	bl	8003fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800357c:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <prvAddNewTaskToReadyList+0xb8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a29      	ldr	r2, [pc, #164]	; (8003628 <prvAddNewTaskToReadyList+0xb8>)
 8003584:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003586:	4b29      	ldr	r3, [pc, #164]	; (800362c <prvAddNewTaskToReadyList+0xbc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800358e:	4a27      	ldr	r2, [pc, #156]	; (800362c <prvAddNewTaskToReadyList+0xbc>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <prvAddNewTaskToReadyList+0xb8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d110      	bne.n	80035be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800359c:	f000 fabc 	bl	8003b18 <prvInitialiseTaskLists>
 80035a0:	e00d      	b.n	80035be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <prvAddNewTaskToReadyList+0xc0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <prvAddNewTaskToReadyList+0xbc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d802      	bhi.n	80035be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035b8:	4a1c      	ldr	r2, [pc, #112]	; (800362c <prvAddNewTaskToReadyList+0xbc>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035be:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <prvAddNewTaskToReadyList+0xc4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <prvAddNewTaskToReadyList+0xc4>)
 80035c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	2201      	movs	r2, #1
 80035ce:	409a      	lsls	r2, r3
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <prvAddNewTaskToReadyList+0xc8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	4a18      	ldr	r2, [pc, #96]	; (8003638 <prvAddNewTaskToReadyList+0xc8>)
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4a15      	ldr	r2, [pc, #84]	; (800363c <prvAddNewTaskToReadyList+0xcc>)
 80035e8:	441a      	add	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f7ff fe0d 	bl	8003210 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035f6:	f000 fd0d 	bl	8004014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035fa:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <prvAddNewTaskToReadyList+0xc0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00e      	beq.n	8003620 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <prvAddNewTaskToReadyList+0xbc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	429a      	cmp	r2, r3
 800360e:	d207      	bcs.n	8003620 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <prvAddNewTaskToReadyList+0xd0>)
 8003612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	200004b4 	.word	0x200004b4
 800362c:	200003b4 	.word	0x200003b4
 8003630:	200004c0 	.word	0x200004c0
 8003634:	200004d0 	.word	0x200004d0
 8003638:	200004bc 	.word	0x200004bc
 800363c:	200003b8 	.word	0x200003b8
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d017      	beq.n	8003686 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <vTaskDelay+0x60>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <vTaskDelay+0x30>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	60bb      	str	r3, [r7, #8]
}
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003674:	f000 f87a 	bl	800376c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003678:	2100      	movs	r1, #0
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fb0a 	bl	8003c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003680:	f000 f882 	bl	8003788 <xTaskResumeAll>
 8003684:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d107      	bne.n	800369c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <vTaskDelay+0x64>)
 800368e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200004dc 	.word	0x200004dc
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036ba:	463a      	mov	r2, r7
 80036bc:	1d39      	adds	r1, r7, #4
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc ff56 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036c8:	6839      	ldr	r1, [r7, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	9202      	str	r2, [sp, #8]
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	2300      	movs	r3, #0
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	460a      	mov	r2, r1
 80036da:	491e      	ldr	r1, [pc, #120]	; (8003754 <vTaskStartScheduler+0xa8>)
 80036dc:	481e      	ldr	r0, [pc, #120]	; (8003758 <vTaskStartScheduler+0xac>)
 80036de:	f7ff fe1e 	bl	800331e <xTaskCreateStatic>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <vTaskStartScheduler+0xb0>)
 80036e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036e8:	4b1c      	ldr	r3, [pc, #112]	; (800375c <vTaskStartScheduler+0xb0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036f0:	2301      	movs	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e001      	b.n	80036fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d116      	bne.n	800372e <vTaskStartScheduler+0x82>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	613b      	str	r3, [r7, #16]
}
 8003712:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <vTaskStartScheduler+0xb4>)
 8003716:	f04f 32ff 	mov.w	r2, #4294967295
 800371a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <vTaskStartScheduler+0xb8>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <vTaskStartScheduler+0xbc>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003728:	f000 fba2 	bl	8003e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800372c:	e00e      	b.n	800374c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d10a      	bne.n	800374c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	60fb      	str	r3, [r7, #12]
}
 8003748:	bf00      	nop
 800374a:	e7fe      	b.n	800374a <vTaskStartScheduler+0x9e>
}
 800374c:	bf00      	nop
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	08004f14 	.word	0x08004f14
 8003758:	08003ae9 	.word	0x08003ae9
 800375c:	200004d8 	.word	0x200004d8
 8003760:	200004d4 	.word	0x200004d4
 8003764:	200004c0 	.word	0x200004c0
 8003768:	200004b8 	.word	0x200004b8

0800376c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <vTaskSuspendAll+0x18>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	4a03      	ldr	r2, [pc, #12]	; (8003784 <vTaskSuspendAll+0x18>)
 8003778:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	200004dc 	.word	0x200004dc

08003788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003796:	4b41      	ldr	r3, [pc, #260]	; (800389c <xTaskResumeAll+0x114>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	603b      	str	r3, [r7, #0]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037b4:	f000 fbfe 	bl	8003fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037b8:	4b38      	ldr	r3, [pc, #224]	; (800389c <xTaskResumeAll+0x114>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3b01      	subs	r3, #1
 80037be:	4a37      	ldr	r2, [pc, #220]	; (800389c <xTaskResumeAll+0x114>)
 80037c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c2:	4b36      	ldr	r3, [pc, #216]	; (800389c <xTaskResumeAll+0x114>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d161      	bne.n	800388e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037ca:	4b35      	ldr	r3, [pc, #212]	; (80038a0 <xTaskResumeAll+0x118>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d05d      	beq.n	800388e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037d2:	e02e      	b.n	8003832 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d4:	4b33      	ldr	r3, [pc, #204]	; (80038a4 <xTaskResumeAll+0x11c>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3318      	adds	r3, #24
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fd72 	bl	80032ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fd6d 	bl	80032ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2201      	movs	r2, #1
 80037f6:	409a      	lsls	r2, r3
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <xTaskResumeAll+0x120>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <xTaskResumeAll+0x120>)
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4a27      	ldr	r2, [pc, #156]	; (80038ac <xTaskResumeAll+0x124>)
 8003810:	441a      	add	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7ff fcf9 	bl	8003210 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <xTaskResumeAll+0x128>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	429a      	cmp	r2, r3
 800382a:	d302      	bcc.n	8003832 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800382c:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <xTaskResumeAll+0x12c>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <xTaskResumeAll+0x11c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1cc      	bne.n	80037d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003840:	f000 fa08 	bl	8003c54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <xTaskResumeAll+0x130>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d010      	beq.n	8003872 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003850:	f000 f836 	bl	80038c0 <xTaskIncrementTick>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <xTaskResumeAll+0x12c>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f1      	bne.n	8003850 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <xTaskResumeAll+0x130>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <xTaskResumeAll+0x12c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <xTaskResumeAll+0x134>)
 8003880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800388e:	f000 fbc1 	bl	8004014 <vPortExitCritical>

	return xAlreadyYielded;
 8003892:	68bb      	ldr	r3, [r7, #8]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	200004dc 	.word	0x200004dc
 80038a0:	200004b4 	.word	0x200004b4
 80038a4:	20000474 	.word	0x20000474
 80038a8:	200004bc 	.word	0x200004bc
 80038ac:	200003b8 	.word	0x200003b8
 80038b0:	200003b4 	.word	0x200003b4
 80038b4:	200004c8 	.word	0x200004c8
 80038b8:	200004c4 	.word	0x200004c4
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ca:	4b4e      	ldr	r3, [pc, #312]	; (8003a04 <xTaskIncrementTick+0x144>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 808e 	bne.w	80039f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038d4:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <xTaskIncrementTick+0x148>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3301      	adds	r3, #1
 80038da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038dc:	4a4a      	ldr	r2, [pc, #296]	; (8003a08 <xTaskIncrementTick+0x148>)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d120      	bne.n	800392a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038e8:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <xTaskIncrementTick+0x14c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <xTaskIncrementTick+0x48>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	603b      	str	r3, [r7, #0]
}
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <xTaskIncrementTick+0x46>
 8003908:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <xTaskIncrementTick+0x14c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <xTaskIncrementTick+0x150>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <xTaskIncrementTick+0x14c>)
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4a3e      	ldr	r2, [pc, #248]	; (8003a10 <xTaskIncrementTick+0x150>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <xTaskIncrementTick+0x154>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	4a3c      	ldr	r2, [pc, #240]	; (8003a14 <xTaskIncrementTick+0x154>)
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	f000 f995 	bl	8003c54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <xTaskIncrementTick+0x158>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	429a      	cmp	r2, r3
 8003932:	d348      	bcc.n	80039c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003934:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <xTaskIncrementTick+0x14c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393e:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <xTaskIncrementTick+0x158>)
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	601a      	str	r2, [r3, #0]
					break;
 8003946:	e03e      	b.n	80039c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003948:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <xTaskIncrementTick+0x14c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d203      	bcs.n	8003968 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003960:	4a2d      	ldr	r2, [pc, #180]	; (8003a18 <xTaskIncrementTick+0x158>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003966:	e02e      	b.n	80039c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fcac 	bl	80032ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	2b00      	cmp	r3, #0
 8003978:	d004      	beq.n	8003984 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3318      	adds	r3, #24
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fca3 	bl	80032ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	2201      	movs	r2, #1
 800398a:	409a      	lsls	r2, r3
 800398c:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <xTaskIncrementTick+0x15c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <xTaskIncrementTick+0x15c>)
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4a1f      	ldr	r2, [pc, #124]	; (8003a20 <xTaskIncrementTick+0x160>)
 80039a4:	441a      	add	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f7ff fc2f 	bl	8003210 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <xTaskIncrementTick+0x164>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	429a      	cmp	r2, r3
 80039be:	d3b9      	bcc.n	8003934 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c4:	e7b6      	b.n	8003934 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039c6:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <xTaskIncrementTick+0x164>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4914      	ldr	r1, [pc, #80]	; (8003a20 <xTaskIncrementTick+0x160>)
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d901      	bls.n	80039e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <xTaskIncrementTick+0x168>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80039ea:	2301      	movs	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e004      	b.n	80039fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <xTaskIncrementTick+0x16c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <xTaskIncrementTick+0x16c>)
 80039f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039fa:	697b      	ldr	r3, [r7, #20]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	200004dc 	.word	0x200004dc
 8003a08:	200004b8 	.word	0x200004b8
 8003a0c:	2000046c 	.word	0x2000046c
 8003a10:	20000470 	.word	0x20000470
 8003a14:	200004cc 	.word	0x200004cc
 8003a18:	200004d4 	.word	0x200004d4
 8003a1c:	200004bc 	.word	0x200004bc
 8003a20:	200003b8 	.word	0x200003b8
 8003a24:	200003b4 	.word	0x200003b4
 8003a28:	200004c8 	.word	0x200004c8
 8003a2c:	200004c4 	.word	0x200004c4

08003a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a36:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <vTaskSwitchContext+0xa4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a3e:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <vTaskSwitchContext+0xa8>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a44:	e03f      	b.n	8003ac6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003a46:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <vTaskSwitchContext+0xa8>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4c:	4b23      	ldr	r3, [pc, #140]	; (8003adc <vTaskSwitchContext+0xac>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	f1c3 031f 	rsb	r3, r3, #31
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	491f      	ldr	r1, [pc, #124]	; (8003ae0 <vTaskSwitchContext+0xb0>)
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	607b      	str	r3, [r7, #4]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <vTaskSwitchContext+0x5a>
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <vTaskSwitchContext+0xb0>)
 8003a98:	4413      	add	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3308      	adds	r3, #8
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d104      	bne.n	8003abc <vTaskSwitchContext+0x8c>
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <vTaskSwitchContext+0xb4>)
 8003ac4:	6013      	str	r3, [r2, #0]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	200004dc 	.word	0x200004dc
 8003ad8:	200004c8 	.word	0x200004c8
 8003adc:	200004bc 	.word	0x200004bc
 8003ae0:	200003b8 	.word	0x200003b8
 8003ae4:	200003b4 	.word	0x200003b4

08003ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003af0:	f000 f852 	bl	8003b98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <prvIdleTask+0x28>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d9f9      	bls.n	8003af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <prvIdleTask+0x2c>)
 8003afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b0c:	e7f0      	b.n	8003af0 <prvIdleTask+0x8>
 8003b0e:	bf00      	nop
 8003b10:	200003b8 	.word	0x200003b8
 8003b14:	e000ed04 	.word	0xe000ed04

08003b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	e00c      	b.n	8003b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <prvInitialiseTaskLists+0x60>)
 8003b30:	4413      	add	r3, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fb3f 	bl	80031b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b06      	cmp	r3, #6
 8003b42:	d9ef      	bls.n	8003b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b44:	480d      	ldr	r0, [pc, #52]	; (8003b7c <prvInitialiseTaskLists+0x64>)
 8003b46:	f7ff fb36 	bl	80031b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b4a:	480d      	ldr	r0, [pc, #52]	; (8003b80 <prvInitialiseTaskLists+0x68>)
 8003b4c:	f7ff fb33 	bl	80031b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b50:	480c      	ldr	r0, [pc, #48]	; (8003b84 <prvInitialiseTaskLists+0x6c>)
 8003b52:	f7ff fb30 	bl	80031b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b56:	480c      	ldr	r0, [pc, #48]	; (8003b88 <prvInitialiseTaskLists+0x70>)
 8003b58:	f7ff fb2d 	bl	80031b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b5c:	480b      	ldr	r0, [pc, #44]	; (8003b8c <prvInitialiseTaskLists+0x74>)
 8003b5e:	f7ff fb2a 	bl	80031b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b62:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <prvInitialiseTaskLists+0x78>)
 8003b64:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <prvInitialiseTaskLists+0x64>)
 8003b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <prvInitialiseTaskLists+0x7c>)
 8003b6a:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <prvInitialiseTaskLists+0x68>)
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200003b8 	.word	0x200003b8
 8003b7c:	20000444 	.word	0x20000444
 8003b80:	20000458 	.word	0x20000458
 8003b84:	20000474 	.word	0x20000474
 8003b88:	20000488 	.word	0x20000488
 8003b8c:	200004a0 	.word	0x200004a0
 8003b90:	2000046c 	.word	0x2000046c
 8003b94:	20000470 	.word	0x20000470

08003b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b9e:	e019      	b.n	8003bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ba0:	f000 fa08 	bl	8003fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <prvCheckTasksWaitingTermination+0x50>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fb8a 	bl	80032ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <prvCheckTasksWaitingTermination+0x54>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <prvCheckTasksWaitingTermination+0x54>)
 8003bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <prvCheckTasksWaitingTermination+0x58>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <prvCheckTasksWaitingTermination+0x58>)
 8003bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bca:	f000 fa23 	bl	8004014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f810 	bl	8003bf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <prvCheckTasksWaitingTermination+0x58>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e1      	bne.n	8003ba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000488 	.word	0x20000488
 8003bec:	200004b4 	.word	0x200004b4
 8003bf0:	2000049c 	.word	0x2000049c

08003bf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d108      	bne.n	8003c18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fb80 	bl	8004310 <vPortFree>
				vPortFree( pxTCB );
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fb7d 	bl	8004310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c16:	e018      	b.n	8003c4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d103      	bne.n	8003c2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fb74 	bl	8004310 <vPortFree>
	}
 8003c28:	e00f      	b.n	8003c4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d00a      	beq.n	8003c4a <prvDeleteTCB+0x56>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	60fb      	str	r3, [r7, #12]
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <prvDeleteTCB+0x54>
	}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <prvResetNextTaskUnblockTime+0x38>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <prvResetNextTaskUnblockTime+0x3c>)
 8003c66:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c6c:	e008      	b.n	8003c80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <prvResetNextTaskUnblockTime+0x38>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <prvResetNextTaskUnblockTime+0x3c>)
 8003c7e:	6013      	str	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	2000046c 	.word	0x2000046c
 8003c90:	200004d4 	.word	0x200004d4

08003c94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c9e:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ca4:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fb0d 	bl	80032ca <uxListRemove>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ccc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d10a      	bne.n	8003cec <prvAddCurrentTaskToDelayedList+0x58>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	481a      	ldr	r0, [pc, #104]	; (8003d50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003ce6:	f7ff fa93 	bl	8003210 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cea:	e026      	b.n	8003d3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d209      	bcs.n	8003d18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f7ff faa1 	bl	8003258 <vListInsert>
}
 8003d16:	e010      	b.n	8003d3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7ff fa97 	bl	8003258 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d202      	bcs.n	8003d3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d34:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6013      	str	r3, [r2, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200004b8 	.word	0x200004b8
 8003d48:	200003b4 	.word	0x200003b4
 8003d4c:	200004bc 	.word	0x200004bc
 8003d50:	200004a0 	.word	0x200004a0
 8003d54:	20000470 	.word	0x20000470
 8003d58:	2000046c 	.word	0x2000046c
 8003d5c:	200004d4 	.word	0x200004d4

08003d60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b04      	subs	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3b04      	subs	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d90:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <pxPortInitialiseStack+0x64>)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3b14      	subs	r3, #20
 8003d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3b04      	subs	r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f06f 0202 	mvn.w	r2, #2
 8003dae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3b20      	subs	r3, #32
 8003db4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	08003dc9 	.word	0x08003dc9

08003dc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <prvTaskExitError+0x54>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d00a      	beq.n	8003df2 <prvTaskExitError+0x2a>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <prvTaskExitError+0x28>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60bb      	str	r3, [r7, #8]
}
 8003e04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e06:	bf00      	nop
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0fc      	beq.n	8003e08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	2000000c 	.word	0x2000000c

08003e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <pxCurrentTCBConst2>)
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	6808      	ldr	r0, [r1, #0]
 8003e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2a:	f380 8809 	msr	PSP, r0
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f380 8811 	msr	BASEPRI, r0
 8003e3a:	4770      	bx	lr
 8003e3c:	f3af 8000 	nop.w

08003e40 <pxCurrentTCBConst2>:
 8003e40:	200003b4 	.word	0x200003b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop

08003e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e48:	4808      	ldr	r0, [pc, #32]	; (8003e6c <prvPortStartFirstTask+0x24>)
 8003e4a:	6800      	ldr	r0, [r0, #0]
 8003e4c:	6800      	ldr	r0, [r0, #0]
 8003e4e:	f380 8808 	msr	MSP, r0
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f380 8814 	msr	CONTROL, r0
 8003e5a:	b662      	cpsie	i
 8003e5c:	b661      	cpsie	f
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	df00      	svc	0
 8003e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e6a:	bf00      	nop
 8003e6c:	e000ed08 	.word	0xe000ed08

08003e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e76:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <xPortStartScheduler+0x120>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a46      	ldr	r2, [pc, #280]	; (8003f94 <xPortStartScheduler+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10a      	bne.n	8003e96 <xPortStartScheduler+0x26>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	613b      	str	r3, [r7, #16]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e96:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <xPortStartScheduler+0x120>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a3f      	ldr	r2, [pc, #252]	; (8003f98 <xPortStartScheduler+0x128>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10a      	bne.n	8003eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	60fb      	str	r3, [r7, #12]
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eb6:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <xPortStartScheduler+0x12c>)
 8003eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <xPortStartScheduler+0x130>)
 8003edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ede:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003ee0:	2207      	movs	r2, #7
 8003ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ee4:	e009      	b.n	8003efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	4a2d      	ldr	r2, [pc, #180]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d0ef      	beq.n	8003ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f06:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1c3 0307 	rsb	r3, r3, #7
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d00a      	beq.n	8003f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	60bb      	str	r3, [r7, #8]
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f28:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f3a:	4a1a      	ldr	r2, [pc, #104]	; (8003fa4 <xPortStartScheduler+0x134>)
 8003f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <xPortStartScheduler+0x138>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <xPortStartScheduler+0x138>)
 8003f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <xPortStartScheduler+0x138>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <xPortStartScheduler+0x138>)
 8003f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f5e:	f000 f8dd 	bl	800411c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <xPortStartScheduler+0x13c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f68:	f000 f8fc 	bl	8004164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f6c:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <xPortStartScheduler+0x140>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0f      	ldr	r2, [pc, #60]	; (8003fb0 <xPortStartScheduler+0x140>)
 8003f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f78:	f7ff ff66 	bl	8003e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f7c:	f7ff fd58 	bl	8003a30 <vTaskSwitchContext>
	prvTaskExitError();
 8003f80:	f7ff ff22 	bl	8003dc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	e000ed00 	.word	0xe000ed00
 8003f94:	410fc271 	.word	0x410fc271
 8003f98:	410fc270 	.word	0x410fc270
 8003f9c:	e000e400 	.word	0xe000e400
 8003fa0:	200004e0 	.word	0x200004e0
 8003fa4:	200004e4 	.word	0x200004e4
 8003fa8:	e000ed20 	.word	0xe000ed20
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	e000ef34 	.word	0xe000ef34

08003fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	607b      	str	r3, [r7, #4]
}
 8003fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <vPortEnterCritical+0x58>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	4a0d      	ldr	r2, [pc, #52]	; (800400c <vPortEnterCritical+0x58>)
 8003fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <vPortEnterCritical+0x58>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10f      	bne.n	8004000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <vPortEnterCritical+0x5c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <vPortEnterCritical+0x4c>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	603b      	str	r3, [r7, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <vPortEnterCritical+0x4a>
	}
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	2000000c 	.word	0x2000000c
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <vPortExitCritical+0x50>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <vPortExitCritical+0x24>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	607b      	str	r3, [r7, #4]
}
 8004034:	bf00      	nop
 8004036:	e7fe      	b.n	8004036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <vPortExitCritical+0x50>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3b01      	subs	r3, #1
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <vPortExitCritical+0x50>)
 8004040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <vPortExitCritical+0x50>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <vPortExitCritical+0x42>
 800404a:	2300      	movs	r3, #0
 800404c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
	...

08004070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004070:	f3ef 8009 	mrs	r0, PSP
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <pxCurrentTCBConst>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	f01e 0f10 	tst.w	lr, #16
 8004080:	bf08      	it	eq
 8004082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408a:	6010      	str	r0, [r2, #0]
 800408c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004094:	f380 8811 	msr	BASEPRI, r0
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f7ff fcc6 	bl	8003a30 <vTaskSwitchContext>
 80040a4:	f04f 0000 	mov.w	r0, #0
 80040a8:	f380 8811 	msr	BASEPRI, r0
 80040ac:	bc09      	pop	{r0, r3}
 80040ae:	6819      	ldr	r1, [r3, #0]
 80040b0:	6808      	ldr	r0, [r1, #0]
 80040b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b6:	f01e 0f10 	tst.w	lr, #16
 80040ba:	bf08      	it	eq
 80040bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040c0:	f380 8809 	msr	PSP, r0
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	f3af 8000 	nop.w

080040d0 <pxCurrentTCBConst>:
 80040d0:	200003b4 	.word	0x200003b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop

080040d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
}
 80040f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040f2:	f7ff fbe5 	bl	80038c0 <xTaskIncrementTick>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <SysTick_Handler+0x40>)
 80040fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	2300      	movs	r3, #0
 8004106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f383 8811 	msr	BASEPRI, r3
}
 800410e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	e000ed04 	.word	0xe000ed04

0800411c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <vPortSetupTimerInterrupt+0x34>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <vPortSetupTimerInterrupt+0x38>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <vPortSetupTimerInterrupt+0x3c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0a      	ldr	r2, [pc, #40]	; (800415c <vPortSetupTimerInterrupt+0x40>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <vPortSetupTimerInterrupt+0x44>)
 800413a:	3b01      	subs	r3, #1
 800413c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800413e:	4b04      	ldr	r3, [pc, #16]	; (8004150 <vPortSetupTimerInterrupt+0x34>)
 8004140:	2207      	movs	r2, #7
 8004142:	601a      	str	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000e010 	.word	0xe000e010
 8004154:	e000e018 	.word	0xe000e018
 8004158:	20000000 	.word	0x20000000
 800415c:	10624dd3 	.word	0x10624dd3
 8004160:	e000e014 	.word	0xe000e014

08004164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004174 <vPortEnableVFP+0x10>
 8004168:	6801      	ldr	r1, [r0, #0]
 800416a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800416e:	6001      	str	r1, [r0, #0]
 8004170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004172:	bf00      	nop
 8004174:	e000ed88 	.word	0xe000ed88

08004178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004184:	f7ff faf2 	bl	800376c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004188:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <pvPortMalloc+0x180>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004190:	f000 f920 	bl	80043d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004194:	4b59      	ldr	r3, [pc, #356]	; (80042fc <pvPortMalloc+0x184>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 8093 	bne.w	80042c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01d      	beq.n	80041e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041a8:	2208      	movs	r2, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f023 0307 	bic.w	r3, r3, #7
 80041c0:	3308      	adds	r3, #8
 80041c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <pvPortMalloc+0x6c>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	617b      	str	r3, [r7, #20]
}
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d06e      	beq.n	80042c8 <pvPortMalloc+0x150>
 80041ea:	4b45      	ldr	r3, [pc, #276]	; (8004300 <pvPortMalloc+0x188>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d869      	bhi.n	80042c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041f4:	4b43      	ldr	r3, [pc, #268]	; (8004304 <pvPortMalloc+0x18c>)
 80041f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041f8:	4b42      	ldr	r3, [pc, #264]	; (8004304 <pvPortMalloc+0x18c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041fe:	e004      	b.n	800420a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d903      	bls.n	800421c <pvPortMalloc+0xa4>
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f1      	bne.n	8004200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <pvPortMalloc+0x180>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004222:	429a      	cmp	r2, r3
 8004224:	d050      	beq.n	80042c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2208      	movs	r2, #8
 800422c:	4413      	add	r3, r2
 800422e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1ad2      	subs	r2, r2, r3
 8004240:	2308      	movs	r3, #8
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	429a      	cmp	r2, r3
 8004246:	d91f      	bls.n	8004288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <pvPortMalloc+0xf8>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	613b      	str	r3, [r7, #16]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	1ad2      	subs	r2, r2, r3
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004282:	69b8      	ldr	r0, [r7, #24]
 8004284:	f000 f908 	bl	8004498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <pvPortMalloc+0x188>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <pvPortMalloc+0x188>)
 8004294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <pvPortMalloc+0x188>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <pvPortMalloc+0x190>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d203      	bcs.n	80042aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042a2:	4b17      	ldr	r3, [pc, #92]	; (8004300 <pvPortMalloc+0x188>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a18      	ldr	r2, [pc, #96]	; (8004308 <pvPortMalloc+0x190>)
 80042a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <pvPortMalloc+0x184>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <pvPortMalloc+0x194>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	4a11      	ldr	r2, [pc, #68]	; (800430c <pvPortMalloc+0x194>)
 80042c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042c8:	f7ff fa5e 	bl	8003788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <pvPortMalloc+0x174>
	__asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	60fb      	str	r3, [r7, #12]
}
 80042e8:	bf00      	nop
 80042ea:	e7fe      	b.n	80042ea <pvPortMalloc+0x172>
	return pvReturn;
 80042ec:	69fb      	ldr	r3, [r7, #28]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3728      	adds	r7, #40	; 0x28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	200040f0 	.word	0x200040f0
 80042fc:	20004104 	.word	0x20004104
 8004300:	200040f4 	.word	0x200040f4
 8004304:	200040e8 	.word	0x200040e8
 8004308:	200040f8 	.word	0x200040f8
 800430c:	200040fc 	.word	0x200040fc

08004310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d04d      	beq.n	80043be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004322:	2308      	movs	r3, #8
 8004324:	425b      	negs	r3, r3
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <vPortFree+0xb8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <vPortFree+0x44>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	60fb      	str	r3, [r7, #12]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <vPortFree+0x62>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	60bb      	str	r3, [r7, #8]
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <vPortFree+0xb8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01e      	beq.n	80043be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d11a      	bne.n	80043be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <vPortFree+0xb8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	43db      	mvns	r3, r3
 8004392:	401a      	ands	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004398:	f7ff f9e8 	bl	800376c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <vPortFree+0xbc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <vPortFree+0xbc>)
 80043a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043aa:	6938      	ldr	r0, [r7, #16]
 80043ac:	f000 f874 	bl	8004498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80043b0:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <vPortFree+0xc0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3301      	adds	r3, #1
 80043b6:	4a06      	ldr	r2, [pc, #24]	; (80043d0 <vPortFree+0xc0>)
 80043b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80043ba:	f7ff f9e5 	bl	8003788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20004104 	.word	0x20004104
 80043cc:	200040f4 	.word	0x200040f4
 80043d0:	20004100 	.word	0x20004100

080043d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80043de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <prvHeapInit+0xac>)
 80043e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00c      	beq.n	8004408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3307      	adds	r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	4a1f      	ldr	r2, [pc, #124]	; (8004480 <prvHeapInit+0xac>)
 8004404:	4413      	add	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800440c:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <prvHeapInit+0xb0>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004412:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <prvHeapInit+0xb0>)
 8004414:	2200      	movs	r2, #0
 8004416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4413      	add	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004420:	2208      	movs	r2, #8
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0307 	bic.w	r3, r3, #7
 800442e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a15      	ldr	r2, [pc, #84]	; (8004488 <prvHeapInit+0xb4>)
 8004434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <prvHeapInit+0xb4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2200      	movs	r2, #0
 800443c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <prvHeapInit+0xb4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	1ad2      	subs	r2, r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <prvHeapInit+0xb4>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4a0a      	ldr	r2, [pc, #40]	; (800448c <prvHeapInit+0xb8>)
 8004462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a09      	ldr	r2, [pc, #36]	; (8004490 <prvHeapInit+0xbc>)
 800446a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <prvHeapInit+0xc0>)
 800446e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004472:	601a      	str	r2, [r3, #0]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	200004e8 	.word	0x200004e8
 8004484:	200040e8 	.word	0x200040e8
 8004488:	200040f0 	.word	0x200040f0
 800448c:	200040f8 	.word	0x200040f8
 8004490:	200040f4 	.word	0x200040f4
 8004494:	20004104 	.word	0x20004104

08004498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044a0:	4b28      	ldr	r3, [pc, #160]	; (8004544 <prvInsertBlockIntoFreeList+0xac>)
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e002      	b.n	80044ac <prvInsertBlockIntoFreeList+0x14>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d8f7      	bhi.n	80044a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d108      	bne.n	80044da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	441a      	add	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	441a      	add	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d118      	bne.n	8004520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <prvInsertBlockIntoFreeList+0xb0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d00d      	beq.n	8004516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e008      	b.n	8004528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <prvInsertBlockIntoFreeList+0xb0>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e003      	b.n	8004528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d002      	beq.n	8004536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	200040e8 	.word	0x200040e8
 8004548:	200040f0 	.word	0x200040f0

0800454c <__errno>:
 800454c:	4b01      	ldr	r3, [pc, #4]	; (8004554 <__errno+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000010 	.word	0x20000010

08004558 <__libc_init_array>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4d0d      	ldr	r5, [pc, #52]	; (8004590 <__libc_init_array+0x38>)
 800455c:	4c0d      	ldr	r4, [pc, #52]	; (8004594 <__libc_init_array+0x3c>)
 800455e:	1b64      	subs	r4, r4, r5
 8004560:	10a4      	asrs	r4, r4, #2
 8004562:	2600      	movs	r6, #0
 8004564:	42a6      	cmp	r6, r4
 8004566:	d109      	bne.n	800457c <__libc_init_array+0x24>
 8004568:	4d0b      	ldr	r5, [pc, #44]	; (8004598 <__libc_init_array+0x40>)
 800456a:	4c0c      	ldr	r4, [pc, #48]	; (800459c <__libc_init_array+0x44>)
 800456c:	f000 fc8e 	bl	8004e8c <_init>
 8004570:	1b64      	subs	r4, r4, r5
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	2600      	movs	r6, #0
 8004576:	42a6      	cmp	r6, r4
 8004578:	d105      	bne.n	8004586 <__libc_init_array+0x2e>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004580:	4798      	blx	r3
 8004582:	3601      	adds	r6, #1
 8004584:	e7ee      	b.n	8004564 <__libc_init_array+0xc>
 8004586:	f855 3b04 	ldr.w	r3, [r5], #4
 800458a:	4798      	blx	r3
 800458c:	3601      	adds	r6, #1
 800458e:	e7f2      	b.n	8004576 <__libc_init_array+0x1e>
 8004590:	08004f70 	.word	0x08004f70
 8004594:	08004f70 	.word	0x08004f70
 8004598:	08004f70 	.word	0x08004f70
 800459c:	08004f74 	.word	0x08004f74

080045a0 <memcpy>:
 80045a0:	440a      	add	r2, r1
 80045a2:	4291      	cmp	r1, r2
 80045a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045a8:	d100      	bne.n	80045ac <memcpy+0xc>
 80045aa:	4770      	bx	lr
 80045ac:	b510      	push	{r4, lr}
 80045ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b6:	4291      	cmp	r1, r2
 80045b8:	d1f9      	bne.n	80045ae <memcpy+0xe>
 80045ba:	bd10      	pop	{r4, pc}

080045bc <memset>:
 80045bc:	4402      	add	r2, r0
 80045be:	4603      	mov	r3, r0
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d100      	bne.n	80045c6 <memset+0xa>
 80045c4:	4770      	bx	lr
 80045c6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ca:	e7f9      	b.n	80045c0 <memset+0x4>

080045cc <siprintf>:
 80045cc:	b40e      	push	{r1, r2, r3}
 80045ce:	b500      	push	{lr}
 80045d0:	b09c      	sub	sp, #112	; 0x70
 80045d2:	ab1d      	add	r3, sp, #116	; 0x74
 80045d4:	9002      	str	r0, [sp, #8]
 80045d6:	9006      	str	r0, [sp, #24]
 80045d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045dc:	4809      	ldr	r0, [pc, #36]	; (8004604 <siprintf+0x38>)
 80045de:	9107      	str	r1, [sp, #28]
 80045e0:	9104      	str	r1, [sp, #16]
 80045e2:	4909      	ldr	r1, [pc, #36]	; (8004608 <siprintf+0x3c>)
 80045e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e8:	9105      	str	r1, [sp, #20]
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	a902      	add	r1, sp, #8
 80045f0:	f000 f868 	bl	80046c4 <_svfiprintf_r>
 80045f4:	9b02      	ldr	r3, [sp, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	b01c      	add	sp, #112	; 0x70
 80045fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004600:	b003      	add	sp, #12
 8004602:	4770      	bx	lr
 8004604:	20000010 	.word	0x20000010
 8004608:	ffff0208 	.word	0xffff0208

0800460c <__ssputs_r>:
 800460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	688e      	ldr	r6, [r1, #8]
 8004612:	429e      	cmp	r6, r3
 8004614:	4682      	mov	sl, r0
 8004616:	460c      	mov	r4, r1
 8004618:	4690      	mov	r8, r2
 800461a:	461f      	mov	r7, r3
 800461c:	d838      	bhi.n	8004690 <__ssputs_r+0x84>
 800461e:	898a      	ldrh	r2, [r1, #12]
 8004620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004624:	d032      	beq.n	800468c <__ssputs_r+0x80>
 8004626:	6825      	ldr	r5, [r4, #0]
 8004628:	6909      	ldr	r1, [r1, #16]
 800462a:	eba5 0901 	sub.w	r9, r5, r1
 800462e:	6965      	ldr	r5, [r4, #20]
 8004630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004638:	3301      	adds	r3, #1
 800463a:	444b      	add	r3, r9
 800463c:	106d      	asrs	r5, r5, #1
 800463e:	429d      	cmp	r5, r3
 8004640:	bf38      	it	cc
 8004642:	461d      	movcc	r5, r3
 8004644:	0553      	lsls	r3, r2, #21
 8004646:	d531      	bpl.n	80046ac <__ssputs_r+0xa0>
 8004648:	4629      	mov	r1, r5
 800464a:	f000 fb55 	bl	8004cf8 <_malloc_r>
 800464e:	4606      	mov	r6, r0
 8004650:	b950      	cbnz	r0, 8004668 <__ssputs_r+0x5c>
 8004652:	230c      	movs	r3, #12
 8004654:	f8ca 3000 	str.w	r3, [sl]
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004668:	6921      	ldr	r1, [r4, #16]
 800466a:	464a      	mov	r2, r9
 800466c:	f7ff ff98 	bl	80045a0 <memcpy>
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	6126      	str	r6, [r4, #16]
 800467e:	6165      	str	r5, [r4, #20]
 8004680:	444e      	add	r6, r9
 8004682:	eba5 0509 	sub.w	r5, r5, r9
 8004686:	6026      	str	r6, [r4, #0]
 8004688:	60a5      	str	r5, [r4, #8]
 800468a:	463e      	mov	r6, r7
 800468c:	42be      	cmp	r6, r7
 800468e:	d900      	bls.n	8004692 <__ssputs_r+0x86>
 8004690:	463e      	mov	r6, r7
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	4632      	mov	r2, r6
 8004696:	4641      	mov	r1, r8
 8004698:	f000 faa8 	bl	8004bec <memmove>
 800469c:	68a3      	ldr	r3, [r4, #8]
 800469e:	1b9b      	subs	r3, r3, r6
 80046a0:	60a3      	str	r3, [r4, #8]
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	4433      	add	r3, r6
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	2000      	movs	r0, #0
 80046aa:	e7db      	b.n	8004664 <__ssputs_r+0x58>
 80046ac:	462a      	mov	r2, r5
 80046ae:	f000 fb97 	bl	8004de0 <_realloc_r>
 80046b2:	4606      	mov	r6, r0
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d1e1      	bne.n	800467c <__ssputs_r+0x70>
 80046b8:	6921      	ldr	r1, [r4, #16]
 80046ba:	4650      	mov	r0, sl
 80046bc:	f000 fab0 	bl	8004c20 <_free_r>
 80046c0:	e7c7      	b.n	8004652 <__ssputs_r+0x46>
	...

080046c4 <_svfiprintf_r>:
 80046c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c8:	4698      	mov	r8, r3
 80046ca:	898b      	ldrh	r3, [r1, #12]
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	b09d      	sub	sp, #116	; 0x74
 80046d0:	4607      	mov	r7, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	4614      	mov	r4, r2
 80046d6:	d50e      	bpl.n	80046f6 <_svfiprintf_r+0x32>
 80046d8:	690b      	ldr	r3, [r1, #16]
 80046da:	b963      	cbnz	r3, 80046f6 <_svfiprintf_r+0x32>
 80046dc:	2140      	movs	r1, #64	; 0x40
 80046de:	f000 fb0b 	bl	8004cf8 <_malloc_r>
 80046e2:	6028      	str	r0, [r5, #0]
 80046e4:	6128      	str	r0, [r5, #16]
 80046e6:	b920      	cbnz	r0, 80046f2 <_svfiprintf_r+0x2e>
 80046e8:	230c      	movs	r3, #12
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	e0d1      	b.n	8004896 <_svfiprintf_r+0x1d2>
 80046f2:	2340      	movs	r3, #64	; 0x40
 80046f4:	616b      	str	r3, [r5, #20]
 80046f6:	2300      	movs	r3, #0
 80046f8:	9309      	str	r3, [sp, #36]	; 0x24
 80046fa:	2320      	movs	r3, #32
 80046fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004700:	f8cd 800c 	str.w	r8, [sp, #12]
 8004704:	2330      	movs	r3, #48	; 0x30
 8004706:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048b0 <_svfiprintf_r+0x1ec>
 800470a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800470e:	f04f 0901 	mov.w	r9, #1
 8004712:	4623      	mov	r3, r4
 8004714:	469a      	mov	sl, r3
 8004716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800471a:	b10a      	cbz	r2, 8004720 <_svfiprintf_r+0x5c>
 800471c:	2a25      	cmp	r2, #37	; 0x25
 800471e:	d1f9      	bne.n	8004714 <_svfiprintf_r+0x50>
 8004720:	ebba 0b04 	subs.w	fp, sl, r4
 8004724:	d00b      	beq.n	800473e <_svfiprintf_r+0x7a>
 8004726:	465b      	mov	r3, fp
 8004728:	4622      	mov	r2, r4
 800472a:	4629      	mov	r1, r5
 800472c:	4638      	mov	r0, r7
 800472e:	f7ff ff6d 	bl	800460c <__ssputs_r>
 8004732:	3001      	adds	r0, #1
 8004734:	f000 80aa 	beq.w	800488c <_svfiprintf_r+0x1c8>
 8004738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800473a:	445a      	add	r2, fp
 800473c:	9209      	str	r2, [sp, #36]	; 0x24
 800473e:	f89a 3000 	ldrb.w	r3, [sl]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80a2 	beq.w	800488c <_svfiprintf_r+0x1c8>
 8004748:	2300      	movs	r3, #0
 800474a:	f04f 32ff 	mov.w	r2, #4294967295
 800474e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004752:	f10a 0a01 	add.w	sl, sl, #1
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	9307      	str	r3, [sp, #28]
 800475a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800475e:	931a      	str	r3, [sp, #104]	; 0x68
 8004760:	4654      	mov	r4, sl
 8004762:	2205      	movs	r2, #5
 8004764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004768:	4851      	ldr	r0, [pc, #324]	; (80048b0 <_svfiprintf_r+0x1ec>)
 800476a:	f7fb fd31 	bl	80001d0 <memchr>
 800476e:	9a04      	ldr	r2, [sp, #16]
 8004770:	b9d8      	cbnz	r0, 80047aa <_svfiprintf_r+0xe6>
 8004772:	06d0      	lsls	r0, r2, #27
 8004774:	bf44      	itt	mi
 8004776:	2320      	movmi	r3, #32
 8004778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800477c:	0711      	lsls	r1, r2, #28
 800477e:	bf44      	itt	mi
 8004780:	232b      	movmi	r3, #43	; 0x2b
 8004782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004786:	f89a 3000 	ldrb.w	r3, [sl]
 800478a:	2b2a      	cmp	r3, #42	; 0x2a
 800478c:	d015      	beq.n	80047ba <_svfiprintf_r+0xf6>
 800478e:	9a07      	ldr	r2, [sp, #28]
 8004790:	4654      	mov	r4, sl
 8004792:	2000      	movs	r0, #0
 8004794:	f04f 0c0a 	mov.w	ip, #10
 8004798:	4621      	mov	r1, r4
 800479a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800479e:	3b30      	subs	r3, #48	; 0x30
 80047a0:	2b09      	cmp	r3, #9
 80047a2:	d94e      	bls.n	8004842 <_svfiprintf_r+0x17e>
 80047a4:	b1b0      	cbz	r0, 80047d4 <_svfiprintf_r+0x110>
 80047a6:	9207      	str	r2, [sp, #28]
 80047a8:	e014      	b.n	80047d4 <_svfiprintf_r+0x110>
 80047aa:	eba0 0308 	sub.w	r3, r0, r8
 80047ae:	fa09 f303 	lsl.w	r3, r9, r3
 80047b2:	4313      	orrs	r3, r2
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	46a2      	mov	sl, r4
 80047b8:	e7d2      	b.n	8004760 <_svfiprintf_r+0x9c>
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	1d19      	adds	r1, r3, #4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	9103      	str	r1, [sp, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bfbb      	ittet	lt
 80047c6:	425b      	neglt	r3, r3
 80047c8:	f042 0202 	orrlt.w	r2, r2, #2
 80047cc:	9307      	strge	r3, [sp, #28]
 80047ce:	9307      	strlt	r3, [sp, #28]
 80047d0:	bfb8      	it	lt
 80047d2:	9204      	strlt	r2, [sp, #16]
 80047d4:	7823      	ldrb	r3, [r4, #0]
 80047d6:	2b2e      	cmp	r3, #46	; 0x2e
 80047d8:	d10c      	bne.n	80047f4 <_svfiprintf_r+0x130>
 80047da:	7863      	ldrb	r3, [r4, #1]
 80047dc:	2b2a      	cmp	r3, #42	; 0x2a
 80047de:	d135      	bne.n	800484c <_svfiprintf_r+0x188>
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	9203      	str	r2, [sp, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfb8      	it	lt
 80047ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80047f0:	3402      	adds	r4, #2
 80047f2:	9305      	str	r3, [sp, #20]
 80047f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048c0 <_svfiprintf_r+0x1fc>
 80047f8:	7821      	ldrb	r1, [r4, #0]
 80047fa:	2203      	movs	r2, #3
 80047fc:	4650      	mov	r0, sl
 80047fe:	f7fb fce7 	bl	80001d0 <memchr>
 8004802:	b140      	cbz	r0, 8004816 <_svfiprintf_r+0x152>
 8004804:	2340      	movs	r3, #64	; 0x40
 8004806:	eba0 000a 	sub.w	r0, r0, sl
 800480a:	fa03 f000 	lsl.w	r0, r3, r0
 800480e:	9b04      	ldr	r3, [sp, #16]
 8004810:	4303      	orrs	r3, r0
 8004812:	3401      	adds	r4, #1
 8004814:	9304      	str	r3, [sp, #16]
 8004816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800481a:	4826      	ldr	r0, [pc, #152]	; (80048b4 <_svfiprintf_r+0x1f0>)
 800481c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004820:	2206      	movs	r2, #6
 8004822:	f7fb fcd5 	bl	80001d0 <memchr>
 8004826:	2800      	cmp	r0, #0
 8004828:	d038      	beq.n	800489c <_svfiprintf_r+0x1d8>
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <_svfiprintf_r+0x1f4>)
 800482c:	bb1b      	cbnz	r3, 8004876 <_svfiprintf_r+0x1b2>
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	3307      	adds	r3, #7
 8004832:	f023 0307 	bic.w	r3, r3, #7
 8004836:	3308      	adds	r3, #8
 8004838:	9303      	str	r3, [sp, #12]
 800483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483c:	4433      	add	r3, r6
 800483e:	9309      	str	r3, [sp, #36]	; 0x24
 8004840:	e767      	b.n	8004712 <_svfiprintf_r+0x4e>
 8004842:	fb0c 3202 	mla	r2, ip, r2, r3
 8004846:	460c      	mov	r4, r1
 8004848:	2001      	movs	r0, #1
 800484a:	e7a5      	b.n	8004798 <_svfiprintf_r+0xd4>
 800484c:	2300      	movs	r3, #0
 800484e:	3401      	adds	r4, #1
 8004850:	9305      	str	r3, [sp, #20]
 8004852:	4619      	mov	r1, r3
 8004854:	f04f 0c0a 	mov.w	ip, #10
 8004858:	4620      	mov	r0, r4
 800485a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800485e:	3a30      	subs	r2, #48	; 0x30
 8004860:	2a09      	cmp	r2, #9
 8004862:	d903      	bls.n	800486c <_svfiprintf_r+0x1a8>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0c5      	beq.n	80047f4 <_svfiprintf_r+0x130>
 8004868:	9105      	str	r1, [sp, #20]
 800486a:	e7c3      	b.n	80047f4 <_svfiprintf_r+0x130>
 800486c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004870:	4604      	mov	r4, r0
 8004872:	2301      	movs	r3, #1
 8004874:	e7f0      	b.n	8004858 <_svfiprintf_r+0x194>
 8004876:	ab03      	add	r3, sp, #12
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	462a      	mov	r2, r5
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <_svfiprintf_r+0x1f8>)
 800487e:	a904      	add	r1, sp, #16
 8004880:	4638      	mov	r0, r7
 8004882:	f3af 8000 	nop.w
 8004886:	1c42      	adds	r2, r0, #1
 8004888:	4606      	mov	r6, r0
 800488a:	d1d6      	bne.n	800483a <_svfiprintf_r+0x176>
 800488c:	89ab      	ldrh	r3, [r5, #12]
 800488e:	065b      	lsls	r3, r3, #25
 8004890:	f53f af2c 	bmi.w	80046ec <_svfiprintf_r+0x28>
 8004894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004896:	b01d      	add	sp, #116	; 0x74
 8004898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489c:	ab03      	add	r3, sp, #12
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	462a      	mov	r2, r5
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <_svfiprintf_r+0x1f8>)
 80048a4:	a904      	add	r1, sp, #16
 80048a6:	4638      	mov	r0, r7
 80048a8:	f000 f87a 	bl	80049a0 <_printf_i>
 80048ac:	e7eb      	b.n	8004886 <_svfiprintf_r+0x1c2>
 80048ae:	bf00      	nop
 80048b0:	08004f34 	.word	0x08004f34
 80048b4:	08004f3e 	.word	0x08004f3e
 80048b8:	00000000 	.word	0x00000000
 80048bc:	0800460d 	.word	0x0800460d
 80048c0:	08004f3a 	.word	0x08004f3a

080048c4 <_printf_common>:
 80048c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c8:	4616      	mov	r6, r2
 80048ca:	4699      	mov	r9, r3
 80048cc:	688a      	ldr	r2, [r1, #8]
 80048ce:	690b      	ldr	r3, [r1, #16]
 80048d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bfb8      	it	lt
 80048d8:	4613      	movlt	r3, r2
 80048da:	6033      	str	r3, [r6, #0]
 80048dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048e0:	4607      	mov	r7, r0
 80048e2:	460c      	mov	r4, r1
 80048e4:	b10a      	cbz	r2, 80048ea <_printf_common+0x26>
 80048e6:	3301      	adds	r3, #1
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	0699      	lsls	r1, r3, #26
 80048ee:	bf42      	ittt	mi
 80048f0:	6833      	ldrmi	r3, [r6, #0]
 80048f2:	3302      	addmi	r3, #2
 80048f4:	6033      	strmi	r3, [r6, #0]
 80048f6:	6825      	ldr	r5, [r4, #0]
 80048f8:	f015 0506 	ands.w	r5, r5, #6
 80048fc:	d106      	bne.n	800490c <_printf_common+0x48>
 80048fe:	f104 0a19 	add.w	sl, r4, #25
 8004902:	68e3      	ldr	r3, [r4, #12]
 8004904:	6832      	ldr	r2, [r6, #0]
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	42ab      	cmp	r3, r5
 800490a:	dc26      	bgt.n	800495a <_printf_common+0x96>
 800490c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004910:	1e13      	subs	r3, r2, #0
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	bf18      	it	ne
 8004916:	2301      	movne	r3, #1
 8004918:	0692      	lsls	r2, r2, #26
 800491a:	d42b      	bmi.n	8004974 <_printf_common+0xb0>
 800491c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004920:	4649      	mov	r1, r9
 8004922:	4638      	mov	r0, r7
 8004924:	47c0      	blx	r8
 8004926:	3001      	adds	r0, #1
 8004928:	d01e      	beq.n	8004968 <_printf_common+0xa4>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	68e5      	ldr	r5, [r4, #12]
 800492e:	6832      	ldr	r2, [r6, #0]
 8004930:	f003 0306 	and.w	r3, r3, #6
 8004934:	2b04      	cmp	r3, #4
 8004936:	bf08      	it	eq
 8004938:	1aad      	subeq	r5, r5, r2
 800493a:	68a3      	ldr	r3, [r4, #8]
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	bf0c      	ite	eq
 8004940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004944:	2500      	movne	r5, #0
 8004946:	4293      	cmp	r3, r2
 8004948:	bfc4      	itt	gt
 800494a:	1a9b      	subgt	r3, r3, r2
 800494c:	18ed      	addgt	r5, r5, r3
 800494e:	2600      	movs	r6, #0
 8004950:	341a      	adds	r4, #26
 8004952:	42b5      	cmp	r5, r6
 8004954:	d11a      	bne.n	800498c <_printf_common+0xc8>
 8004956:	2000      	movs	r0, #0
 8004958:	e008      	b.n	800496c <_printf_common+0xa8>
 800495a:	2301      	movs	r3, #1
 800495c:	4652      	mov	r2, sl
 800495e:	4649      	mov	r1, r9
 8004960:	4638      	mov	r0, r7
 8004962:	47c0      	blx	r8
 8004964:	3001      	adds	r0, #1
 8004966:	d103      	bne.n	8004970 <_printf_common+0xac>
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004970:	3501      	adds	r5, #1
 8004972:	e7c6      	b.n	8004902 <_printf_common+0x3e>
 8004974:	18e1      	adds	r1, r4, r3
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	2030      	movs	r0, #48	; 0x30
 800497a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800497e:	4422      	add	r2, r4
 8004980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004988:	3302      	adds	r3, #2
 800498a:	e7c7      	b.n	800491c <_printf_common+0x58>
 800498c:	2301      	movs	r3, #1
 800498e:	4622      	mov	r2, r4
 8004990:	4649      	mov	r1, r9
 8004992:	4638      	mov	r0, r7
 8004994:	47c0      	blx	r8
 8004996:	3001      	adds	r0, #1
 8004998:	d0e6      	beq.n	8004968 <_printf_common+0xa4>
 800499a:	3601      	adds	r6, #1
 800499c:	e7d9      	b.n	8004952 <_printf_common+0x8e>
	...

080049a0 <_printf_i>:
 80049a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a4:	7e0f      	ldrb	r7, [r1, #24]
 80049a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049a8:	2f78      	cmp	r7, #120	; 0x78
 80049aa:	4691      	mov	r9, r2
 80049ac:	4680      	mov	r8, r0
 80049ae:	460c      	mov	r4, r1
 80049b0:	469a      	mov	sl, r3
 80049b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049b6:	d807      	bhi.n	80049c8 <_printf_i+0x28>
 80049b8:	2f62      	cmp	r7, #98	; 0x62
 80049ba:	d80a      	bhi.n	80049d2 <_printf_i+0x32>
 80049bc:	2f00      	cmp	r7, #0
 80049be:	f000 80d8 	beq.w	8004b72 <_printf_i+0x1d2>
 80049c2:	2f58      	cmp	r7, #88	; 0x58
 80049c4:	f000 80a3 	beq.w	8004b0e <_printf_i+0x16e>
 80049c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049d0:	e03a      	b.n	8004a48 <_printf_i+0xa8>
 80049d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049d6:	2b15      	cmp	r3, #21
 80049d8:	d8f6      	bhi.n	80049c8 <_printf_i+0x28>
 80049da:	a101      	add	r1, pc, #4	; (adr r1, 80049e0 <_printf_i+0x40>)
 80049dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e0:	08004a39 	.word	0x08004a39
 80049e4:	08004a4d 	.word	0x08004a4d
 80049e8:	080049c9 	.word	0x080049c9
 80049ec:	080049c9 	.word	0x080049c9
 80049f0:	080049c9 	.word	0x080049c9
 80049f4:	080049c9 	.word	0x080049c9
 80049f8:	08004a4d 	.word	0x08004a4d
 80049fc:	080049c9 	.word	0x080049c9
 8004a00:	080049c9 	.word	0x080049c9
 8004a04:	080049c9 	.word	0x080049c9
 8004a08:	080049c9 	.word	0x080049c9
 8004a0c:	08004b59 	.word	0x08004b59
 8004a10:	08004a7d 	.word	0x08004a7d
 8004a14:	08004b3b 	.word	0x08004b3b
 8004a18:	080049c9 	.word	0x080049c9
 8004a1c:	080049c9 	.word	0x080049c9
 8004a20:	08004b7b 	.word	0x08004b7b
 8004a24:	080049c9 	.word	0x080049c9
 8004a28:	08004a7d 	.word	0x08004a7d
 8004a2c:	080049c9 	.word	0x080049c9
 8004a30:	080049c9 	.word	0x080049c9
 8004a34:	08004b43 	.word	0x08004b43
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	1d1a      	adds	r2, r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	602a      	str	r2, [r5, #0]
 8004a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0a3      	b.n	8004b94 <_printf_i+0x1f4>
 8004a4c:	6820      	ldr	r0, [r4, #0]
 8004a4e:	6829      	ldr	r1, [r5, #0]
 8004a50:	0606      	lsls	r6, r0, #24
 8004a52:	f101 0304 	add.w	r3, r1, #4
 8004a56:	d50a      	bpl.n	8004a6e <_printf_i+0xce>
 8004a58:	680e      	ldr	r6, [r1, #0]
 8004a5a:	602b      	str	r3, [r5, #0]
 8004a5c:	2e00      	cmp	r6, #0
 8004a5e:	da03      	bge.n	8004a68 <_printf_i+0xc8>
 8004a60:	232d      	movs	r3, #45	; 0x2d
 8004a62:	4276      	negs	r6, r6
 8004a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a68:	485e      	ldr	r0, [pc, #376]	; (8004be4 <_printf_i+0x244>)
 8004a6a:	230a      	movs	r3, #10
 8004a6c:	e019      	b.n	8004aa2 <_printf_i+0x102>
 8004a6e:	680e      	ldr	r6, [r1, #0]
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a76:	bf18      	it	ne
 8004a78:	b236      	sxthne	r6, r6
 8004a7a:	e7ef      	b.n	8004a5c <_printf_i+0xbc>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	6820      	ldr	r0, [r4, #0]
 8004a80:	1d19      	adds	r1, r3, #4
 8004a82:	6029      	str	r1, [r5, #0]
 8004a84:	0601      	lsls	r1, r0, #24
 8004a86:	d501      	bpl.n	8004a8c <_printf_i+0xec>
 8004a88:	681e      	ldr	r6, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <_printf_i+0xf2>
 8004a8c:	0646      	lsls	r6, r0, #25
 8004a8e:	d5fb      	bpl.n	8004a88 <_printf_i+0xe8>
 8004a90:	881e      	ldrh	r6, [r3, #0]
 8004a92:	4854      	ldr	r0, [pc, #336]	; (8004be4 <_printf_i+0x244>)
 8004a94:	2f6f      	cmp	r7, #111	; 0x6f
 8004a96:	bf0c      	ite	eq
 8004a98:	2308      	moveq	r3, #8
 8004a9a:	230a      	movne	r3, #10
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aa2:	6865      	ldr	r5, [r4, #4]
 8004aa4:	60a5      	str	r5, [r4, #8]
 8004aa6:	2d00      	cmp	r5, #0
 8004aa8:	bfa2      	ittt	ge
 8004aaa:	6821      	ldrge	r1, [r4, #0]
 8004aac:	f021 0104 	bicge.w	r1, r1, #4
 8004ab0:	6021      	strge	r1, [r4, #0]
 8004ab2:	b90e      	cbnz	r6, 8004ab8 <_printf_i+0x118>
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	d04d      	beq.n	8004b54 <_printf_i+0x1b4>
 8004ab8:	4615      	mov	r5, r2
 8004aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8004abe:	fb03 6711 	mls	r7, r3, r1, r6
 8004ac2:	5dc7      	ldrb	r7, [r0, r7]
 8004ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ac8:	4637      	mov	r7, r6
 8004aca:	42bb      	cmp	r3, r7
 8004acc:	460e      	mov	r6, r1
 8004ace:	d9f4      	bls.n	8004aba <_printf_i+0x11a>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d10b      	bne.n	8004aec <_printf_i+0x14c>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	07de      	lsls	r6, r3, #31
 8004ad8:	d508      	bpl.n	8004aec <_printf_i+0x14c>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	6861      	ldr	r1, [r4, #4]
 8004ade:	4299      	cmp	r1, r3
 8004ae0:	bfde      	ittt	le
 8004ae2:	2330      	movle	r3, #48	; 0x30
 8004ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aec:	1b52      	subs	r2, r2, r5
 8004aee:	6122      	str	r2, [r4, #16]
 8004af0:	f8cd a000 	str.w	sl, [sp]
 8004af4:	464b      	mov	r3, r9
 8004af6:	aa03      	add	r2, sp, #12
 8004af8:	4621      	mov	r1, r4
 8004afa:	4640      	mov	r0, r8
 8004afc:	f7ff fee2 	bl	80048c4 <_printf_common>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d14c      	bne.n	8004b9e <_printf_i+0x1fe>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	b004      	add	sp, #16
 8004b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0e:	4835      	ldr	r0, [pc, #212]	; (8004be4 <_printf_i+0x244>)
 8004b10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b14:	6829      	ldr	r1, [r5, #0]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b1c:	6029      	str	r1, [r5, #0]
 8004b1e:	061d      	lsls	r5, r3, #24
 8004b20:	d514      	bpl.n	8004b4c <_printf_i+0x1ac>
 8004b22:	07df      	lsls	r7, r3, #31
 8004b24:	bf44      	itt	mi
 8004b26:	f043 0320 	orrmi.w	r3, r3, #32
 8004b2a:	6023      	strmi	r3, [r4, #0]
 8004b2c:	b91e      	cbnz	r6, 8004b36 <_printf_i+0x196>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	f023 0320 	bic.w	r3, r3, #32
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	2310      	movs	r3, #16
 8004b38:	e7b0      	b.n	8004a9c <_printf_i+0xfc>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	f043 0320 	orr.w	r3, r3, #32
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	2378      	movs	r3, #120	; 0x78
 8004b44:	4828      	ldr	r0, [pc, #160]	; (8004be8 <_printf_i+0x248>)
 8004b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b4a:	e7e3      	b.n	8004b14 <_printf_i+0x174>
 8004b4c:	0659      	lsls	r1, r3, #25
 8004b4e:	bf48      	it	mi
 8004b50:	b2b6      	uxthmi	r6, r6
 8004b52:	e7e6      	b.n	8004b22 <_printf_i+0x182>
 8004b54:	4615      	mov	r5, r2
 8004b56:	e7bb      	b.n	8004ad0 <_printf_i+0x130>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	6826      	ldr	r6, [r4, #0]
 8004b5c:	6961      	ldr	r1, [r4, #20]
 8004b5e:	1d18      	adds	r0, r3, #4
 8004b60:	6028      	str	r0, [r5, #0]
 8004b62:	0635      	lsls	r5, r6, #24
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	d501      	bpl.n	8004b6c <_printf_i+0x1cc>
 8004b68:	6019      	str	r1, [r3, #0]
 8004b6a:	e002      	b.n	8004b72 <_printf_i+0x1d2>
 8004b6c:	0670      	lsls	r0, r6, #25
 8004b6e:	d5fb      	bpl.n	8004b68 <_printf_i+0x1c8>
 8004b70:	8019      	strh	r1, [r3, #0]
 8004b72:	2300      	movs	r3, #0
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	4615      	mov	r5, r2
 8004b78:	e7ba      	b.n	8004af0 <_printf_i+0x150>
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	1d1a      	adds	r2, r3, #4
 8004b7e:	602a      	str	r2, [r5, #0]
 8004b80:	681d      	ldr	r5, [r3, #0]
 8004b82:	6862      	ldr	r2, [r4, #4]
 8004b84:	2100      	movs	r1, #0
 8004b86:	4628      	mov	r0, r5
 8004b88:	f7fb fb22 	bl	80001d0 <memchr>
 8004b8c:	b108      	cbz	r0, 8004b92 <_printf_i+0x1f2>
 8004b8e:	1b40      	subs	r0, r0, r5
 8004b90:	6060      	str	r0, [r4, #4]
 8004b92:	6863      	ldr	r3, [r4, #4]
 8004b94:	6123      	str	r3, [r4, #16]
 8004b96:	2300      	movs	r3, #0
 8004b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b9c:	e7a8      	b.n	8004af0 <_printf_i+0x150>
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	47d0      	blx	sl
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d0ab      	beq.n	8004b04 <_printf_i+0x164>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	079b      	lsls	r3, r3, #30
 8004bb0:	d413      	bmi.n	8004bda <_printf_i+0x23a>
 8004bb2:	68e0      	ldr	r0, [r4, #12]
 8004bb4:	9b03      	ldr	r3, [sp, #12]
 8004bb6:	4298      	cmp	r0, r3
 8004bb8:	bfb8      	it	lt
 8004bba:	4618      	movlt	r0, r3
 8004bbc:	e7a4      	b.n	8004b08 <_printf_i+0x168>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4632      	mov	r2, r6
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	47d0      	blx	sl
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d09b      	beq.n	8004b04 <_printf_i+0x164>
 8004bcc:	3501      	adds	r5, #1
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	9903      	ldr	r1, [sp, #12]
 8004bd2:	1a5b      	subs	r3, r3, r1
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dcf2      	bgt.n	8004bbe <_printf_i+0x21e>
 8004bd8:	e7eb      	b.n	8004bb2 <_printf_i+0x212>
 8004bda:	2500      	movs	r5, #0
 8004bdc:	f104 0619 	add.w	r6, r4, #25
 8004be0:	e7f5      	b.n	8004bce <_printf_i+0x22e>
 8004be2:	bf00      	nop
 8004be4:	08004f45 	.word	0x08004f45
 8004be8:	08004f56 	.word	0x08004f56

08004bec <memmove>:
 8004bec:	4288      	cmp	r0, r1
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	eb01 0402 	add.w	r4, r1, r2
 8004bf4:	d902      	bls.n	8004bfc <memmove+0x10>
 8004bf6:	4284      	cmp	r4, r0
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	d807      	bhi.n	8004c0c <memmove+0x20>
 8004bfc:	1e43      	subs	r3, r0, #1
 8004bfe:	42a1      	cmp	r1, r4
 8004c00:	d008      	beq.n	8004c14 <memmove+0x28>
 8004c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c0a:	e7f8      	b.n	8004bfe <memmove+0x12>
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4601      	mov	r1, r0
 8004c10:	428a      	cmp	r2, r1
 8004c12:	d100      	bne.n	8004c16 <memmove+0x2a>
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c1e:	e7f7      	b.n	8004c10 <memmove+0x24>

08004c20 <_free_r>:
 8004c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d044      	beq.n	8004cb0 <_free_r+0x90>
 8004c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c32:	bfb8      	it	lt
 8004c34:	18e4      	addlt	r4, r4, r3
 8004c36:	f000 f913 	bl	8004e60 <__malloc_lock>
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <_free_r+0x94>)
 8004c3c:	9801      	ldr	r0, [sp, #4]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	b933      	cbnz	r3, 8004c50 <_free_r+0x30>
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	6014      	str	r4, [r2, #0]
 8004c46:	b003      	add	sp, #12
 8004c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c4c:	f000 b90e 	b.w	8004e6c <__malloc_unlock>
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d908      	bls.n	8004c66 <_free_r+0x46>
 8004c54:	6825      	ldr	r5, [r4, #0]
 8004c56:	1961      	adds	r1, r4, r5
 8004c58:	428b      	cmp	r3, r1
 8004c5a:	bf01      	itttt	eq
 8004c5c:	6819      	ldreq	r1, [r3, #0]
 8004c5e:	685b      	ldreq	r3, [r3, #4]
 8004c60:	1949      	addeq	r1, r1, r5
 8004c62:	6021      	streq	r1, [r4, #0]
 8004c64:	e7ed      	b.n	8004c42 <_free_r+0x22>
 8004c66:	461a      	mov	r2, r3
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b10b      	cbz	r3, 8004c70 <_free_r+0x50>
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d9fa      	bls.n	8004c66 <_free_r+0x46>
 8004c70:	6811      	ldr	r1, [r2, #0]
 8004c72:	1855      	adds	r5, r2, r1
 8004c74:	42a5      	cmp	r5, r4
 8004c76:	d10b      	bne.n	8004c90 <_free_r+0x70>
 8004c78:	6824      	ldr	r4, [r4, #0]
 8004c7a:	4421      	add	r1, r4
 8004c7c:	1854      	adds	r4, r2, r1
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	6011      	str	r1, [r2, #0]
 8004c82:	d1e0      	bne.n	8004c46 <_free_r+0x26>
 8004c84:	681c      	ldr	r4, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	6053      	str	r3, [r2, #4]
 8004c8a:	4421      	add	r1, r4
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	e7da      	b.n	8004c46 <_free_r+0x26>
 8004c90:	d902      	bls.n	8004c98 <_free_r+0x78>
 8004c92:	230c      	movs	r3, #12
 8004c94:	6003      	str	r3, [r0, #0]
 8004c96:	e7d6      	b.n	8004c46 <_free_r+0x26>
 8004c98:	6825      	ldr	r5, [r4, #0]
 8004c9a:	1961      	adds	r1, r4, r5
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf04      	itt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	bf04      	itt	eq
 8004ca8:	1949      	addeq	r1, r1, r5
 8004caa:	6021      	streq	r1, [r4, #0]
 8004cac:	6054      	str	r4, [r2, #4]
 8004cae:	e7ca      	b.n	8004c46 <_free_r+0x26>
 8004cb0:	b003      	add	sp, #12
 8004cb2:	bd30      	pop	{r4, r5, pc}
 8004cb4:	20004108 	.word	0x20004108

08004cb8 <sbrk_aligned>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4e0e      	ldr	r6, [pc, #56]	; (8004cf4 <sbrk_aligned+0x3c>)
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	6831      	ldr	r1, [r6, #0]
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	b911      	cbnz	r1, 8004cca <sbrk_aligned+0x12>
 8004cc4:	f000 f8bc 	bl	8004e40 <_sbrk_r>
 8004cc8:	6030      	str	r0, [r6, #0]
 8004cca:	4621      	mov	r1, r4
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 f8b7 	bl	8004e40 <_sbrk_r>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	d00a      	beq.n	8004cec <sbrk_aligned+0x34>
 8004cd6:	1cc4      	adds	r4, r0, #3
 8004cd8:	f024 0403 	bic.w	r4, r4, #3
 8004cdc:	42a0      	cmp	r0, r4
 8004cde:	d007      	beq.n	8004cf0 <sbrk_aligned+0x38>
 8004ce0:	1a21      	subs	r1, r4, r0
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 f8ac 	bl	8004e40 <_sbrk_r>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d101      	bne.n	8004cf0 <sbrk_aligned+0x38>
 8004cec:	f04f 34ff 	mov.w	r4, #4294967295
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	2000410c 	.word	0x2000410c

08004cf8 <_malloc_r>:
 8004cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfc:	1ccd      	adds	r5, r1, #3
 8004cfe:	f025 0503 	bic.w	r5, r5, #3
 8004d02:	3508      	adds	r5, #8
 8004d04:	2d0c      	cmp	r5, #12
 8004d06:	bf38      	it	cc
 8004d08:	250c      	movcc	r5, #12
 8004d0a:	2d00      	cmp	r5, #0
 8004d0c:	4607      	mov	r7, r0
 8004d0e:	db01      	blt.n	8004d14 <_malloc_r+0x1c>
 8004d10:	42a9      	cmp	r1, r5
 8004d12:	d905      	bls.n	8004d20 <_malloc_r+0x28>
 8004d14:	230c      	movs	r3, #12
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	2600      	movs	r6, #0
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d20:	4e2e      	ldr	r6, [pc, #184]	; (8004ddc <_malloc_r+0xe4>)
 8004d22:	f000 f89d 	bl	8004e60 <__malloc_lock>
 8004d26:	6833      	ldr	r3, [r6, #0]
 8004d28:	461c      	mov	r4, r3
 8004d2a:	bb34      	cbnz	r4, 8004d7a <_malloc_r+0x82>
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f7ff ffc2 	bl	8004cb8 <sbrk_aligned>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	4604      	mov	r4, r0
 8004d38:	d14d      	bne.n	8004dd6 <_malloc_r+0xde>
 8004d3a:	6834      	ldr	r4, [r6, #0]
 8004d3c:	4626      	mov	r6, r4
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	d140      	bne.n	8004dc4 <_malloc_r+0xcc>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	4631      	mov	r1, r6
 8004d46:	4638      	mov	r0, r7
 8004d48:	eb04 0803 	add.w	r8, r4, r3
 8004d4c:	f000 f878 	bl	8004e40 <_sbrk_r>
 8004d50:	4580      	cmp	r8, r0
 8004d52:	d13a      	bne.n	8004dca <_malloc_r+0xd2>
 8004d54:	6821      	ldr	r1, [r4, #0]
 8004d56:	3503      	adds	r5, #3
 8004d58:	1a6d      	subs	r5, r5, r1
 8004d5a:	f025 0503 	bic.w	r5, r5, #3
 8004d5e:	3508      	adds	r5, #8
 8004d60:	2d0c      	cmp	r5, #12
 8004d62:	bf38      	it	cc
 8004d64:	250c      	movcc	r5, #12
 8004d66:	4629      	mov	r1, r5
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f7ff ffa5 	bl	8004cb8 <sbrk_aligned>
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d02b      	beq.n	8004dca <_malloc_r+0xd2>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	442b      	add	r3, r5
 8004d76:	6023      	str	r3, [r4, #0]
 8004d78:	e00e      	b.n	8004d98 <_malloc_r+0xa0>
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	1b52      	subs	r2, r2, r5
 8004d7e:	d41e      	bmi.n	8004dbe <_malloc_r+0xc6>
 8004d80:	2a0b      	cmp	r2, #11
 8004d82:	d916      	bls.n	8004db2 <_malloc_r+0xba>
 8004d84:	1961      	adds	r1, r4, r5
 8004d86:	42a3      	cmp	r3, r4
 8004d88:	6025      	str	r5, [r4, #0]
 8004d8a:	bf18      	it	ne
 8004d8c:	6059      	strne	r1, [r3, #4]
 8004d8e:	6863      	ldr	r3, [r4, #4]
 8004d90:	bf08      	it	eq
 8004d92:	6031      	streq	r1, [r6, #0]
 8004d94:	5162      	str	r2, [r4, r5]
 8004d96:	604b      	str	r3, [r1, #4]
 8004d98:	4638      	mov	r0, r7
 8004d9a:	f104 060b 	add.w	r6, r4, #11
 8004d9e:	f000 f865 	bl	8004e6c <__malloc_unlock>
 8004da2:	f026 0607 	bic.w	r6, r6, #7
 8004da6:	1d23      	adds	r3, r4, #4
 8004da8:	1af2      	subs	r2, r6, r3
 8004daa:	d0b6      	beq.n	8004d1a <_malloc_r+0x22>
 8004dac:	1b9b      	subs	r3, r3, r6
 8004dae:	50a3      	str	r3, [r4, r2]
 8004db0:	e7b3      	b.n	8004d1a <_malloc_r+0x22>
 8004db2:	6862      	ldr	r2, [r4, #4]
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	bf0c      	ite	eq
 8004db8:	6032      	streq	r2, [r6, #0]
 8004dba:	605a      	strne	r2, [r3, #4]
 8004dbc:	e7ec      	b.n	8004d98 <_malloc_r+0xa0>
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	6864      	ldr	r4, [r4, #4]
 8004dc2:	e7b2      	b.n	8004d2a <_malloc_r+0x32>
 8004dc4:	4634      	mov	r4, r6
 8004dc6:	6876      	ldr	r6, [r6, #4]
 8004dc8:	e7b9      	b.n	8004d3e <_malloc_r+0x46>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f000 f84c 	bl	8004e6c <__malloc_unlock>
 8004dd4:	e7a1      	b.n	8004d1a <_malloc_r+0x22>
 8004dd6:	6025      	str	r5, [r4, #0]
 8004dd8:	e7de      	b.n	8004d98 <_malloc_r+0xa0>
 8004dda:	bf00      	nop
 8004ddc:	20004108 	.word	0x20004108

08004de0 <_realloc_r>:
 8004de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de4:	4680      	mov	r8, r0
 8004de6:	4614      	mov	r4, r2
 8004de8:	460e      	mov	r6, r1
 8004dea:	b921      	cbnz	r1, 8004df6 <_realloc_r+0x16>
 8004dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004df0:	4611      	mov	r1, r2
 8004df2:	f7ff bf81 	b.w	8004cf8 <_malloc_r>
 8004df6:	b92a      	cbnz	r2, 8004e04 <_realloc_r+0x24>
 8004df8:	f7ff ff12 	bl	8004c20 <_free_r>
 8004dfc:	4625      	mov	r5, r4
 8004dfe:	4628      	mov	r0, r5
 8004e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e04:	f000 f838 	bl	8004e78 <_malloc_usable_size_r>
 8004e08:	4284      	cmp	r4, r0
 8004e0a:	4607      	mov	r7, r0
 8004e0c:	d802      	bhi.n	8004e14 <_realloc_r+0x34>
 8004e0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e12:	d812      	bhi.n	8004e3a <_realloc_r+0x5a>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4640      	mov	r0, r8
 8004e18:	f7ff ff6e 	bl	8004cf8 <_malloc_r>
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d0ed      	beq.n	8004dfe <_realloc_r+0x1e>
 8004e22:	42bc      	cmp	r4, r7
 8004e24:	4622      	mov	r2, r4
 8004e26:	4631      	mov	r1, r6
 8004e28:	bf28      	it	cs
 8004e2a:	463a      	movcs	r2, r7
 8004e2c:	f7ff fbb8 	bl	80045a0 <memcpy>
 8004e30:	4631      	mov	r1, r6
 8004e32:	4640      	mov	r0, r8
 8004e34:	f7ff fef4 	bl	8004c20 <_free_r>
 8004e38:	e7e1      	b.n	8004dfe <_realloc_r+0x1e>
 8004e3a:	4635      	mov	r5, r6
 8004e3c:	e7df      	b.n	8004dfe <_realloc_r+0x1e>
	...

08004e40 <_sbrk_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	; (8004e5c <_sbrk_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7fb fe48 	bl	8000ae0 <_sbrk>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_sbrk_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_sbrk_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	20004110 	.word	0x20004110

08004e60 <__malloc_lock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <__malloc_lock+0x8>)
 8004e62:	f000 b811 	b.w	8004e88 <__retarget_lock_acquire_recursive>
 8004e66:	bf00      	nop
 8004e68:	20004114 	.word	0x20004114

08004e6c <__malloc_unlock>:
 8004e6c:	4801      	ldr	r0, [pc, #4]	; (8004e74 <__malloc_unlock+0x8>)
 8004e6e:	f000 b80c 	b.w	8004e8a <__retarget_lock_release_recursive>
 8004e72:	bf00      	nop
 8004e74:	20004114 	.word	0x20004114

08004e78 <_malloc_usable_size_r>:
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f18      	subs	r0, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfbc      	itt	lt
 8004e82:	580b      	ldrlt	r3, [r1, r0]
 8004e84:	18c0      	addlt	r0, r0, r3
 8004e86:	4770      	bx	lr

08004e88 <__retarget_lock_acquire_recursive>:
 8004e88:	4770      	bx	lr

08004e8a <__retarget_lock_release_recursive>:
 8004e8a:	4770      	bx	lr

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
