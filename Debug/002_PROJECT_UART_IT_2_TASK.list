
002_PROJECT_UART_IT_2_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c94  08004c94  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c9c  08004c9c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004084  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004094  20004094  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012acd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a1c  00000000  00000000  00032b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00035530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  00036610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229f2  00000000  00000000  000375e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012df8  00000000  00000000  00059fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d38bc  00000000  00000000  0006cdd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014068e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004668  00000000  00000000  001406e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c14 	.word	0x08004c14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004c14 	.word	0x08004c14

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000002c 	.word	0x2000002c
 8000504:	20000080 	.word	0x20000080

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b08e      	sub	sp, #56	; 0x38
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fd03 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f833 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f9a9 	bl	800086c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f899 	bl	8000650 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, LEDTask01, osPriorityNormal, 0, 128);
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <main+0x64>)
 8000520:	f107 041c 	add.w	r4, r7, #28
 8000524:	461d      	mov	r5, r3
 8000526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f002 ffea 	bl	8003512 <osThreadCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x68>)
 8000542:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, ECHOTask02, osPriorityNormal, 0, 128);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <main+0x6c>)
 8000546:	463c      	mov	r4, r7
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000556:	463b      	mov	r3, r7
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 ffd9 	bl	8003512 <osThreadCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a05      	ldr	r2, [pc, #20]	; (8000578 <main+0x70>)
 8000564:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000566:	f002 ffcd 	bl	8003504 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x62>
 800056c:	08004c3c 	.word	0x08004c3c
 8000570:	200002c4 	.word	0x200002c4
 8000574:	08004c58 	.word	0x08004c58
 8000578:	200002c8 	.word	0x200002c8

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fb32 	bl	8004bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f0:	23a8      	movs	r3, #168	; 0xa8
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f833 	bl	800166c <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 fb28 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2105      	movs	r1, #5
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fa94 	bl	8001b5c <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063a:	f000 fb11 	bl	8000c60 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_Init 1 */

	Uart_InitTypeDef Uart_InitStruct;

	huart2.Instance = USART2;
 8000656:	4b83      	ldr	r3, [pc, #524]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000658:	4a83      	ldr	r2, [pc, #524]	; (8000868 <MX_USART2_UART_Init+0x218>)
 800065a:	601a      	str	r2, [r3, #0]

	Uart_InitStruct.baudrate = 5;
 800065c:	2305      	movs	r3, #5
 800065e:	603b      	str	r3, [r7, #0]
	Uart_InitStruct.uart_parameters = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	713b      	strb	r3, [r7, #4]

	switch(Uart_InitStruct.baudrate)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2b05      	cmp	r3, #5
 8000668:	d82c      	bhi.n	80006c4 <MX_USART2_UART_Init+0x74>
 800066a:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <MX_USART2_UART_Init+0x20>)
 800066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000670:	08000689 	.word	0x08000689
 8000674:	08000693 	.word	0x08000693
 8000678:	0800069d 	.word	0x0800069d
 800067c:	080006a7 	.word	0x080006a7
 8000680:	080006b1 	.word	0x080006b1
 8000684:	080006bb 	.word	0x080006bb
	{
	case 0:
		huart2.Init.BaudRate = 4800;
 8000688:	4b76      	ldr	r3, [pc, #472]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800068a:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800068e:	605a      	str	r2, [r3, #4]
		break;
 8000690:	e01d      	b.n	80006ce <MX_USART2_UART_Init+0x7e>
	case 1:
		huart2.Init.BaudRate = 9600;
 8000692:	4b74      	ldr	r3, [pc, #464]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000694:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000698:	605a      	str	r2, [r3, #4]
		break;
 800069a:	e018      	b.n	80006ce <MX_USART2_UART_Init+0x7e>
	case 2:
		huart2.Init.BaudRate = 19200;
 800069c:	4b71      	ldr	r3, [pc, #452]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800069e:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80006a2:	605a      	str	r2, [r3, #4]
		break;
 80006a4:	e013      	b.n	80006ce <MX_USART2_UART_Init+0x7e>
	case 3:
		huart2.Init.BaudRate = 38400;
 80006a6:	4b6f      	ldr	r3, [pc, #444]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80006a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006ac:	605a      	str	r2, [r3, #4]
		break;
 80006ae:	e00e      	b.n	80006ce <MX_USART2_UART_Init+0x7e>
	case 4:
		huart2.Init.BaudRate = 57600;
 80006b0:	4b6c      	ldr	r3, [pc, #432]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80006b2:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006b6:	605a      	str	r2, [r3, #4]
		break;
 80006b8:	e009      	b.n	80006ce <MX_USART2_UART_Init+0x7e>
	case 5:
		huart2.Init.BaudRate = 115200;
 80006ba:	4b6a      	ldr	r3, [pc, #424]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
		break;
 80006c2:	e004      	b.n	80006ce <MX_USART2_UART_Init+0x7e>
	default :
		huart2.Init.BaudRate = 115200;
 80006c4:	4b67      	ldr	r3, [pc, #412]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80006c6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ca:	605a      	str	r2, [r3, #4]
		break;
 80006cc:	bf00      	nop
	}

	switch(Uart_InitStruct.uart_parameters)
 80006ce:	793b      	ldrb	r3, [r7, #4]
 80006d0:	2b0b      	cmp	r3, #11
 80006d2:	f200 80a7 	bhi.w	8000824 <MX_USART2_UART_Init+0x1d4>
 80006d6:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <MX_USART2_UART_Init+0x8c>)
 80006d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006dc:	0800070d 	.word	0x0800070d
 80006e0:	08000721 	.word	0x08000721
 80006e4:	08000737 	.word	0x08000737
 80006e8:	0800074d 	.word	0x0800074d
 80006ec:	08000765 	.word	0x08000765
 80006f0:	0800077b 	.word	0x0800077b
 80006f4:	08000793 	.word	0x08000793
 80006f8:	080007a9 	.word	0x080007a9
 80006fc:	080007c1 	.word	0x080007c1
 8000700:	080007d9 	.word	0x080007d9
 8000704:	080007f3 	.word	0x080007f3
 8000708:	0800080b 	.word	0x0800080b
	{
	case 0:
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070c:	4b55      	ldr	r3, [pc, #340]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 8000712:	4b54      	ldr	r3, [pc, #336]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8000718:	4b52      	ldr	r3, [pc, #328]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
		break;
 800071e:	e08b      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 1:
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000720:	4b50      	ldr	r3, [pc, #320]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_2;
 8000726:	4b4f      	ldr	r3, [pc, #316]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800072c:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
		break;
 8000734:	e080      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 2:
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b49      	ldr	r3, [pc, #292]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_ODD;
 8000742:	4b48      	ldr	r3, [pc, #288]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000744:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000748:	611a      	str	r2, [r3, #16]
		break;
 800074a:	e075      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 3:
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074c:	4b45      	ldr	r3, [pc, #276]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_2;
 8000752:	4b44      	ldr	r3, [pc, #272]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000754:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000758:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_ODD;
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800075c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000760:	611a      	str	r2, [r3, #16]
		break;
 8000762:	e069      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 4:
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000764:	4b3f      	ldr	r3, [pc, #252]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_EVEN;
 8000770:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000776:	611a      	str	r2, [r3, #16]
		break;
 8000778:	e05e      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 5:
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_2;
 8000780:	4b38      	ldr	r3, [pc, #224]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000786:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_EVEN;
 8000788:	4b36      	ldr	r3, [pc, #216]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800078a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078e:	611a      	str	r2, [r3, #16]
		break;
 8000790:	e052      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 6:
		huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000792:	4b34      	ldr	r3, [pc, #208]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000798:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 80007a0:	4b30      	ldr	r3, [pc, #192]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
		break;
 80007a6:	e047      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 7:
		huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ae:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_2;
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b6:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
		break;
 80007be:	e03b      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 8:
		huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c6:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_ODD;
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007d0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80007d4:	611a      	str	r2, [r3, #16]
		break;
 80007d6:	e02f      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 9:
		huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007de:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_2;
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007e6:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_ODD;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007ea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80007ee:	611a      	str	r2, [r3, #16]
		break;
 80007f0:	e022      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 10:
		huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f8:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_USART2_UART_Init+0x214>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_EVEN;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000806:	611a      	str	r2, [r3, #16]
		break;
 8000808:	e016      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	case 11:
		huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800080c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000810:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_2;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000814:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000818:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_EVEN;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800081c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000820:	611a      	str	r2, [r3, #16]
		break;
 8000822:	e009      	b.n	8000838 <MX_USART2_UART_Init+0x1e8>
	default :
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
		break;
 8000836:	bf00      	nop
	}

  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_USART2_UART_Init+0x214>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x214>)
 800084c:	f001 fe86 	bl	800255c <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x20a>
  {
    Error_Handler();
 8000856:	f000 fa03 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000280 	.word	0x20000280
 8000868:	40004400 	.word	0x40004400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_GPIO_Init+0x9c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <MX_GPIO_Init+0x9c>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_GPIO_Init+0x9c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a18      	ldr	r2, [pc, #96]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_GPIO_Init+0x9c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <MX_GPIO_Init+0xa0>)
 80008de:	f000 fe91 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0xa0>)
 80008fc:	f000 fce6 	bl	80012cc <HAL_GPIO_Init>

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020c00 	.word	0x40020c00

08000910 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		// USART Interrupt Receive Function
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	/* rx_buffer start over solution. */
	rx_buffer[count] = *rx_call_buffer;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_UART_RxCpltCallback+0x44>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_UART_RxCpltCallback+0x48>)
 8000920:	7819      	ldrb	r1, [r3, #0]
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_UART_RxCpltCallback+0x4c>)
 8000924:	5499      	strb	r1, [r3, r2]
	count++;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_UART_RxCpltCallback+0x44>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_UART_RxCpltCallback+0x44>)
 8000930:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_call_buffer, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	4908      	ldr	r1, [pc, #32]	; (8000958 <HAL_UART_RxCpltCallback+0x48>)
 8000936:	480a      	ldr	r0, [pc, #40]	; (8000960 <HAL_UART_RxCpltCallback+0x50>)
 8000938:	f001 fea2 	bl	8002680 <HAL_UART_Receive_IT>

	if (*rx_call_buffer == '\n')
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_UART_RxCpltCallback+0x48>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b0a      	cmp	r3, #10
 8000942:	d102      	bne.n	800094a <HAL_UART_RxCpltCallback+0x3a>
	{
		count = 0;
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_UART_RxCpltCallback+0x44>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
	}
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002f0 	.word	0x200002f0
 8000958:	200002ec 	.word	0x200002ec
 800095c:	200002e0 	.word	0x200002e0
 8000960:	20000280 	.word	0x20000280

08000964 <LEDTask01>:
  * @retval None
  */

/* USER CODE END Header_LEDTask01 */
void LEDTask01(void const * argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_call_buffer, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	498b      	ldr	r1, [pc, #556]	; (8000b9c <LEDTask01+0x238>)
 8000970:	488b      	ldr	r0, [pc, #556]	; (8000ba0 <LEDTask01+0x23c>)
 8000972:	f001 fe85 	bl	8002680 <HAL_UART_Receive_IT>

      if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a' && rx_buffer[3] == 'r' && rx_buffer[4] == 't')		// "start" string.
 8000976:	4b8b      	ldr	r3, [pc, #556]	; (8000ba4 <LEDTask01+0x240>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b73      	cmp	r3, #115	; 0x73
 800097c:	d11f      	bne.n	80009be <LEDTask01+0x5a>
 800097e:	4b89      	ldr	r3, [pc, #548]	; (8000ba4 <LEDTask01+0x240>)
 8000980:	785b      	ldrb	r3, [r3, #1]
 8000982:	2b74      	cmp	r3, #116	; 0x74
 8000984:	d11b      	bne.n	80009be <LEDTask01+0x5a>
 8000986:	4b87      	ldr	r3, [pc, #540]	; (8000ba4 <LEDTask01+0x240>)
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	2b61      	cmp	r3, #97	; 0x61
 800098c:	d117      	bne.n	80009be <LEDTask01+0x5a>
 800098e:	4b85      	ldr	r3, [pc, #532]	; (8000ba4 <LEDTask01+0x240>)
 8000990:	78db      	ldrb	r3, [r3, #3]
 8000992:	2b72      	cmp	r3, #114	; 0x72
 8000994:	d113      	bne.n	80009be <LEDTask01+0x5a>
 8000996:	4b83      	ldr	r3, [pc, #524]	; (8000ba4 <LEDTask01+0x240>)
 8000998:	791b      	ldrb	r3, [r3, #4]
 800099a:	2b74      	cmp	r3, #116	; 0x74
 800099c:	d10f      	bne.n	80009be <LEDTask01+0x5a>
	  {
		  vTaskResume(Task02Handle);
 800099e:	4b82      	ldr	r3, [pc, #520]	; (8000ba8 <LEDTask01+0x244>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 f954 	bl	8003c50 <vTaskResume>
		  rx_stop = 0;
 80009a8:	4b80      	ldr	r3, [pc, #512]	; (8000bac <LEDTask01+0x248>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
		  strcpy (tx_buffer, rx_buffer);
 80009ae:	497d      	ldr	r1, [pc, #500]	; (8000ba4 <LEDTask01+0x240>)
 80009b0:	487f      	ldr	r0, [pc, #508]	; (8000bb0 <LEDTask01+0x24c>)
 80009b2:	f004 f927 	bl	8004c04 <strcpy>
		  i = 6;
 80009b6:	4b7f      	ldr	r3, [pc, #508]	; (8000bb4 <LEDTask01+0x250>)
 80009b8:	2206      	movs	r2, #6
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e058      	b.n	8000a70 <LEDTask01+0x10c>
	  }

      else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'n' &&	// "ledon500" string.
 80009be:	4b79      	ldr	r3, [pc, #484]	; (8000ba4 <LEDTask01+0x240>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b6c      	cmp	r3, #108	; 0x6c
 80009c4:	d126      	bne.n	8000a14 <LEDTask01+0xb0>
 80009c6:	4b77      	ldr	r3, [pc, #476]	; (8000ba4 <LEDTask01+0x240>)
 80009c8:	785b      	ldrb	r3, [r3, #1]
 80009ca:	2b65      	cmp	r3, #101	; 0x65
 80009cc:	d122      	bne.n	8000a14 <LEDTask01+0xb0>
 80009ce:	4b75      	ldr	r3, [pc, #468]	; (8000ba4 <LEDTask01+0x240>)
 80009d0:	789b      	ldrb	r3, [r3, #2]
 80009d2:	2b64      	cmp	r3, #100	; 0x64
 80009d4:	d11e      	bne.n	8000a14 <LEDTask01+0xb0>
 80009d6:	4b73      	ldr	r3, [pc, #460]	; (8000ba4 <LEDTask01+0x240>)
 80009d8:	78db      	ldrb	r3, [r3, #3]
 80009da:	2b6f      	cmp	r3, #111	; 0x6f
 80009dc:	d11a      	bne.n	8000a14 <LEDTask01+0xb0>
 80009de:	4b71      	ldr	r3, [pc, #452]	; (8000ba4 <LEDTask01+0x240>)
 80009e0:	791b      	ldrb	r3, [r3, #4]
 80009e2:	2b6e      	cmp	r3, #110	; 0x6e
 80009e4:	d116      	bne.n	8000a14 <LEDTask01+0xb0>
			  rx_buffer[5] == '5' && rx_buffer[6] == '0' && rx_buffer[7] == '0')
 80009e6:	4b6f      	ldr	r3, [pc, #444]	; (8000ba4 <LEDTask01+0x240>)
 80009e8:	795b      	ldrb	r3, [r3, #5]
      else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'n' &&	// "ledon500" string.
 80009ea:	2b35      	cmp	r3, #53	; 0x35
 80009ec:	d112      	bne.n	8000a14 <LEDTask01+0xb0>
			  rx_buffer[5] == '5' && rx_buffer[6] == '0' && rx_buffer[7] == '0')
 80009ee:	4b6d      	ldr	r3, [pc, #436]	; (8000ba4 <LEDTask01+0x240>)
 80009f0:	799b      	ldrb	r3, [r3, #6]
 80009f2:	2b30      	cmp	r3, #48	; 0x30
 80009f4:	d10e      	bne.n	8000a14 <LEDTask01+0xb0>
 80009f6:	4b6b      	ldr	r3, [pc, #428]	; (8000ba4 <LEDTask01+0x240>)
 80009f8:	79db      	ldrb	r3, [r3, #7]
 80009fa:	2b30      	cmp	r3, #48	; 0x30
 80009fc:	d10a      	bne.n	8000a14 <LEDTask01+0xb0>
	  {
		  rx_ledon = 1;
 80009fe:	4b6e      	ldr	r3, [pc, #440]	; (8000bb8 <LEDTask01+0x254>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
		  strcpy (tx_buffer, rx_buffer);
 8000a04:	4967      	ldr	r1, [pc, #412]	; (8000ba4 <LEDTask01+0x240>)
 8000a06:	486a      	ldr	r0, [pc, #424]	; (8000bb0 <LEDTask01+0x24c>)
 8000a08:	f004 f8fc 	bl	8004c04 <strcpy>
		  i = 9;
 8000a0c:	4b69      	ldr	r3, [pc, #420]	; (8000bb4 <LEDTask01+0x250>)
 8000a0e:	2209      	movs	r2, #9
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e02d      	b.n	8000a70 <LEDTask01+0x10c>
	  }

      else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'f' &&	// "ledoff500" string.
 8000a14:	4b63      	ldr	r3, [pc, #396]	; (8000ba4 <LEDTask01+0x240>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b6c      	cmp	r3, #108	; 0x6c
 8000a1a:	d129      	bne.n	8000a70 <LEDTask01+0x10c>
 8000a1c:	4b61      	ldr	r3, [pc, #388]	; (8000ba4 <LEDTask01+0x240>)
 8000a1e:	785b      	ldrb	r3, [r3, #1]
 8000a20:	2b65      	cmp	r3, #101	; 0x65
 8000a22:	d125      	bne.n	8000a70 <LEDTask01+0x10c>
 8000a24:	4b5f      	ldr	r3, [pc, #380]	; (8000ba4 <LEDTask01+0x240>)
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	2b64      	cmp	r3, #100	; 0x64
 8000a2a:	d121      	bne.n	8000a70 <LEDTask01+0x10c>
 8000a2c:	4b5d      	ldr	r3, [pc, #372]	; (8000ba4 <LEDTask01+0x240>)
 8000a2e:	78db      	ldrb	r3, [r3, #3]
 8000a30:	2b6f      	cmp	r3, #111	; 0x6f
 8000a32:	d11d      	bne.n	8000a70 <LEDTask01+0x10c>
 8000a34:	4b5b      	ldr	r3, [pc, #364]	; (8000ba4 <LEDTask01+0x240>)
 8000a36:	791b      	ldrb	r3, [r3, #4]
 8000a38:	2b66      	cmp	r3, #102	; 0x66
 8000a3a:	d119      	bne.n	8000a70 <LEDTask01+0x10c>
			  rx_buffer[5] == 'f' && rx_buffer[6] == '5' && rx_buffer[7] == '0' && rx_buffer[8] == '0')
 8000a3c:	4b59      	ldr	r3, [pc, #356]	; (8000ba4 <LEDTask01+0x240>)
 8000a3e:	795b      	ldrb	r3, [r3, #5]
      else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'f' &&	// "ledoff500" string.
 8000a40:	2b66      	cmp	r3, #102	; 0x66
 8000a42:	d115      	bne.n	8000a70 <LEDTask01+0x10c>
			  rx_buffer[5] == 'f' && rx_buffer[6] == '5' && rx_buffer[7] == '0' && rx_buffer[8] == '0')
 8000a44:	4b57      	ldr	r3, [pc, #348]	; (8000ba4 <LEDTask01+0x240>)
 8000a46:	799b      	ldrb	r3, [r3, #6]
 8000a48:	2b35      	cmp	r3, #53	; 0x35
 8000a4a:	d111      	bne.n	8000a70 <LEDTask01+0x10c>
 8000a4c:	4b55      	ldr	r3, [pc, #340]	; (8000ba4 <LEDTask01+0x240>)
 8000a4e:	79db      	ldrb	r3, [r3, #7]
 8000a50:	2b30      	cmp	r3, #48	; 0x30
 8000a52:	d10d      	bne.n	8000a70 <LEDTask01+0x10c>
 8000a54:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <LEDTask01+0x240>)
 8000a56:	7a1b      	ldrb	r3, [r3, #8]
 8000a58:	2b30      	cmp	r3, #48	; 0x30
 8000a5a:	d109      	bne.n	8000a70 <LEDTask01+0x10c>
	  {
		  rx_ledoff = 1;
 8000a5c:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <LEDTask01+0x258>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
		  strcpy (tx_buffer, rx_buffer);
 8000a62:	4950      	ldr	r1, [pc, #320]	; (8000ba4 <LEDTask01+0x240>)
 8000a64:	4852      	ldr	r0, [pc, #328]	; (8000bb0 <LEDTask01+0x24c>)
 8000a66:	f004 f8cd 	bl	8004c04 <strcpy>
		  i = 10;
 8000a6a:	4b52      	ldr	r3, [pc, #328]	; (8000bb4 <LEDTask01+0x250>)
 8000a6c:	220a      	movs	r2, #10
 8000a6e:	701a      	strb	r2, [r3, #0]
	  }

      if (rx_stop == 0 && rx_ledon == 0 && rx_ledoff == 0)		// Default mode.
 8000a70:	4b4e      	ldr	r3, [pc, #312]	; (8000bac <LEDTask01+0x248>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d11c      	bne.n	8000ab2 <LEDTask01+0x14e>
 8000a78:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <LEDTask01+0x254>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d118      	bne.n	8000ab2 <LEDTask01+0x14e>
 8000a80:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <LEDTask01+0x258>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d114      	bne.n	8000ab2 <LEDTask01+0x14e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8e:	484c      	ldr	r0, [pc, #304]	; (8000bc0 <LEDTask01+0x25c>)
 8000a90:	f000 fdb8 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8000a94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a98:	f000 fa80 	bl	8000f9c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa2:	4847      	ldr	r0, [pc, #284]	; (8000bc0 <LEDTask01+0x25c>)
 8000aa4:	f000 fdae 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_Delay(700);
 8000aa8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000aac:	f000 fa76 	bl	8000f9c <HAL_Delay>
 8000ab0:	e072      	b.n	8000b98 <LEDTask01+0x234>
	  }

	  else if (rx_stop == 1)
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <LEDTask01+0x248>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d109      	bne.n	8000ace <LEDTask01+0x16a>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);		// Led state control with "stop" string
 8000aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abe:	4840      	ldr	r0, [pc, #256]	; (8000bc0 <LEDTask01+0x25c>)
 8000ac0:	f000 fdb9 	bl	8001636 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac8:	f000 fa68 	bl	8000f9c <HAL_Delay>
 8000acc:	e74e      	b.n	800096c <LEDTask01+0x8>
	  }

	  else if (rx_stop == 0 && rx_ledon == 1 && rx_ledoff == 0)			// Only "ledon500" string receive state.
 8000ace:	4b37      	ldr	r3, [pc, #220]	; (8000bac <LEDTask01+0x248>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d11c      	bne.n	8000b10 <LEDTask01+0x1ac>
 8000ad6:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <LEDTask01+0x254>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d118      	bne.n	8000b10 <LEDTask01+0x1ac>
 8000ade:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <LEDTask01+0x258>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d114      	bne.n	8000b10 <LEDTask01+0x1ac>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	4834      	ldr	r0, [pc, #208]	; (8000bc0 <LEDTask01+0x25c>)
 8000aee:	f000 fd89 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000af2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af6:	f000 fa51 	bl	8000f9c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b00:	482f      	ldr	r0, [pc, #188]	; (8000bc0 <LEDTask01+0x25c>)
 8000b02:	f000 fd7f 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_Delay(700);
 8000b06:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000b0a:	f000 fa47 	bl	8000f9c <HAL_Delay>
 8000b0e:	e043      	b.n	8000b98 <LEDTask01+0x234>
	  }

	  else if (rx_stop == 0 && rx_ledon == 1 && rx_ledoff == 1)			// "ledon500" && "ledoff500" strings receive state.
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <LEDTask01+0x248>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d11c      	bne.n	8000b52 <LEDTask01+0x1ee>
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <LEDTask01+0x254>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d118      	bne.n	8000b52 <LEDTask01+0x1ee>
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <LEDTask01+0x258>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d114      	bne.n	8000b52 <LEDTask01+0x1ee>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2e:	4824      	ldr	r0, [pc, #144]	; (8000bc0 <LEDTask01+0x25c>)
 8000b30:	f000 fd68 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000b34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b38:	f000 fa30 	bl	8000f9c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b42:	481f      	ldr	r0, [pc, #124]	; (8000bc0 <LEDTask01+0x25c>)
 8000b44:	f000 fd5e 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4c:	f000 fa26 	bl	8000f9c <HAL_Delay>
 8000b50:	e022      	b.n	8000b98 <LEDTask01+0x234>
	  }

	  else if (rx_stop == 0 && rx_ledon == 0 && rx_ledoff == 1)			// Only "ledoff500" string receive state.
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <LEDTask01+0x248>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f47f af08 	bne.w	800096c <LEDTask01+0x8>
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <LEDTask01+0x254>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f47f af03 	bne.w	800096c <LEDTask01+0x8>
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <LEDTask01+0x258>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	f47f aefe 	bne.w	800096c <LEDTask01+0x8>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b76:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <LEDTask01+0x25c>)
 8000b78:	f000 fd44 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8000b7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b80:	f000 fa0c 	bl	8000f9c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LEDTask01+0x25c>)
 8000b8c:	f000 fd3a 	bl	8001604 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b94:	f000 fa02 	bl	8000f9c <HAL_Delay>
	  HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_call_buffer, 1);
 8000b98:	e6e8      	b.n	800096c <LEDTask01+0x8>
 8000b9a:	bf00      	nop
 8000b9c:	200002ec 	.word	0x200002ec
 8000ba0:	20000280 	.word	0x20000280
 8000ba4:	200002e0 	.word	0x200002e0
 8000ba8:	200002c8 	.word	0x200002c8
 8000bac:	200002ed 	.word	0x200002ed
 8000bb0:	200002cc 	.word	0x200002cc
 8000bb4:	200002f1 	.word	0x200002f1
 8000bb8:	200002ee 	.word	0x200002ee
 8000bbc:	200002ef 	.word	0x200002ef
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <ECHOTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ECHOTask02 */
void ECHOTask02(void const * argument)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ECHOTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, i);		// ECHO working in this line.
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <ECHOTask02+0x5c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4913      	ldr	r1, [pc, #76]	; (8000c24 <ECHOTask02+0x60>)
 8000bd6:	4814      	ldr	r0, [pc, #80]	; (8000c28 <ECHOTask02+0x64>)
 8000bd8:	f001 fd0d 	bl	80025f6 <HAL_UART_Transmit_IT>
	  osDelay(1000);
 8000bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be0:	f002 fce3 	bl	80035aa <osDelay>

	  HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_call_buffer, 1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	4911      	ldr	r1, [pc, #68]	; (8000c2c <ECHOTask02+0x68>)
 8000be8:	480f      	ldr	r0, [pc, #60]	; (8000c28 <ECHOTask02+0x64>)
 8000bea:	f001 fd49 	bl	8002680 <HAL_UART_Receive_IT>

	  if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'o' && rx_buffer[3] == 'p')		// Echo task will be suspend with "stop" string.
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <ECHOTask02+0x6c>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b73      	cmp	r3, #115	; 0x73
 8000bf4:	d1ea      	bne.n	8000bcc <ECHOTask02+0x8>
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <ECHOTask02+0x6c>)
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	2b74      	cmp	r3, #116	; 0x74
 8000bfc:	d1e6      	bne.n	8000bcc <ECHOTask02+0x8>
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <ECHOTask02+0x6c>)
 8000c00:	789b      	ldrb	r3, [r3, #2]
 8000c02:	2b6f      	cmp	r3, #111	; 0x6f
 8000c04:	d1e2      	bne.n	8000bcc <ECHOTask02+0x8>
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <ECHOTask02+0x6c>)
 8000c08:	78db      	ldrb	r3, [r3, #3]
 8000c0a:	2b70      	cmp	r3, #112	; 0x70
 8000c0c:	d1de      	bne.n	8000bcc <ECHOTask02+0x8>
	  {
		  rx_stop = 1;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <ECHOTask02+0x70>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
		  vTaskSuspend(Task02Handle);
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <ECHOTask02+0x74>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 ff55 	bl	8003ac8 <vTaskSuspend>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, i);		// ECHO working in this line.
 8000c1e:	e7d5      	b.n	8000bcc <ECHOTask02+0x8>
 8000c20:	200002f1 	.word	0x200002f1
 8000c24:	200002cc 	.word	0x200002cc
 8000c28:	20000280 	.word	0x20000280
 8000c2c:	200002ec 	.word	0x200002ec
 8000c30:	200002e0 	.word	0x200002e0
 8000c34:	200002ed 	.word	0x200002ed
 8000c38:	200002c8 	.word	0x200002c8

08000c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d101      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4e:	f000 f985 	bl	8000f5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010000 	.word	0x40010000

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_MspInit+0x54>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <HAL_MspInit+0x54>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_MspInit+0x54>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_MspInit+0x54>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_MspInit+0x54>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_MspInit+0x54>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	210f      	movs	r1, #15
 8000cae:	f06f 0001 	mvn.w	r0, #1
 8000cb2:	f000 fa4f 	bl	8001154 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d133      	bne.n	8000d4e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_UART_MspInit+0x9c>)
 8000d3a:	f000 fac7 	bl	80012cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2105      	movs	r1, #5
 8000d42:	2026      	movs	r0, #38	; 0x26
 8000d44:	f000 fa06 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d48:	2026      	movs	r0, #38	; 0x26
 8000d4a:	f000 fa1f 	bl	800118c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <HAL_InitTick+0xd4>)
 8000d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7c:	4a2e      	ldr	r2, [pc, #184]	; (8000e38 <HAL_InitTick+0xd4>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6453      	str	r3, [r2, #68]	; 0x44
 8000d84:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <HAL_InitTick+0xd4>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d90:	f107 020c 	add.w	r2, r7, #12
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f8fe 	bl	8001f9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000da0:	f001 f8e8 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 8000da4:	4603      	mov	r3, r0
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dac:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <HAL_InitTick+0xd8>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	0c9b      	lsrs	r3, r3, #18
 8000db4:	3b01      	subs	r3, #1
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_InitTick+0xdc>)
 8000dba:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <HAL_InitTick+0xe0>)
 8000dbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <HAL_InitTick+0xdc>)
 8000dc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <HAL_InitTick+0xdc>)
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_InitTick+0xdc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_InitTick+0xdc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_InitTick+0xdc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000dde:	4818      	ldr	r0, [pc, #96]	; (8000e40 <HAL_InitTick+0xdc>)
 8000de0:	f001 f90e 	bl	8002000 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d11b      	bne.n	8000e2a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000df2:	4813      	ldr	r0, [pc, #76]	; (8000e40 <HAL_InitTick+0xdc>)
 8000df4:	f001 f95e 	bl	80020b4 <HAL_TIM_Base_Start_IT>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d111      	bne.n	8000e2a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e06:	2019      	movs	r0, #25
 8000e08:	f000 f9c0 	bl	800118c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	d808      	bhi.n	8000e24 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e12:	2200      	movs	r2, #0
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	2019      	movs	r0, #25
 8000e18:	f000 f99c 	bl	8001154 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_InitTick+0xe4>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e002      	b.n	8000e2a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3730      	adds	r7, #48	; 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	431bde83 	.word	0x431bde83
 8000e40:	200002f4 	.word	0x200002f4
 8000e44:	40010000 	.word	0x40010000
 8000e48:	20000004 	.word	0x20000004

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e7e:	f001 f989 	bl	8002194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200002f4 	.word	0x200002f4

08000e8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <USART2_IRQHandler+0x10>)
 8000e92:	f001 fc25 	bl	80026e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000280 	.word	0x20000280

08000ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffd7 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f003 fe5b 	bl	8004bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fb07 	bl	8000508 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f08:	08004ca4 	.word	0x08004ca4
  ldr r2, =_sbss
 8000f0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f10:	20004094 	.word	0x20004094

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f8fc 	bl	800113e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f7ff ff0c 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fe8e 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	2000033c 	.word	0x2000033c

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000033c 	.word	0x2000033c

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff4c 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001166:	f7ff ff61 	bl	800102c <__NVIC_GetPriorityGrouping>
 800116a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	6978      	ldr	r0, [r7, #20]
 8001172:	f7ff ffb1 	bl	80010d8 <NVIC_EncodePriority>
 8001176:	4602      	mov	r2, r0
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff80 	bl	8001084 <__NVIC_SetPriority>
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff54 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011b6:	f7ff fee5 	bl	8000f84 <HAL_GetTick>
 80011ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d008      	beq.n	80011da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e052      	b.n	8001280 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0216 	bic.w	r2, r2, #22
 80011e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695a      	ldr	r2, [r3, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <HAL_DMA_Abort+0x62>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0208 	bic.w	r2, r2, #8
 8001218:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122a:	e013      	b.n	8001254 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800122c:	f7ff feaa 	bl	8000f84 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b05      	cmp	r3, #5
 8001238:	d90c      	bls.n	8001254 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2220      	movs	r2, #32
 800123e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2203      	movs	r2, #3
 8001244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e015      	b.n	8001280 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1e4      	bne.n	800122c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	223f      	movs	r2, #63	; 0x3f
 8001268:	409a      	lsls	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d004      	beq.n	80012a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00c      	b.n	80012c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2205      	movs	r2, #5
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e16b      	b.n	80015c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 815a 	bne.w	80015ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80b4 	beq.w	80015ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a5f      	ldr	r2, [pc, #380]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a5b      	ldr	r2, [pc, #364]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_GPIO_Init+0x314>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d02b      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <HAL_GPIO_Init+0x318>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <HAL_GPIO_Init+0x31c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <HAL_GPIO_Init+0x320>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4e      	ldr	r2, [pc, #312]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4d      	ldr	r2, [pc, #308]	; (80015f4 <HAL_GPIO_Init+0x328>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4c      	ldr	r2, [pc, #304]	; (80015f8 <HAL_GPIO_Init+0x32c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x20e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <HAL_GPIO_Init+0x330>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x20a>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e00e      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014d6:	2308      	movs	r3, #8
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014da:	2306      	movs	r3, #6
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_GPIO_Init+0x334>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_GPIO_Init+0x334>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_GPIO_Init+0x334>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae90 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001648:	887a      	ldrh	r2, [r7, #2]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4013      	ands	r3, r2
 800164e:	041a      	lsls	r2, r3, #16
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43d9      	mvns	r1, r3
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	400b      	ands	r3, r1
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e267      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d075      	beq.n	8001776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800168a:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b04      	cmp	r3, #4
 8001694:	d00c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001696:	4b85      	ldr	r3, [pc, #532]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d112      	bne.n	80016c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a2:	4b82      	ldr	r3, [pc, #520]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ae:	d10b      	bne.n	80016c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	4b7e      	ldr	r3, [pc, #504]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d05b      	beq.n	8001774 <HAL_RCC_OscConfig+0x108>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d157      	bne.n	8001774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e242      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d106      	bne.n	80016e0 <HAL_RCC_OscConfig+0x74>
 80016d2:	4b76      	ldr	r3, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a75      	ldr	r2, [pc, #468]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e01d      	b.n	800171c <HAL_RCC_OscConfig+0xb0>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x98>
 80016ea:	4b70      	ldr	r3, [pc, #448]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a6f      	ldr	r2, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6c      	ldr	r2, [pc, #432]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0xb0>
 8001704:	4b69      	ldr	r3, [pc, #420]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a68      	ldr	r2, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 800170a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b66      	ldr	r3, [pc, #408]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a65      	ldr	r2, [pc, #404]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fc2e 	bl	8000f84 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fc2a 	bl	8000f84 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e207      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0xc0>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fc1a 	bl	8000f84 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fc16 	bl	8000f84 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1f3      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	4b51      	ldr	r3, [pc, #324]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0xe8>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d063      	beq.n	800184a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001796:	2b08      	cmp	r3, #8
 8001798:	d11c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179a:	4b44      	ldr	r3, [pc, #272]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d116      	bne.n	80017d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_RCC_OscConfig+0x152>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e1c7      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4937      	ldr	r1, [pc, #220]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	e03a      	b.n	800184a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017dc:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x244>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fbcf 	bl	8000f84 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ea:	f7ff fbcb 	bl	8000f84 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1a8      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4925      	ldr	r1, [pc, #148]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
 800181c:	e015      	b.n	800184a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_OscConfig+0x244>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fbae 	bl	8000f84 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182c:	f7ff fbaa 	bl	8000f84 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e187      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d036      	beq.n	80018c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d016      	beq.n	800188c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_RCC_OscConfig+0x248>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fb8e 	bl	8000f84 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fb8a 	bl	8000f84 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e167      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_OscConfig+0x240>)
 8001880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x200>
 800188a:	e01b      	b.n	80018c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_OscConfig+0x248>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff fb77 	bl	8000f84 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	e00e      	b.n	80018b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189a:	f7ff fb73 	bl	8000f84 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d907      	bls.n	80018b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e150      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
 80018ac:	40023800 	.word	0x40023800
 80018b0:	42470000 	.word	0x42470000
 80018b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	4b88      	ldr	r3, [pc, #544]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 80018ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1ea      	bne.n	800189a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8097 	beq.w	8001a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b81      	ldr	r3, [pc, #516]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b7d      	ldr	r3, [pc, #500]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a7c      	ldr	r2, [pc, #496]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b7a      	ldr	r3, [pc, #488]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b77      	ldr	r3, [pc, #476]	; (8001ae0 <HAL_RCC_OscConfig+0x474>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b74      	ldr	r3, [pc, #464]	; (8001ae0 <HAL_RCC_OscConfig+0x474>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a73      	ldr	r2, [pc, #460]	; (8001ae0 <HAL_RCC_OscConfig+0x474>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fb33 	bl	8000f84 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fb2f 	bl	8000f84 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e10c      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x474>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x2ea>
 8001948:	4b64      	ldr	r3, [pc, #400]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a63      	ldr	r2, [pc, #396]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	e01c      	b.n	8001990 <HAL_RCC_OscConfig+0x324>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b05      	cmp	r3, #5
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x30c>
 800195e:	4b5f      	ldr	r3, [pc, #380]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a5e      	ldr	r2, [pc, #376]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b5c      	ldr	r3, [pc, #368]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a5b      	ldr	r2, [pc, #364]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0x324>
 8001978:	4b58      	ldr	r3, [pc, #352]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a57      	ldr	r2, [pc, #348]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
 8001984:	4b55      	ldr	r3, [pc, #340]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a54      	ldr	r2, [pc, #336]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 800198a:	f023 0304 	bic.w	r3, r3, #4
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d015      	beq.n	80019c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff faf4 	bl	8000f84 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff faf0 	bl	8000f84 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0cb      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0ee      	beq.n	80019a0 <HAL_RCC_OscConfig+0x334>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fade 	bl	8000f84 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff fada 	bl	8000f84 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0b5      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e2:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ee      	bne.n	80019cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f4:	4b39      	ldr	r3, [pc, #228]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a38      	ldr	r2, [pc, #224]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 80019fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80a1 	beq.w	8001b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a0a:	4b34      	ldr	r3, [pc, #208]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d05c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d141      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff faae 	bl	8000f84 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff faaa 	bl	8000f84 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e087      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69da      	ldr	r2, [r3, #28]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	019b      	lsls	r3, r3, #6
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	3b01      	subs	r3, #1
 8001a64:	041b      	lsls	r3, r3, #16
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	491b      	ldr	r1, [pc, #108]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fa83 	bl	8000f84 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff fa7f 	bl	8000f84 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e05c      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x416>
 8001aa0:	e054      	b.n	8001b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_OscConfig+0x478>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fa6c 	bl	8000f84 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff fa68 	bl	8000f84 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e045      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_RCC_OscConfig+0x470>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x444>
 8001ace:	e03d      	b.n	8001b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e038      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_RCC_OscConfig+0x4ec>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d028      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d121      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d11a      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b18:	4013      	ands	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d111      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	085b      	lsrs	r3, r3, #1
 8001b30:	3b01      	subs	r3, #1
 8001b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0cc      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b68      	ldr	r3, [pc, #416]	; (8001d14 <HAL_RCC_ClockConfig+0x1b8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d90c      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b65      	ldr	r3, [pc, #404]	; (8001d14 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0b8      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d020      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb0:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc8:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	4b50      	ldr	r3, [pc, #320]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	494d      	ldr	r1, [pc, #308]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d044      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d119      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e07f      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e06f      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e067      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4934      	ldr	r1, [pc, #208]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f99a 	bl	8000f84 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff f996 	bl	8000f84 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e04f      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d20c      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e032      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4916      	ldr	r1, [pc, #88]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce2:	f000 f821 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	490a      	ldr	r1, [pc, #40]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	5ccb      	ldrb	r3, [r1, r3]
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f82e 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023c00 	.word	0x40023c00
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08004c7c 	.word	0x08004c7c
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d2c:	b094      	sub	sp, #80	; 0x50
 8001d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	647b      	str	r3, [r7, #68]	; 0x44
 8001d34:	2300      	movs	r3, #0
 8001d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d38:	2300      	movs	r3, #0
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d40:	4b79      	ldr	r3, [pc, #484]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d00d      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x40>
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	f200 80e1 	bhi.w	8001f14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x34>
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d003      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d5a:	e0db      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d60:	e0db      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d62:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d66:	e0d8      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d72:	4b6d      	ldr	r3, [pc, #436]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d063      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	2200      	movs	r2, #0
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
 8001d92:	2300      	movs	r3, #0
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
 8001d96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	462b      	mov	r3, r5
 8001d9e:	f04f 0000 	mov.w	r0, #0
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	0159      	lsls	r1, r3, #5
 8001da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dac:	0150      	lsls	r0, r2, #5
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4621      	mov	r1, r4
 8001db4:	1a51      	subs	r1, r2, r1
 8001db6:	6139      	str	r1, [r7, #16]
 8001db8:	4629      	mov	r1, r5
 8001dba:	eb63 0301 	sbc.w	r3, r3, r1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dcc:	4659      	mov	r1, fp
 8001dce:	018b      	lsls	r3, r1, #6
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dd6:	4651      	mov	r1, sl
 8001dd8:	018a      	lsls	r2, r1, #6
 8001dda:	4651      	mov	r1, sl
 8001ddc:	ebb2 0801 	subs.w	r8, r2, r1
 8001de0:	4659      	mov	r1, fp
 8001de2:	eb63 0901 	sbc.w	r9, r3, r1
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	4699      	mov	r9, r3
 8001dfe:	4623      	mov	r3, r4
 8001e00:	eb18 0303 	adds.w	r3, r8, r3
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	462b      	mov	r3, r5
 8001e08:	eb49 0303 	adc.w	r3, r9, r3
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	024b      	lsls	r3, r1, #9
 8001e1e:	4621      	mov	r1, r4
 8001e20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e24:	4621      	mov	r1, r4
 8001e26:	024a      	lsls	r2, r1, #9
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2e:	2200      	movs	r2, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e38:	f7fe f9ca 	bl	80001d0 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4613      	mov	r3, r2
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e44:	e058      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	099b      	lsrs	r3, r3, #6
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4611      	mov	r1, r2
 8001e52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e60:	4642      	mov	r2, r8
 8001e62:	464b      	mov	r3, r9
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	0159      	lsls	r1, r3, #5
 8001e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e72:	0150      	lsls	r0, r2, #5
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4641      	mov	r1, r8
 8001e7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e7e:	4649      	mov	r1, r9
 8001e80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e98:	ebb2 040a 	subs.w	r4, r2, sl
 8001e9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	00eb      	lsls	r3, r5, #3
 8001eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eae:	00e2      	lsls	r2, r4, #3
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	4643      	mov	r3, r8
 8001eb6:	18e3      	adds	r3, r4, r3
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	464b      	mov	r3, r9
 8001ebc:	eb45 0303 	adc.w	r3, r5, r3
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	028b      	lsls	r3, r1, #10
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed8:	4621      	mov	r1, r4
 8001eda:	028a      	lsls	r2, r1, #10
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	61fa      	str	r2, [r7, #28]
 8001ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eec:	f7fe f970 	bl	80001d0 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3750      	adds	r7, #80	; 0x50
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	00f42400 	.word	0x00f42400
 8001f30:	007a1200 	.word	0x007a1200

08001f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000

08001f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f50:	f7ff fff0 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08004c8c 	.word	0x08004c8c

08001f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f78:	f7ff ffdc 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0b5b      	lsrs	r3, r3, #13
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	08004c8c 	.word	0x08004c8c

08001f9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	220f      	movs	r2, #15
 8001faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_RCC_GetClockConfig+0x60>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0207 	and.w	r2, r3, #7
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	601a      	str	r2, [r3, #0]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e041      	b.n	8002096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f839 	bl	800209e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3304      	adds	r3, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f000 f9d8 	bl	80023f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d001      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e04e      	b.n	800216a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a23      	ldr	r2, [pc, #140]	; (8002178 <HAL_TIM_Base_Start_IT+0xc4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d022      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x80>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f6:	d01d      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x80>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_TIM_Base_Start_IT+0xc8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d018      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x80>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_TIM_Base_Start_IT+0xcc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x80>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_TIM_Base_Start_IT+0xd0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00e      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x80>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_TIM_Base_Start_IT+0xd4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d009      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x80>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_TIM_Base_Start_IT+0xd8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x80>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a18      	ldr	r2, [pc, #96]	; (8002190 <HAL_TIM_Base_Start_IT+0xdc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d111      	bne.n	8002158 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b06      	cmp	r3, #6
 8002144:	d010      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002156:	e007      	b.n	8002168 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40010000 	.word	0x40010000
 800217c:	40000400 	.word	0x40000400
 8002180:	40000800 	.word	0x40000800
 8002184:	40000c00 	.word	0x40000c00
 8002188:	40010400 	.word	0x40010400
 800218c:	40014000 	.word	0x40014000
 8002190:	40001800 	.word	0x40001800

08002194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d122      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d11b      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0202 	mvn.w	r2, #2
 80021c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8ee 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8e0 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f8f1 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d122      	bne.n	8002244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b04      	cmp	r3, #4
 800220a:	d11b      	bne.n	8002244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0204 	mvn.w	r2, #4
 8002214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f8c4 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f8b6 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f8c7 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b08      	cmp	r3, #8
 8002250:	d122      	bne.n	8002298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b08      	cmp	r3, #8
 800225e:	d11b      	bne.n	8002298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0208 	mvn.w	r2, #8
 8002268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2204      	movs	r2, #4
 800226e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f89a 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 8002284:	e005      	b.n	8002292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f88c 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f89d 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d122      	bne.n	80022ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d11b      	bne.n	80022ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0210 	mvn.w	r2, #16
 80022bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2208      	movs	r2, #8
 80022c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f870 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 80022d8:	e005      	b.n	80022e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f862 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f873 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10e      	bne.n	8002318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0201 	mvn.w	r2, #1
 8002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fc92 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	2b80      	cmp	r3, #128	; 0x80
 8002324:	d10e      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d107      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800233c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f902 	bl	8002548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	d107      	bne.n	8002370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f838 	bl	80023e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b20      	cmp	r3, #32
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b20      	cmp	r3, #32
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0220 	mvn.w	r2, #32
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8cc 	bl	8002534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a40      	ldr	r2, [pc, #256]	; (8002508 <TIM_Base_SetConfig+0x114>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002412:	d00f      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3d      	ldr	r2, [pc, #244]	; (800250c <TIM_Base_SetConfig+0x118>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00b      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3c      	ldr	r2, [pc, #240]	; (8002510 <TIM_Base_SetConfig+0x11c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3b      	ldr	r2, [pc, #236]	; (8002514 <TIM_Base_SetConfig+0x120>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a3a      	ldr	r2, [pc, #232]	; (8002518 <TIM_Base_SetConfig+0x124>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d108      	bne.n	8002446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a2f      	ldr	r2, [pc, #188]	; (8002508 <TIM_Base_SetConfig+0x114>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02b      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d027      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a2c      	ldr	r2, [pc, #176]	; (800250c <TIM_Base_SetConfig+0x118>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d023      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2b      	ldr	r2, [pc, #172]	; (8002510 <TIM_Base_SetConfig+0x11c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01f      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <TIM_Base_SetConfig+0x120>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01b      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a29      	ldr	r2, [pc, #164]	; (8002518 <TIM_Base_SetConfig+0x124>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d017      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a28      	ldr	r2, [pc, #160]	; (800251c <TIM_Base_SetConfig+0x128>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <TIM_Base_SetConfig+0x12c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00f      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a26      	ldr	r2, [pc, #152]	; (8002524 <TIM_Base_SetConfig+0x130>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00b      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a25      	ldr	r2, [pc, #148]	; (8002528 <TIM_Base_SetConfig+0x134>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a24      	ldr	r2, [pc, #144]	; (800252c <TIM_Base_SetConfig+0x138>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d003      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a23      	ldr	r2, [pc, #140]	; (8002530 <TIM_Base_SetConfig+0x13c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d108      	bne.n	80024b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <TIM_Base_SetConfig+0x114>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <TIM_Base_SetConfig+0xf8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a0c      	ldr	r2, [pc, #48]	; (8002518 <TIM_Base_SetConfig+0x124>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d103      	bne.n	80024f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	615a      	str	r2, [r3, #20]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	40000400 	.word	0x40000400
 8002510:	40000800 	.word	0x40000800
 8002514:	40000c00 	.word	0x40000c00
 8002518:	40010400 	.word	0x40010400
 800251c:	40014000 	.word	0x40014000
 8002520:	40014400 	.word	0x40014400
 8002524:	40014800 	.word	0x40014800
 8002528:	40001800 	.word	0x40001800
 800252c:	40001c00 	.word	0x40001c00
 8002530:	40002000 	.word	0x40002000

08002534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e03f      	b.n	80025ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fb9e 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	; 0x24
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800259e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fd23 	bl	8002fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	4613      	mov	r3, r2
 8002602:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	d130      	bne.n	8002672 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_UART_Transmit_IT+0x26>
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e029      	b.n	8002674 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_UART_Transmit_IT+0x38>
 800262a:	2302      	movs	r3, #2
 800262c:	e022      	b.n	8002674 <HAL_UART_Transmit_IT+0x7e>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2221      	movs	r2, #33	; 0x21
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800266c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002672:	2302      	movs	r3, #2
  }
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	d11d      	bne.n	80026d6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_UART_Receive_IT+0x26>
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e016      	b.n	80026d8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_UART_Receive_IT+0x38>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e00f      	b.n	80026d8 <HAL_UART_Receive_IT+0x58>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	461a      	mov	r2, r3
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fab5 	bl	8002c3c <UART_Start_Receive_IT>
 80026d2:	4603      	mov	r3, r0
 80026d4:	e000      	b.n	80026d8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
  }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b0ba      	sub	sp, #232	; 0xe8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800271e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_UART_IRQHandler+0x66>
 8002732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fb99 	bl	8002e76 <UART_Receive_IT>
      return;
 8002744:	e256      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80de 	beq.w	800290c <HAL_UART_IRQHandler+0x22c>
 8002750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002760:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80d1 	beq.w	800290c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_UART_IRQHandler+0xae>
 8002776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_UART_IRQHandler+0xd2>
 800279a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0202 	orr.w	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_UART_IRQHandler+0xf6>
 80027be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f043 0204 	orr.w	r2, r3, #4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d011      	beq.n	8002806 <HAL_UART_IRQHandler+0x126>
 80027e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0208 	orr.w	r2, r3, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 81ed 	beq.w	8002bea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_UART_IRQHandler+0x14e>
 800281c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fb24 	bl	8002e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_UART_IRQHandler+0x17a>
 8002852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d04f      	beq.n	80028fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa2c 	bl	8002cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d141      	bne.n	80028f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3314      	adds	r3, #20
 8002874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3314      	adds	r3, #20
 8002896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800289a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800289e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1d9      	bne.n	800286e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d013      	beq.n	80028ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	4a7d      	ldr	r2, [pc, #500]	; (8002abc <HAL_UART_IRQHandler+0x3dc>)
 80028c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fcda 	bl	8001288 <HAL_DMA_Abort_IT>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028e4:	4610      	mov	r0, r2
 80028e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e8:	e00e      	b.n	8002908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f990 	bl	8002c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f0:	e00a      	b.n	8002908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f98c 	bl	8002c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	e006      	b.n	8002908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f988 	bl	8002c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002906:	e170      	b.n	8002bea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002908:	bf00      	nop
    return;
 800290a:	e16e      	b.n	8002bea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	2b01      	cmp	r3, #1
 8002912:	f040 814a 	bne.w	8002baa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8143 	beq.w	8002baa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 813c 	beq.w	8002baa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	f040 80b4 	bne.w	8002ac0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8140 	beq.w	8002bee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002976:	429a      	cmp	r2, r3
 8002978:	f080 8139 	bcs.w	8002bee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002982:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	f000 8088 	beq.w	8002aa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1d9      	bne.n	8002992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3314      	adds	r3, #20
 80029e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e8:	e853 3f00 	ldrex	r3, [r3]
 80029ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a0e:	e841 2300 	strex	r3, r2, [r1]
 8002a12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e1      	bne.n	80029de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3314      	adds	r3, #20
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3314      	adds	r3, #20
 8002a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a46:	e841 2300 	strex	r3, r2, [r1]
 8002a4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e3      	bne.n	8002a1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6a:	e853 3f00 	ldrex	r3, [r3]
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a72:	f023 0310 	bic.w	r3, r3, #16
 8002a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a84:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a8c:	e841 2300 	strex	r3, r2, [r1]
 8002a90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e3      	bne.n	8002a60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fb83 	bl	80011a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8b6 	bl	8002c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ab8:	e099      	b.n	8002bee <HAL_UART_IRQHandler+0x50e>
 8002aba:	bf00      	nop
 8002abc:	08002d7f 	.word	0x08002d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 808b 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8086 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e3      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3314      	adds	r3, #20
 8002b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b42:	633a      	str	r2, [r7, #48]	; 0x30
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0310 	bic.w	r3, r3, #16
 8002b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b88:	61fa      	str	r2, [r7, #28]
 8002b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	69b9      	ldr	r1, [r7, #24]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	617b      	str	r3, [r7, #20]
   return(result);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e3      	bne.n	8002b64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f83e 	bl	8002c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ba8:	e023      	b.n	8002bf2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_UART_IRQHandler+0x4ea>
 8002bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8ef 	bl	8002da6 <UART_Transmit_IT>
    return;
 8002bc8:	e014      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00e      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x514>
 8002bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f92f 	bl	8002e46 <UART_EndTransmit_IT>
    return;
 8002be8:	e004      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
    return;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8002bf2:	bf00      	nop
  }
}
 8002bf4:	37e8      	adds	r7, #232	; 0xe8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop

08002bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	88fa      	ldrh	r2, [r7, #6]
 8002c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2222      	movs	r2, #34	; 0x22
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0220 	orr.w	r2, r2, #32
 8002ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b095      	sub	sp, #84	; 0x54
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce0:	643a      	str	r2, [r7, #64]	; 0x40
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3314      	adds	r3, #20
 8002cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3314      	adds	r3, #20
 8002d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e5      	bne.n	8002cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d119      	bne.n	8002d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	e853 3f00 	ldrex	r3, [r3]
 8002d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f023 0310 	bic.w	r3, r3, #16
 8002d46:	647b      	str	r3, [r7, #68]	; 0x44
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d50:	61ba      	str	r2, [r7, #24]
 8002d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d54:	6979      	ldr	r1, [r7, #20]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	e841 2300 	strex	r3, r2, [r1]
 8002d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e5      	bne.n	8002d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d72:	bf00      	nop
 8002d74:	3754      	adds	r7, #84	; 0x54
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff ff39 	bl	8002c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b21      	cmp	r3, #33	; 0x21
 8002db8:	d13e      	bne.n	8002e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc2:	d114      	bne.n	8002dee <UART_Transmit_IT+0x48>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d110      	bne.n	8002dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	1c9a      	adds	r2, r3, #2
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	621a      	str	r2, [r3, #32]
 8002dec:	e008      	b.n	8002e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6211      	str	r1, [r2, #32]
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10f      	bne.n	8002e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e000      	b.n	8002e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fec8 	bl	8002bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b08c      	sub	sp, #48	; 0x30
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b22      	cmp	r3, #34	; 0x22
 8002e88:	f040 80ab 	bne.w	8002fe2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d117      	bne.n	8002ec6 <UART_Receive_IT+0x50>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d113      	bne.n	8002ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	1c9a      	adds	r2, r3, #2
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec4:	e026      	b.n	8002f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d007      	beq.n	8002eea <UART_Receive_IT+0x74>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <UART_Receive_IT+0x82>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e008      	b.n	8002f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4619      	mov	r1, r3
 8002f22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d15a      	bne.n	8002fde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0220 	bic.w	r2, r2, #32
 8002f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d135      	bne.n	8002fd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f023 0310 	bic.w	r3, r3, #16
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	623a      	str	r2, [r7, #32]
 8002f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	69f9      	ldr	r1, [r7, #28]
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d10a      	bne.n	8002fc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fe29 	bl	8002c24 <HAL_UARTEx_RxEventCallback>
 8002fd2:	e002      	b.n	8002fda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fd fc9b 	bl	8000910 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e002      	b.n	8002fe4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
  }
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3730      	adds	r7, #48	; 0x30
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff0:	b0c0      	sub	sp, #256	; 0x100
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	68d9      	ldr	r1, [r3, #12]
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	ea40 0301 	orr.w	r3, r0, r1
 8003014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	431a      	orrs	r2, r3
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	431a      	orrs	r2, r3
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003044:	f021 010c 	bic.w	r1, r1, #12
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003052:	430b      	orrs	r3, r1
 8003054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003066:	6999      	ldr	r1, [r3, #24]
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	ea40 0301 	orr.w	r3, r0, r1
 8003072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b8f      	ldr	r3, [pc, #572]	; (80032b8 <UART_SetConfig+0x2cc>)
 800307c:	429a      	cmp	r2, r3
 800307e:	d005      	beq.n	800308c <UART_SetConfig+0xa0>
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b8d      	ldr	r3, [pc, #564]	; (80032bc <UART_SetConfig+0x2d0>)
 8003088:	429a      	cmp	r2, r3
 800308a:	d104      	bne.n	8003096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800308c:	f7fe ff72 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 8003090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003094:	e003      	b.n	800309e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003096:	f7fe ff59 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 800309a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a8:	f040 810c 	bne.w	80032c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80030c6:	415b      	adcs	r3, r3
 80030c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030ce:	4621      	mov	r1, r4
 80030d0:	eb12 0801 	adds.w	r8, r2, r1
 80030d4:	4629      	mov	r1, r5
 80030d6:	eb43 0901 	adc.w	r9, r3, r1
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ee:	4690      	mov	r8, r2
 80030f0:	4699      	mov	r9, r3
 80030f2:	4623      	mov	r3, r4
 80030f4:	eb18 0303 	adds.w	r3, r8, r3
 80030f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030fc:	462b      	mov	r3, r5
 80030fe:	eb49 0303 	adc.w	r3, r9, r3
 8003102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800311a:	460b      	mov	r3, r1
 800311c:	18db      	adds	r3, r3, r3
 800311e:	653b      	str	r3, [r7, #80]	; 0x50
 8003120:	4613      	mov	r3, r2
 8003122:	eb42 0303 	adc.w	r3, r2, r3
 8003126:	657b      	str	r3, [r7, #84]	; 0x54
 8003128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800312c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003130:	f7fd f84e 	bl	80001d0 <__aeabi_uldivmod>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <UART_SetConfig+0x2d4>)
 800313a:	fba3 2302 	umull	r2, r3, r3, r2
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	011c      	lsls	r4, r3, #4
 8003142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003146:	2200      	movs	r2, #0
 8003148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800314c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003154:	4642      	mov	r2, r8
 8003156:	464b      	mov	r3, r9
 8003158:	1891      	adds	r1, r2, r2
 800315a:	64b9      	str	r1, [r7, #72]	; 0x48
 800315c:	415b      	adcs	r3, r3
 800315e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003164:	4641      	mov	r1, r8
 8003166:	eb12 0a01 	adds.w	sl, r2, r1
 800316a:	4649      	mov	r1, r9
 800316c:	eb43 0b01 	adc.w	fp, r3, r1
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800317c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003184:	4692      	mov	sl, r2
 8003186:	469b      	mov	fp, r3
 8003188:	4643      	mov	r3, r8
 800318a:	eb1a 0303 	adds.w	r3, sl, r3
 800318e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003192:	464b      	mov	r3, r9
 8003194:	eb4b 0303 	adc.w	r3, fp, r3
 8003198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031b0:	460b      	mov	r3, r1
 80031b2:	18db      	adds	r3, r3, r3
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
 80031b6:	4613      	mov	r3, r2
 80031b8:	eb42 0303 	adc.w	r3, r2, r3
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
 80031be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031c6:	f7fd f803 	bl	80001d0 <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <UART_SetConfig+0x2d4>)
 80031d2:	fba3 2301 	umull	r2, r3, r3, r1
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2264      	movs	r2, #100	; 0x64
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	1acb      	subs	r3, r1, r3
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <UART_SetConfig+0x2d4>)
 80031e8:	fba3 2302 	umull	r2, r3, r3, r2
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031f4:	441c      	add	r4, r3
 80031f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	1891      	adds	r1, r2, r2
 800320e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003210:	415b      	adcs	r3, r3
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003218:	4641      	mov	r1, r8
 800321a:	1851      	adds	r1, r2, r1
 800321c:	6339      	str	r1, [r7, #48]	; 0x30
 800321e:	4649      	mov	r1, r9
 8003220:	414b      	adcs	r3, r1
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003230:	4659      	mov	r1, fp
 8003232:	00cb      	lsls	r3, r1, #3
 8003234:	4651      	mov	r1, sl
 8003236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323a:	4651      	mov	r1, sl
 800323c:	00ca      	lsls	r2, r1, #3
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	4603      	mov	r3, r0
 8003244:	4642      	mov	r2, r8
 8003246:	189b      	adds	r3, r3, r2
 8003248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800324c:	464b      	mov	r3, r9
 800324e:	460a      	mov	r2, r1
 8003250:	eb42 0303 	adc.w	r3, r2, r3
 8003254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800326c:	460b      	mov	r3, r1
 800326e:	18db      	adds	r3, r3, r3
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
 8003272:	4613      	mov	r3, r2
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800327e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003282:	f7fc ffa5 	bl	80001d0 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <UART_SetConfig+0x2d4>)
 800328c:	fba3 1302 	umull	r1, r3, r3, r2
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	2164      	movs	r1, #100	; 0x64
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	3332      	adds	r3, #50	; 0x32
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <UART_SetConfig+0x2d4>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	f003 0207 	and.w	r2, r3, #7
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4422      	add	r2, r4
 80032b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032b4:	e105      	b.n	80034c2 <UART_SetConfig+0x4d6>
 80032b6:	bf00      	nop
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032d6:	4642      	mov	r2, r8
 80032d8:	464b      	mov	r3, r9
 80032da:	1891      	adds	r1, r2, r2
 80032dc:	6239      	str	r1, [r7, #32]
 80032de:	415b      	adcs	r3, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032e6:	4641      	mov	r1, r8
 80032e8:	1854      	adds	r4, r2, r1
 80032ea:	4649      	mov	r1, r9
 80032ec:	eb43 0501 	adc.w	r5, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	00eb      	lsls	r3, r5, #3
 80032fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032fe:	00e2      	lsls	r2, r4, #3
 8003300:	4614      	mov	r4, r2
 8003302:	461d      	mov	r5, r3
 8003304:	4643      	mov	r3, r8
 8003306:	18e3      	adds	r3, r4, r3
 8003308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800330c:	464b      	mov	r3, r9
 800330e:	eb45 0303 	adc.w	r3, r5, r3
 8003312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003332:	4629      	mov	r1, r5
 8003334:	008b      	lsls	r3, r1, #2
 8003336:	4621      	mov	r1, r4
 8003338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800333c:	4621      	mov	r1, r4
 800333e:	008a      	lsls	r2, r1, #2
 8003340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003344:	f7fc ff44 	bl	80001d0 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4b60      	ldr	r3, [pc, #384]	; (80034d0 <UART_SetConfig+0x4e4>)
 800334e:	fba3 2302 	umull	r2, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	011c      	lsls	r4, r3, #4
 8003356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800335a:	2200      	movs	r2, #0
 800335c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003368:	4642      	mov	r2, r8
 800336a:	464b      	mov	r3, r9
 800336c:	1891      	adds	r1, r2, r2
 800336e:	61b9      	str	r1, [r7, #24]
 8003370:	415b      	adcs	r3, r3
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003378:	4641      	mov	r1, r8
 800337a:	1851      	adds	r1, r2, r1
 800337c:	6139      	str	r1, [r7, #16]
 800337e:	4649      	mov	r1, r9
 8003380:	414b      	adcs	r3, r1
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003390:	4659      	mov	r1, fp
 8003392:	00cb      	lsls	r3, r1, #3
 8003394:	4651      	mov	r1, sl
 8003396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339a:	4651      	mov	r1, sl
 800339c:	00ca      	lsls	r2, r1, #3
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	4642      	mov	r2, r8
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033ac:	464b      	mov	r3, r9
 80033ae:	460a      	mov	r2, r1
 80033b0:	eb42 0303 	adc.w	r3, r2, r3
 80033b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80033c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033d0:	4649      	mov	r1, r9
 80033d2:	008b      	lsls	r3, r1, #2
 80033d4:	4641      	mov	r1, r8
 80033d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033da:	4641      	mov	r1, r8
 80033dc:	008a      	lsls	r2, r1, #2
 80033de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033e2:	f7fc fef5 	bl	80001d0 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <UART_SetConfig+0x4e4>)
 80033ec:	fba3 1302 	umull	r1, r3, r3, r2
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	2164      	movs	r1, #100	; 0x64
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	3332      	adds	r3, #50	; 0x32
 80033fe:	4a34      	ldr	r2, [pc, #208]	; (80034d0 <UART_SetConfig+0x4e4>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340a:	441c      	add	r4, r3
 800340c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003410:	2200      	movs	r2, #0
 8003412:	673b      	str	r3, [r7, #112]	; 0x70
 8003414:	677a      	str	r2, [r7, #116]	; 0x74
 8003416:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800341a:	4642      	mov	r2, r8
 800341c:	464b      	mov	r3, r9
 800341e:	1891      	adds	r1, r2, r2
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	415b      	adcs	r3, r3
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800342a:	4641      	mov	r1, r8
 800342c:	1851      	adds	r1, r2, r1
 800342e:	6039      	str	r1, [r7, #0]
 8003430:	4649      	mov	r1, r9
 8003432:	414b      	adcs	r3, r1
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003442:	4659      	mov	r1, fp
 8003444:	00cb      	lsls	r3, r1, #3
 8003446:	4651      	mov	r1, sl
 8003448:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800344c:	4651      	mov	r1, sl
 800344e:	00ca      	lsls	r2, r1, #3
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	4603      	mov	r3, r0
 8003456:	4642      	mov	r2, r8
 8003458:	189b      	adds	r3, r3, r2
 800345a:	66bb      	str	r3, [r7, #104]	; 0x68
 800345c:	464b      	mov	r3, r9
 800345e:	460a      	mov	r2, r1
 8003460:	eb42 0303 	adc.w	r3, r2, r3
 8003464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	663b      	str	r3, [r7, #96]	; 0x60
 8003470:	667a      	str	r2, [r7, #100]	; 0x64
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800347e:	4649      	mov	r1, r9
 8003480:	008b      	lsls	r3, r1, #2
 8003482:	4641      	mov	r1, r8
 8003484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003488:	4641      	mov	r1, r8
 800348a:	008a      	lsls	r2, r1, #2
 800348c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003490:	f7fc fe9e 	bl	80001d0 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <UART_SetConfig+0x4e4>)
 800349a:	fba3 1302 	umull	r1, r3, r3, r2
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2164      	movs	r1, #100	; 0x64
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	3332      	adds	r3, #50	; 0x32
 80034ac:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <UART_SetConfig+0x4e4>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4422      	add	r2, r4
 80034c0:	609a      	str	r2, [r3, #8]
}
 80034c2:	bf00      	nop
 80034c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034c8:	46bd      	mov	sp, r7
 80034ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ce:	bf00      	nop
 80034d0:	51eb851f 	.word	0x51eb851f

080034d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e6:	2b84      	cmp	r3, #132	; 0x84
 80034e8:	d005      	beq.n	80034f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80034ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4413      	add	r3, r2
 80034f2:	3303      	adds	r3, #3
 80034f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003508:	f000 fc00 	bl	8003d0c <vTaskStartScheduler>
  
  return osOK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	bd80      	pop	{r7, pc}

08003512 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003514:	b089      	sub	sp, #36	; 0x24
 8003516:	af04      	add	r7, sp, #16
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d020      	beq.n	8003566 <osThreadCreate+0x54>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01c      	beq.n	8003566 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685c      	ldr	r4, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681d      	ldr	r5, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691e      	ldr	r6, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ffc8 	bl	80034d4 <makeFreeRtosPriority>
 8003544:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800354e:	9202      	str	r2, [sp, #8]
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	9100      	str	r1, [sp, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	4632      	mov	r2, r6
 8003558:	4629      	mov	r1, r5
 800355a:	4620      	mov	r0, r4
 800355c:	f000 f8ed 	bl	800373a <xTaskCreateStatic>
 8003560:	4603      	mov	r3, r0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e01c      	b.n	80035a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685c      	ldr	r4, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003572:	b29e      	uxth	r6, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ffaa 	bl	80034d4 <makeFreeRtosPriority>
 8003580:	4602      	mov	r2, r0
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	9200      	str	r2, [sp, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	4632      	mov	r2, r6
 800358e:	4629      	mov	r1, r5
 8003590:	4620      	mov	r0, r4
 8003592:	f000 f92f 	bl	80037f4 <xTaskCreate>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d001      	beq.n	80035a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80035a0:	68fb      	ldr	r3, [r7, #12]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <osDelay+0x16>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	e000      	b.n	80035c2 <osDelay+0x18>
 80035c0:	2301      	movs	r3, #1
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fa4c 	bl	8003a60 <vTaskDelay>
  
  return osOK;
 80035c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f103 0208 	add.w	r2, r3, #8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f103 0208 	add.w	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f103 0208 	add.w	r2, r3, #8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d103      	bne.n	8003694 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e00c      	b.n	80036ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3308      	adds	r3, #8
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e002      	b.n	80036a2 <vListInsert+0x2e>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d2f6      	bcs.n	800369c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	601a      	str	r2, [r3, #0]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6852      	ldr	r2, [r2, #4]
 8003706:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d103      	bne.n	800371a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	1e5a      	subs	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800373a:	b580      	push	{r7, lr}
 800373c:	b08e      	sub	sp, #56	; 0x38
 800373e:	af04      	add	r7, sp, #16
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <xTaskCreateStatic+0x46>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	61fb      	str	r3, [r7, #28]
}
 800377c:	bf00      	nop
 800377e:	e7fe      	b.n	800377e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003780:	2354      	movs	r3, #84	; 0x54
 8003782:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b54      	cmp	r3, #84	; 0x54
 8003788:	d00a      	beq.n	80037a0 <xTaskCreateStatic+0x66>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	61bb      	str	r3, [r7, #24]
}
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01e      	beq.n	80037e6 <xTaskCreateStatic+0xac>
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01b      	beq.n	80037e6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037c0:	2300      	movs	r3, #0
 80037c2:	9303      	str	r3, [sp, #12]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	9302      	str	r3, [sp, #8]
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f850 	bl	800387e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037e0:	f000 f8d4 	bl	800398c <prvAddNewTaskToReadyList>
 80037e4:	e001      	b.n	80037ea <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037ea:	697b      	ldr	r3, [r7, #20]
	}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	; 0x30
 80037f8:	af04      	add	r7, sp, #16
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4618      	mov	r0, r3
 800380a:	f000 ffe5 	bl	80047d8 <pvPortMalloc>
 800380e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00e      	beq.n	8003834 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003816:	2054      	movs	r0, #84	; 0x54
 8003818:	f000 ffde 	bl	80047d8 <pvPortMalloc>
 800381c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
 800382a:	e005      	b.n	8003838 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800382c:	6978      	ldr	r0, [r7, #20]
 800382e:	f001 f89f 	bl	8004970 <vPortFree>
 8003832:	e001      	b.n	8003838 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d017      	beq.n	800386e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	2300      	movs	r3, #0
 800384a:	9303      	str	r3, [sp, #12]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	9302      	str	r3, [sp, #8]
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f80e 	bl	800387e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003862:	69f8      	ldr	r0, [r7, #28]
 8003864:	f000 f892 	bl	800398c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003868:	2301      	movs	r3, #1
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	e002      	b.n	8003874 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800386e:	f04f 33ff 	mov.w	r3, #4294967295
 8003872:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003874:	69bb      	ldr	r3, [r7, #24]
	}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b088      	sub	sp, #32
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003896:	3b01      	subs	r3, #1
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	f023 0307 	bic.w	r3, r3, #7
 80038a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <prvInitialiseNewTask+0x48>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	617b      	str	r3, [r7, #20]
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01f      	beq.n	800390c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e012      	b.n	80038f8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	7819      	ldrb	r1, [r3, #0]
 80038da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	3334      	adds	r3, #52	; 0x34
 80038e2:	460a      	mov	r2, r1
 80038e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	4413      	add	r3, r2
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d006      	beq.n	8003900 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3301      	adds	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	d9e9      	bls.n	80038d2 <prvInitialiseNewTask+0x54>
 80038fe:	e000      	b.n	8003902 <prvInitialiseNewTask+0x84>
			{
				break;
 8003900:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800390a:	e003      	b.n	8003914 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	2b06      	cmp	r3, #6
 8003918:	d901      	bls.n	800391e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800391a:	2306      	movs	r3, #6
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	2200      	movs	r2, #0
 800392e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fe6c 	bl	8003612 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	3318      	adds	r3, #24
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fe67 	bl	8003612 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003948:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	f1c3 0207 	rsb	r2, r3, #7
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	2200      	movs	r2, #0
 800395e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	69b8      	ldr	r0, [r7, #24]
 800396e:	f000 fd27 	bl	80043c0 <pxPortInitialiseStack>
 8003972:	4602      	mov	r2, r0
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003982:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003984:	bf00      	nop
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003994:	f000 fe3e 	bl	8004614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003998:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <prvAddNewTaskToReadyList+0xb8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <prvAddNewTaskToReadyList+0xb8>)
 80039a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039a2:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <prvAddNewTaskToReadyList+0xbc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039aa:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <prvAddNewTaskToReadyList+0xbc>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039b0:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <prvAddNewTaskToReadyList+0xb8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d110      	bne.n	80039da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039b8:	f000 fbde 	bl	8004178 <prvInitialiseTaskLists>
 80039bc:	e00d      	b.n	80039da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039be:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <prvAddNewTaskToReadyList+0xc0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <prvAddNewTaskToReadyList+0xbc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d802      	bhi.n	80039da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039d4:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <prvAddNewTaskToReadyList+0xbc>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <prvAddNewTaskToReadyList+0xc4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3301      	adds	r3, #1
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <prvAddNewTaskToReadyList+0xc4>)
 80039e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	2201      	movs	r2, #1
 80039ea:	409a      	lsls	r2, r3
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <prvAddNewTaskToReadyList+0xcc>)
 8003a04:	441a      	add	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f7ff fe0d 	bl	800362c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a12:	f000 fe2f 	bl	8004674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <prvAddNewTaskToReadyList+0xc0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00e      	beq.n	8003a3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <prvAddNewTaskToReadyList+0xbc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d207      	bcs.n	8003a3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <prvAddNewTaskToReadyList+0xd0>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000440 	.word	0x20000440
 8003a48:	20000340 	.word	0x20000340
 8003a4c:	2000044c 	.word	0x2000044c
 8003a50:	2000045c 	.word	0x2000045c
 8003a54:	20000448 	.word	0x20000448
 8003a58:	20000344 	.word	0x20000344
 8003a5c:	e000ed04 	.word	0xe000ed04

08003a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d017      	beq.n	8003aa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <vTaskDelay+0x60>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <vTaskDelay+0x30>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	60bb      	str	r3, [r7, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	e7fe      	b.n	8003a8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a90:	f000 f99c 	bl	8003dcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a94:	2100      	movs	r1, #0
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fc2c 	bl	80042f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a9c:	f000 f9a4 	bl	8003de8 <xTaskResumeAll>
 8003aa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <vTaskDelay+0x64>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000468 	.word	0x20000468
 8003ac4:	e000ed04 	.word	0xe000ed04

08003ac8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003ad0:	f000 fda0 	bl	8004614 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <vTaskSuspend+0x18>
 8003ada:	4b3c      	ldr	r3, [pc, #240]	; (8003bcc <vTaskSuspend+0x104>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	e000      	b.n	8003ae2 <vTaskSuspend+0x1a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fdfc 	bl	80036e6 <uxListRemove>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d115      	bne.n	8003b20 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	4935      	ldr	r1, [pc, #212]	; (8003bd0 <vTaskSuspend+0x108>)
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <vTaskSuspend+0x58>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	2201      	movs	r2, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43da      	mvns	r2, r3
 8003b16:	4b2f      	ldr	r3, [pc, #188]	; (8003bd4 <vTaskSuspend+0x10c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <vTaskSuspend+0x10c>)
 8003b1e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3318      	adds	r3, #24
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fdda 	bl	80036e6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4827      	ldr	r0, [pc, #156]	; (8003bd8 <vTaskSuspend+0x110>)
 8003b3a:	f7ff fd77 	bl	800362c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d103      	bne.n	8003b52 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003b52:	f000 fd8f 	bl	8004674 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003b56:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <vTaskSuspend+0x114>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003b5e:	f000 fd59 	bl	8004614 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003b62:	f000 fba7 	bl	80042b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003b66:	f000 fd85 	bl	8004674 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <vTaskSuspend+0x104>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d127      	bne.n	8003bc4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <vTaskSuspend+0x114>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d017      	beq.n	8003bac <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <vTaskSuspend+0x118>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <vTaskSuspend+0xd2>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60bb      	str	r3, [r7, #8]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <vTaskSuspend+0x11c>)
 8003b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003baa:	e00b      	b.n	8003bc4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <vTaskSuspend+0x110>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <vTaskSuspend+0x120>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d103      	bne.n	8003bc0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <vTaskSuspend+0x104>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
	}
 8003bbe:	e001      	b.n	8003bc4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003bc0:	f000 fa66 	bl	8004090 <vTaskSwitchContext>
	}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000340 	.word	0x20000340
 8003bd0:	20000344 	.word	0x20000344
 8003bd4:	20000448 	.word	0x20000448
 8003bd8:	2000042c 	.word	0x2000042c
 8003bdc:	2000044c 	.word	0x2000044c
 8003be0:	20000468 	.word	0x20000468
 8003be4:	e000ed04 	.word	0xe000ed04
 8003be8:	20000440 	.word	0x20000440

08003bec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60fb      	str	r3, [r7, #12]
}
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <prvTaskIsTaskSuspended+0x5c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10a      	bne.n	8003c38 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <prvTaskIsTaskSuspended+0x60>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d005      	beq.n	8003c38 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c38:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	2000042c 	.word	0x2000042c
 8003c4c:	20000400 	.word	0x20000400

08003c50 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <vTaskResume+0x28>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60bb      	str	r3, [r7, #8]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <vTaskResume+0xac>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d037      	beq.n	8003cf2 <vTaskResume+0xa2>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d034      	beq.n	8003cf2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003c88:	f000 fcc4 	bl	8004614 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff ffad 	bl	8003bec <prvTaskIsTaskSuspended>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d02a      	beq.n	8003cee <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fd22 	bl	80036e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <vTaskResume+0xb0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <vTaskResume+0xb0>)
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <vTaskResume+0xb4>)
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f7ff fcae 	bl	800362c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <vTaskResume+0xac>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d307      	bcc.n	8003cee <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <vTaskResume+0xb8>)
 8003ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003cee:	f000 fcc1 	bl	8004674 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000340 	.word	0x20000340
 8003d00:	20000448 	.word	0x20000448
 8003d04:	20000344 	.word	0x20000344
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d1a:	463a      	mov	r2, r7
 8003d1c:	1d39      	adds	r1, r7, #4
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fbd6 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d28:	6839      	ldr	r1, [r7, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	9202      	str	r2, [sp, #8]
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	2300      	movs	r3, #0
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	460a      	mov	r2, r1
 8003d3a:	491e      	ldr	r1, [pc, #120]	; (8003db4 <vTaskStartScheduler+0xa8>)
 8003d3c:	481e      	ldr	r0, [pc, #120]	; (8003db8 <vTaskStartScheduler+0xac>)
 8003d3e:	f7ff fcfc 	bl	800373a <xTaskCreateStatic>
 8003d42:	4603      	mov	r3, r0
 8003d44:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <vTaskStartScheduler+0xb0>)
 8003d46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d48:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <vTaskStartScheduler+0xb0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e001      	b.n	8003d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d116      	bne.n	8003d8e <vTaskStartScheduler+0x82>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	613b      	str	r3, [r7, #16]
}
 8003d72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <vTaskStartScheduler+0xb4>)
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <vTaskStartScheduler+0xb8>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <vTaskStartScheduler+0xbc>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d88:	f000 fba2 	bl	80044d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d8c:	e00e      	b.n	8003dac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d10a      	bne.n	8003dac <vTaskStartScheduler+0xa0>
	__asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	60fb      	str	r3, [r7, #12]
}
 8003da8:	bf00      	nop
 8003daa:	e7fe      	b.n	8003daa <vTaskStartScheduler+0x9e>
}
 8003dac:	bf00      	nop
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	08004c74 	.word	0x08004c74
 8003db8:	08004149 	.word	0x08004149
 8003dbc:	20000464 	.word	0x20000464
 8003dc0:	20000460 	.word	0x20000460
 8003dc4:	2000044c 	.word	0x2000044c
 8003dc8:	20000444 	.word	0x20000444

08003dcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <vTaskSuspendAll+0x18>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	4a03      	ldr	r2, [pc, #12]	; (8003de4 <vTaskSuspendAll+0x18>)
 8003dd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	20000468 	.word	0x20000468

08003de8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <xTaskResumeAll+0x114>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <xTaskResumeAll+0x2c>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	603b      	str	r3, [r7, #0]
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e14:	f000 fbfe 	bl	8004614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e18:	4b38      	ldr	r3, [pc, #224]	; (8003efc <xTaskResumeAll+0x114>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	4a37      	ldr	r2, [pc, #220]	; (8003efc <xTaskResumeAll+0x114>)
 8003e20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e22:	4b36      	ldr	r3, [pc, #216]	; (8003efc <xTaskResumeAll+0x114>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d161      	bne.n	8003eee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e2a:	4b35      	ldr	r3, [pc, #212]	; (8003f00 <xTaskResumeAll+0x118>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d05d      	beq.n	8003eee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e32:	e02e      	b.n	8003e92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e34:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <xTaskResumeAll+0x11c>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3318      	adds	r3, #24
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fc50 	bl	80036e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fc4b 	bl	80036e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	2201      	movs	r2, #1
 8003e56:	409a      	lsls	r2, r3
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <xTaskResumeAll+0x120>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	4a2a      	ldr	r2, [pc, #168]	; (8003f08 <xTaskResumeAll+0x120>)
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4a27      	ldr	r2, [pc, #156]	; (8003f0c <xTaskResumeAll+0x124>)
 8003e70:	441a      	add	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7ff fbd7 	bl	800362c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <xTaskResumeAll+0x128>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e8c:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <xTaskResumeAll+0x12c>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e92:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <xTaskResumeAll+0x11c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1cc      	bne.n	8003e34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ea0:	f000 fa08 	bl	80042b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <xTaskResumeAll+0x130>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d010      	beq.n	8003ed2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003eb0:	f000 f836 	bl	8003f20 <xTaskIncrementTick>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <xTaskResumeAll+0x12c>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f1      	bne.n	8003eb0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003ecc:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <xTaskResumeAll+0x130>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <xTaskResumeAll+0x12c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003eda:	2301      	movs	r3, #1
 8003edc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ede:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <xTaskResumeAll+0x134>)
 8003ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eee:	f000 fbc1 	bl	8004674 <vPortExitCritical>

	return xAlreadyYielded;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000468 	.word	0x20000468
 8003f00:	20000440 	.word	0x20000440
 8003f04:	20000400 	.word	0x20000400
 8003f08:	20000448 	.word	0x20000448
 8003f0c:	20000344 	.word	0x20000344
 8003f10:	20000340 	.word	0x20000340
 8003f14:	20000454 	.word	0x20000454
 8003f18:	20000450 	.word	0x20000450
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f2a:	4b4e      	ldr	r3, [pc, #312]	; (8004064 <xTaskIncrementTick+0x144>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 808e 	bne.w	8004050 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f34:	4b4c      	ldr	r3, [pc, #304]	; (8004068 <xTaskIncrementTick+0x148>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f3c:	4a4a      	ldr	r2, [pc, #296]	; (8004068 <xTaskIncrementTick+0x148>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d120      	bne.n	8003f8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f48:	4b48      	ldr	r3, [pc, #288]	; (800406c <xTaskIncrementTick+0x14c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	603b      	str	r3, [r7, #0]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <xTaskIncrementTick+0x46>
 8003f68:	4b40      	ldr	r3, [pc, #256]	; (800406c <xTaskIncrementTick+0x14c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b40      	ldr	r3, [pc, #256]	; (8004070 <xTaskIncrementTick+0x150>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a3e      	ldr	r2, [pc, #248]	; (800406c <xTaskIncrementTick+0x14c>)
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4a3e      	ldr	r2, [pc, #248]	; (8004070 <xTaskIncrementTick+0x150>)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b3d      	ldr	r3, [pc, #244]	; (8004074 <xTaskIncrementTick+0x154>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	4a3c      	ldr	r2, [pc, #240]	; (8004074 <xTaskIncrementTick+0x154>)
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	f000 f995 	bl	80042b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <xTaskIncrementTick+0x158>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d348      	bcc.n	8004026 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f94:	4b35      	ldr	r3, [pc, #212]	; (800406c <xTaskIncrementTick+0x14c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d104      	bne.n	8003fa8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9e:	4b36      	ldr	r3, [pc, #216]	; (8004078 <xTaskIncrementTick+0x158>)
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	601a      	str	r2, [r3, #0]
					break;
 8003fa6:	e03e      	b.n	8004026 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa8:	4b30      	ldr	r3, [pc, #192]	; (800406c <xTaskIncrementTick+0x14c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d203      	bcs.n	8003fc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fc0:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <xTaskIncrementTick+0x158>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fc6:	e02e      	b.n	8004026 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fb8a 	bl	80036e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3318      	adds	r3, #24
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fb81 	bl	80036e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	4b23      	ldr	r3, [pc, #140]	; (800407c <xTaskIncrementTick+0x15c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	4a22      	ldr	r2, [pc, #136]	; (800407c <xTaskIncrementTick+0x15c>)
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <xTaskIncrementTick+0x160>)
 8004004:	441a      	add	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3304      	adds	r3, #4
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f7ff fb0d 	bl	800362c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004016:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <xTaskIncrementTick+0x164>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	429a      	cmp	r2, r3
 800401e:	d3b9      	bcc.n	8003f94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004020:	2301      	movs	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004024:	e7b6      	b.n	8003f94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004026:	4b17      	ldr	r3, [pc, #92]	; (8004084 <xTaskIncrementTick+0x164>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	4914      	ldr	r1, [pc, #80]	; (8004080 <xTaskIncrementTick+0x160>)
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d901      	bls.n	8004042 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800403e:	2301      	movs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004042:	4b11      	ldr	r3, [pc, #68]	; (8004088 <xTaskIncrementTick+0x168>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800404a:	2301      	movs	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e004      	b.n	800405a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004050:	4b0e      	ldr	r3, [pc, #56]	; (800408c <xTaskIncrementTick+0x16c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3301      	adds	r3, #1
 8004056:	4a0d      	ldr	r2, [pc, #52]	; (800408c <xTaskIncrementTick+0x16c>)
 8004058:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800405a:	697b      	ldr	r3, [r7, #20]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000468 	.word	0x20000468
 8004068:	20000444 	.word	0x20000444
 800406c:	200003f8 	.word	0x200003f8
 8004070:	200003fc 	.word	0x200003fc
 8004074:	20000458 	.word	0x20000458
 8004078:	20000460 	.word	0x20000460
 800407c:	20000448 	.word	0x20000448
 8004080:	20000344 	.word	0x20000344
 8004084:	20000340 	.word	0x20000340
 8004088:	20000454 	.word	0x20000454
 800408c:	20000450 	.word	0x20000450

08004090 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004096:	4b27      	ldr	r3, [pc, #156]	; (8004134 <vTaskSwitchContext+0xa4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800409e:	4b26      	ldr	r3, [pc, #152]	; (8004138 <vTaskSwitchContext+0xa8>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040a4:	e03f      	b.n	8004126 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80040a6:	4b24      	ldr	r3, [pc, #144]	; (8004138 <vTaskSwitchContext+0xa8>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ac:	4b23      	ldr	r3, [pc, #140]	; (800413c <vTaskSwitchContext+0xac>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040ba:	7afb      	ldrb	r3, [r7, #11]
 80040bc:	f1c3 031f 	rsb	r3, r3, #31
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	491f      	ldr	r1, [pc, #124]	; (8004140 <vTaskSwitchContext+0xb0>)
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	607b      	str	r3, [r7, #4]
}
 80040e8:	bf00      	nop
 80040ea:	e7fe      	b.n	80040ea <vTaskSwitchContext+0x5a>
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <vTaskSwitchContext+0xb0>)
 80040f8:	4413      	add	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3308      	adds	r3, #8
 800410e:	429a      	cmp	r2, r3
 8004110:	d104      	bne.n	800411c <vTaskSwitchContext+0x8c>
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4a08      	ldr	r2, [pc, #32]	; (8004144 <vTaskSwitchContext+0xb4>)
 8004124:	6013      	str	r3, [r2, #0]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000468 	.word	0x20000468
 8004138:	20000454 	.word	0x20000454
 800413c:	20000448 	.word	0x20000448
 8004140:	20000344 	.word	0x20000344
 8004144:	20000340 	.word	0x20000340

08004148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004150:	f000 f852 	bl	80041f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <prvIdleTask+0x28>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d9f9      	bls.n	8004150 <prvIdleTask+0x8>
			{
				taskYIELD();
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <prvIdleTask+0x2c>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800416c:	e7f0      	b.n	8004150 <prvIdleTask+0x8>
 800416e:	bf00      	nop
 8004170:	20000344 	.word	0x20000344
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	e00c      	b.n	800419e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <prvInitialiseTaskLists+0x60>)
 8004190:	4413      	add	r3, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fa1d 	bl	80035d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3301      	adds	r3, #1
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b06      	cmp	r3, #6
 80041a2:	d9ef      	bls.n	8004184 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041a4:	480d      	ldr	r0, [pc, #52]	; (80041dc <prvInitialiseTaskLists+0x64>)
 80041a6:	f7ff fa14 	bl	80035d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041aa:	480d      	ldr	r0, [pc, #52]	; (80041e0 <prvInitialiseTaskLists+0x68>)
 80041ac:	f7ff fa11 	bl	80035d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041b0:	480c      	ldr	r0, [pc, #48]	; (80041e4 <prvInitialiseTaskLists+0x6c>)
 80041b2:	f7ff fa0e 	bl	80035d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041b6:	480c      	ldr	r0, [pc, #48]	; (80041e8 <prvInitialiseTaskLists+0x70>)
 80041b8:	f7ff fa0b 	bl	80035d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041bc:	480b      	ldr	r0, [pc, #44]	; (80041ec <prvInitialiseTaskLists+0x74>)
 80041be:	f7ff fa08 	bl	80035d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <prvInitialiseTaskLists+0x78>)
 80041c4:	4a05      	ldr	r2, [pc, #20]	; (80041dc <prvInitialiseTaskLists+0x64>)
 80041c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <prvInitialiseTaskLists+0x7c>)
 80041ca:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <prvInitialiseTaskLists+0x68>)
 80041cc:	601a      	str	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000344 	.word	0x20000344
 80041dc:	200003d0 	.word	0x200003d0
 80041e0:	200003e4 	.word	0x200003e4
 80041e4:	20000400 	.word	0x20000400
 80041e8:	20000414 	.word	0x20000414
 80041ec:	2000042c 	.word	0x2000042c
 80041f0:	200003f8 	.word	0x200003f8
 80041f4:	200003fc 	.word	0x200003fc

080041f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041fe:	e019      	b.n	8004234 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004200:	f000 fa08 	bl	8004614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004204:	4b10      	ldr	r3, [pc, #64]	; (8004248 <prvCheckTasksWaitingTermination+0x50>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fa68 	bl	80036e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <prvCheckTasksWaitingTermination+0x54>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3b01      	subs	r3, #1
 800421c:	4a0b      	ldr	r2, [pc, #44]	; (800424c <prvCheckTasksWaitingTermination+0x54>)
 800421e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <prvCheckTasksWaitingTermination+0x58>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3b01      	subs	r3, #1
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <prvCheckTasksWaitingTermination+0x58>)
 8004228:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800422a:	f000 fa23 	bl	8004674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f810 	bl	8004254 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <prvCheckTasksWaitingTermination+0x58>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e1      	bne.n	8004200 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000414 	.word	0x20000414
 800424c:	20000440 	.word	0x20000440
 8004250:	20000428 	.word	0x20000428

08004254 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fb80 	bl	8004970 <vPortFree>
				vPortFree( pxTCB );
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fb7d 	bl	8004970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004276:	e018      	b.n	80042aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800427e:	2b01      	cmp	r3, #1
 8004280:	d103      	bne.n	800428a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fb74 	bl	8004970 <vPortFree>
	}
 8004288:	e00f      	b.n	80042aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004290:	2b02      	cmp	r3, #2
 8004292:	d00a      	beq.n	80042aa <prvDeleteTCB+0x56>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	60fb      	str	r3, [r7, #12]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <prvDeleteTCB+0x54>
	}
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <prvResetNextTaskUnblockTime+0x38>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <prvResetNextTaskUnblockTime+0x3c>)
 80042c6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042cc:	e008      	b.n	80042e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <prvResetNextTaskUnblockTime+0x38>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <prvResetNextTaskUnblockTime+0x3c>)
 80042de:	6013      	str	r3, [r2, #0]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	200003f8 	.word	0x200003f8
 80042f0:	20000460 	.word	0x20000460

080042f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004304:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3304      	adds	r3, #4
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f9eb 	bl	80036e6 <uxListRemove>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	2201      	movs	r2, #1
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43da      	mvns	r2, r3
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4013      	ands	r3, r2
 800432a:	4a20      	ldr	r2, [pc, #128]	; (80043ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800432c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d10a      	bne.n	800434c <prvAddCurrentTaskToDelayedList+0x58>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3304      	adds	r3, #4
 8004342:	4619      	mov	r1, r3
 8004344:	481a      	ldr	r0, [pc, #104]	; (80043b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004346:	f7ff f971 	bl	800362c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800434a:	e026      	b.n	800439a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004354:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	429a      	cmp	r2, r3
 8004362:	d209      	bcs.n	8004378 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f7ff f97f 	bl	8003674 <vListInsert>
}
 8004376:	e010      	b.n	800439a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f7ff f975 	bl	8003674 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	d202      	bcs.n	800439a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004394:	4a09      	ldr	r2, [pc, #36]	; (80043bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6013      	str	r3, [r2, #0]
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000444 	.word	0x20000444
 80043a8:	20000340 	.word	0x20000340
 80043ac:	20000448 	.word	0x20000448
 80043b0:	2000042c 	.word	0x2000042c
 80043b4:	200003fc 	.word	0x200003fc
 80043b8:	200003f8 	.word	0x200003f8
 80043bc:	20000460 	.word	0x20000460

080043c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3b04      	subs	r3, #4
 80043d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b04      	subs	r3, #4
 80043de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f023 0201 	bic.w	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3b04      	subs	r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043f0:	4a0c      	ldr	r2, [pc, #48]	; (8004424 <pxPortInitialiseStack+0x64>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b14      	subs	r3, #20
 80043fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3b04      	subs	r3, #4
 8004406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f06f 0202 	mvn.w	r2, #2
 800440e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3b20      	subs	r3, #32
 8004414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004416:	68fb      	ldr	r3, [r7, #12]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	08004429 	.word	0x08004429

08004428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <prvTaskExitError+0x54>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d00a      	beq.n	8004452 <prvTaskExitError+0x2a>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60fb      	str	r3, [r7, #12]
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <prvTaskExitError+0x28>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	60bb      	str	r3, [r7, #8]
}
 8004464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004466:	bf00      	nop
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0fc      	beq.n	8004468 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800446e:	bf00      	nop
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	2000000c 	.word	0x2000000c

08004480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <pxCurrentTCBConst2>)
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	6808      	ldr	r0, [r1, #0]
 8004486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	f380 8809 	msr	PSP, r0
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8811 	msr	BASEPRI, r0
 800449a:	4770      	bx	lr
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst2>:
 80044a0:	20000340 	.word	0x20000340
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044a8:	4808      	ldr	r0, [pc, #32]	; (80044cc <prvPortStartFirstTask+0x24>)
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	f380 8808 	msr	MSP, r0
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8814 	msr	CONTROL, r0
 80044ba:	b662      	cpsie	i
 80044bc:	b661      	cpsie	f
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	df00      	svc	0
 80044c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044ca:	bf00      	nop
 80044cc:	e000ed08 	.word	0xe000ed08

080044d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044d6:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <xPortStartScheduler+0x120>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <xPortStartScheduler+0x124>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10a      	bne.n	80044f6 <xPortStartScheduler+0x26>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	613b      	str	r3, [r7, #16]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044f6:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <xPortStartScheduler+0x120>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a3f      	ldr	r2, [pc, #252]	; (80045f8 <xPortStartScheduler+0x128>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d10a      	bne.n	8004516 <xPortStartScheduler+0x46>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	60fb      	str	r3, [r7, #12]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004516:	4b39      	ldr	r3, [pc, #228]	; (80045fc <xPortStartScheduler+0x12c>)
 8004518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	22ff      	movs	r2, #255	; 0xff
 8004526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004538:	b2da      	uxtb	r2, r3
 800453a:	4b31      	ldr	r3, [pc, #196]	; (8004600 <xPortStartScheduler+0x130>)
 800453c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800453e:	4b31      	ldr	r3, [pc, #196]	; (8004604 <xPortStartScheduler+0x134>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004544:	e009      	b.n	800455a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004546:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <xPortStartScheduler+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <xPortStartScheduler+0x134>)
 800454e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d0ef      	beq.n	8004546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004566:	4b27      	ldr	r3, [pc, #156]	; (8004604 <xPortStartScheduler+0x134>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1c3 0307 	rsb	r3, r3, #7
 800456e:	2b04      	cmp	r3, #4
 8004570:	d00a      	beq.n	8004588 <xPortStartScheduler+0xb8>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60bb      	str	r3, [r7, #8]
}
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <xPortStartScheduler+0x134>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <xPortStartScheduler+0x134>)
 8004590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004592:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <xPortStartScheduler+0x134>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800459a:	4a1a      	ldr	r2, [pc, #104]	; (8004604 <xPortStartScheduler+0x134>)
 800459c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045a6:	4b18      	ldr	r3, [pc, #96]	; (8004608 <xPortStartScheduler+0x138>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a17      	ldr	r2, [pc, #92]	; (8004608 <xPortStartScheduler+0x138>)
 80045ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <xPortStartScheduler+0x138>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a14      	ldr	r2, [pc, #80]	; (8004608 <xPortStartScheduler+0x138>)
 80045b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045be:	f000 f8dd 	bl	800477c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <xPortStartScheduler+0x13c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045c8:	f000 f8fc 	bl	80047c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <xPortStartScheduler+0x140>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <xPortStartScheduler+0x140>)
 80045d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045d8:	f7ff ff66 	bl	80044a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045dc:	f7ff fd58 	bl	8004090 <vTaskSwitchContext>
	prvTaskExitError();
 80045e0:	f7ff ff22 	bl	8004428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	e000ed00 	.word	0xe000ed00
 80045f4:	410fc271 	.word	0x410fc271
 80045f8:	410fc270 	.word	0x410fc270
 80045fc:	e000e400 	.word	0xe000e400
 8004600:	2000046c 	.word	0x2000046c
 8004604:	20000470 	.word	0x20000470
 8004608:	e000ed20 	.word	0xe000ed20
 800460c:	2000000c 	.word	0x2000000c
 8004610:	e000ef34 	.word	0xe000ef34

08004614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	607b      	str	r3, [r7, #4]
}
 800462c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <vPortEnterCritical+0x58>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a0d      	ldr	r2, [pc, #52]	; (800466c <vPortEnterCritical+0x58>)
 8004636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <vPortEnterCritical+0x58>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10f      	bne.n	8004660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vPortEnterCritical+0x5c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <vPortEnterCritical+0x4c>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vPortEnterCritical+0x4a>
	}
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	2000000c 	.word	0x2000000c
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <vPortExitCritical+0x50>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <vPortExitCritical+0x24>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	607b      	str	r3, [r7, #4]
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <vPortExitCritical+0x50>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <vPortExitCritical+0x50>)
 80046a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <vPortExitCritical+0x50>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <vPortExitCritical+0x42>
 80046aa:	2300      	movs	r3, #0
 80046ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c
	...

080046d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046d0:	f3ef 8009 	mrs	r0, PSP
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <pxCurrentTCBConst>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	f01e 0f10 	tst.w	lr, #16
 80046e0:	bf08      	it	eq
 80046e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	6010      	str	r0, [r2, #0]
 80046ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046f4:	f380 8811 	msr	BASEPRI, r0
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f7ff fcc6 	bl	8004090 <vTaskSwitchContext>
 8004704:	f04f 0000 	mov.w	r0, #0
 8004708:	f380 8811 	msr	BASEPRI, r0
 800470c:	bc09      	pop	{r0, r3}
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	6808      	ldr	r0, [r1, #0]
 8004712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004716:	f01e 0f10 	tst.w	lr, #16
 800471a:	bf08      	it	eq
 800471c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004720:	f380 8809 	msr	PSP, r0
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	f3af 8000 	nop.w

08004730 <pxCurrentTCBConst>:
 8004730:	20000340 	.word	0x20000340
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	607b      	str	r3, [r7, #4]
}
 8004750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004752:	f7ff fbe5 	bl	8003f20 <xTaskIncrementTick>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <SysTick_Handler+0x40>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	2300      	movs	r3, #0
 8004766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f383 8811 	msr	BASEPRI, r3
}
 800476e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <vPortSetupTimerInterrupt+0x34>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <vPortSetupTimerInterrupt+0x38>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <vPortSetupTimerInterrupt+0x3c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <vPortSetupTimerInterrupt+0x40>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <vPortSetupTimerInterrupt+0x44>)
 800479a:	3b01      	subs	r3, #1
 800479c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <vPortSetupTimerInterrupt+0x34>)
 80047a0:	2207      	movs	r2, #7
 80047a2:	601a      	str	r2, [r3, #0]
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000e010 	.word	0xe000e010
 80047b4:	e000e018 	.word	0xe000e018
 80047b8:	20000000 	.word	0x20000000
 80047bc:	10624dd3 	.word	0x10624dd3
 80047c0:	e000e014 	.word	0xe000e014

080047c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047d4 <vPortEnableVFP+0x10>
 80047c8:	6801      	ldr	r1, [r0, #0]
 80047ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ce:	6001      	str	r1, [r0, #0]
 80047d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047d2:	bf00      	nop
 80047d4:	e000ed88 	.word	0xe000ed88

080047d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047e4:	f7ff faf2 	bl	8003dcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047e8:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <pvPortMalloc+0x180>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047f0:	f000 f920 	bl	8004a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047f4:	4b59      	ldr	r3, [pc, #356]	; (800495c <pvPortMalloc+0x184>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f040 8093 	bne.w	8004928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01d      	beq.n	8004844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004808:	2208      	movs	r2, #8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	2b00      	cmp	r3, #0
 8004818:	d014      	beq.n	8004844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f023 0307 	bic.w	r3, r3, #7
 8004820:	3308      	adds	r3, #8
 8004822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <pvPortMalloc+0x6c>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	617b      	str	r3, [r7, #20]
}
 8004840:	bf00      	nop
 8004842:	e7fe      	b.n	8004842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d06e      	beq.n	8004928 <pvPortMalloc+0x150>
 800484a:	4b45      	ldr	r3, [pc, #276]	; (8004960 <pvPortMalloc+0x188>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	d869      	bhi.n	8004928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004854:	4b43      	ldr	r3, [pc, #268]	; (8004964 <pvPortMalloc+0x18c>)
 8004856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004858:	4b42      	ldr	r3, [pc, #264]	; (8004964 <pvPortMalloc+0x18c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800485e:	e004      	b.n	800486a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d903      	bls.n	800487c <pvPortMalloc+0xa4>
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f1      	bne.n	8004860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800487c:	4b36      	ldr	r3, [pc, #216]	; (8004958 <pvPortMalloc+0x180>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004882:	429a      	cmp	r2, r3
 8004884:	d050      	beq.n	8004928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2208      	movs	r2, #8
 800488c:	4413      	add	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	2308      	movs	r3, #8
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d91f      	bls.n	80048e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <pvPortMalloc+0xf8>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	613b      	str	r3, [r7, #16]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	1ad2      	subs	r2, r2, r3
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048e2:	69b8      	ldr	r0, [r7, #24]
 80048e4:	f000 f908 	bl	8004af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <pvPortMalloc+0x188>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <pvPortMalloc+0x188>)
 80048f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <pvPortMalloc+0x188>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <pvPortMalloc+0x190>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d203      	bcs.n	800490a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004902:	4b17      	ldr	r3, [pc, #92]	; (8004960 <pvPortMalloc+0x188>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a18      	ldr	r2, [pc, #96]	; (8004968 <pvPortMalloc+0x190>)
 8004908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <pvPortMalloc+0x184>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	431a      	orrs	r2, r3
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <pvPortMalloc+0x194>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	4a11      	ldr	r2, [pc, #68]	; (800496c <pvPortMalloc+0x194>)
 8004926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004928:	f7ff fa5e 	bl	8003de8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <pvPortMalloc+0x174>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	60fb      	str	r3, [r7, #12]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <pvPortMalloc+0x172>
	return pvReturn;
 800494c:	69fb      	ldr	r3, [r7, #28]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3728      	adds	r7, #40	; 0x28
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	2000407c 	.word	0x2000407c
 800495c:	20004090 	.word	0x20004090
 8004960:	20004080 	.word	0x20004080
 8004964:	20004074 	.word	0x20004074
 8004968:	20004084 	.word	0x20004084
 800496c:	20004088 	.word	0x20004088

08004970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04d      	beq.n	8004a1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004982:	2308      	movs	r3, #8
 8004984:	425b      	negs	r3, r3
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4413      	add	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <vPortFree+0xb8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <vPortFree+0x44>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	60fb      	str	r3, [r7, #12]
}
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <vPortFree+0x62>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60bb      	str	r3, [r7, #8]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <vPortFree+0xb8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01e      	beq.n	8004a1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d11a      	bne.n	8004a1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <vPortFree+0xb8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	401a      	ands	r2, r3
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049f8:	f7ff f9e8 	bl	8003dcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <vPortFree+0xbc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4413      	add	r3, r2
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <vPortFree+0xbc>)
 8004a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a0a:	6938      	ldr	r0, [r7, #16]
 8004a0c:	f000 f874 	bl	8004af8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <vPortFree+0xc0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	4a06      	ldr	r2, [pc, #24]	; (8004a30 <vPortFree+0xc0>)
 8004a18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a1a:	f7ff f9e5 	bl	8003de8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20004090 	.word	0x20004090
 8004a2c:	20004080 	.word	0x20004080
 8004a30:	2000408c 	.word	0x2000408c

08004a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a40:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <prvHeapInit+0xac>)
 8004a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3307      	adds	r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0307 	bic.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <prvHeapInit+0xac>)
 8004a64:	4413      	add	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <prvHeapInit+0xb0>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <prvHeapInit+0xb0>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a80:	2208      	movs	r2, #8
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0307 	bic.w	r3, r3, #7
 8004a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a15      	ldr	r2, [pc, #84]	; (8004ae8 <prvHeapInit+0xb4>)
 8004a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <prvHeapInit+0xb4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <prvHeapInit+0xb4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	1ad2      	subs	r2, r2, r3
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <prvHeapInit+0xb4>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <prvHeapInit+0xb8>)
 8004ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <prvHeapInit+0xbc>)
 8004aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <prvHeapInit+0xc0>)
 8004ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ad2:	601a      	str	r2, [r3, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	20000474 	.word	0x20000474
 8004ae4:	20004074 	.word	0x20004074
 8004ae8:	2000407c 	.word	0x2000407c
 8004aec:	20004084 	.word	0x20004084
 8004af0:	20004080 	.word	0x20004080
 8004af4:	20004090 	.word	0x20004090

08004af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b00:	4b28      	ldr	r3, [pc, #160]	; (8004ba4 <prvInsertBlockIntoFreeList+0xac>)
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e002      	b.n	8004b0c <prvInsertBlockIntoFreeList+0x14>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d8f7      	bhi.n	8004b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	4413      	add	r3, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d108      	bne.n	8004b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	441a      	add	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d118      	bne.n	8004b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d00d      	beq.n	8004b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	441a      	add	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e008      	b.n	8004b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e003      	b.n	8004b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d002      	beq.n	8004b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b96:	bf00      	nop
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20004074 	.word	0x20004074
 8004ba8:	2000407c 	.word	0x2000407c

08004bac <__libc_init_array>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4d0d      	ldr	r5, [pc, #52]	; (8004be4 <__libc_init_array+0x38>)
 8004bb0:	4c0d      	ldr	r4, [pc, #52]	; (8004be8 <__libc_init_array+0x3c>)
 8004bb2:	1b64      	subs	r4, r4, r5
 8004bb4:	10a4      	asrs	r4, r4, #2
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	42a6      	cmp	r6, r4
 8004bba:	d109      	bne.n	8004bd0 <__libc_init_array+0x24>
 8004bbc:	4d0b      	ldr	r5, [pc, #44]	; (8004bec <__libc_init_array+0x40>)
 8004bbe:	4c0c      	ldr	r4, [pc, #48]	; (8004bf0 <__libc_init_array+0x44>)
 8004bc0:	f000 f828 	bl	8004c14 <_init>
 8004bc4:	1b64      	subs	r4, r4, r5
 8004bc6:	10a4      	asrs	r4, r4, #2
 8004bc8:	2600      	movs	r6, #0
 8004bca:	42a6      	cmp	r6, r4
 8004bcc:	d105      	bne.n	8004bda <__libc_init_array+0x2e>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd4:	4798      	blx	r3
 8004bd6:	3601      	adds	r6, #1
 8004bd8:	e7ee      	b.n	8004bb8 <__libc_init_array+0xc>
 8004bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bde:	4798      	blx	r3
 8004be0:	3601      	adds	r6, #1
 8004be2:	e7f2      	b.n	8004bca <__libc_init_array+0x1e>
 8004be4:	08004c9c 	.word	0x08004c9c
 8004be8:	08004c9c 	.word	0x08004c9c
 8004bec:	08004c9c 	.word	0x08004c9c
 8004bf0:	08004ca0 	.word	0x08004ca0

08004bf4 <memset>:
 8004bf4:	4402      	add	r2, r0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <memset+0xa>
 8004bfc:	4770      	bx	lr
 8004bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004c02:	e7f9      	b.n	8004bf8 <memset+0x4>

08004c04 <strcpy>:
 8004c04:	4603      	mov	r3, r0
 8004c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c0a:	f803 2b01 	strb.w	r2, [r3], #1
 8004c0e:	2a00      	cmp	r2, #0
 8004c10:	d1f9      	bne.n	8004c06 <strcpy+0x2>
 8004c12:	4770      	bx	lr

08004c14 <_init>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	bf00      	nop
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr

08004c20 <_fini>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	bf00      	nop
 8004c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c26:	bc08      	pop	{r3}
 8004c28:	469e      	mov	lr, r3
 8004c2a:	4770      	bx	lr
