
002_PROJECT_UART_IT_2_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad4  08004ad4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004adc  08004adc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004084  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004094  20004094  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a84  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a09  00000000  00000000  00032ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  000354d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  000365b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229f2  00000000  00000000  00037588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d2a  00000000  00000000  00059f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3882  00000000  00000000  0006cca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140526  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000465c  00000000  00000000  00140578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a54 	.word	0x08004a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004a54 	.word	0x08004a54

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000002c 	.word	0x2000002c
 8000504:	20000080 	.word	0x20000080

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b08e      	sub	sp, #56	; 0x38
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc1f 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f833 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f8c5 	bl	80006a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f899 	bl	8000650 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, LEDTask01, osPriorityNormal, 0, 128);
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <main+0x64>)
 8000520:	f107 041c 	add.w	r4, r7, #28
 8000524:	461d      	mov	r5, r3
 8000526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f002 ff06 	bl	800334a <osThreadCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x68>)
 8000542:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, ECHOTask02, osPriorityNormal, 0, 128);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <main+0x6c>)
 8000546:	463c      	mov	r4, r7
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000556:	463b      	mov	r3, r7
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fef5 	bl	800334a <osThreadCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a05      	ldr	r2, [pc, #20]	; (8000578 <main+0x70>)
 8000564:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000566:	f002 fee9 	bl	800333c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x62>
 800056c:	08004a7c 	.word	0x08004a7c
 8000570:	200002c4 	.word	0x200002c4
 8000574:	08004a98 	.word	0x08004a98
 8000578:	200002c8 	.word	0x200002c8

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fa52 	bl	8004a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f0:	23a8      	movs	r3, #168	; 0xa8
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f000 ff4f 	bl	80014a4 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 fa44 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2105      	movs	r1, #5
 800062e:	4618      	mov	r0, r3
 8000630:	f001 f9b0 	bl	8001994 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063a:	f000 fa2d 	bl	8000a98 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_USART2_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000688:	f001 fe84 	bl	8002394 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 fa01 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000280 	.word	0x20000280
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006fc:	f043 0308 	orr.w	r3, r3, #8
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_GPIO_Init+0x9c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0308 	and.w	r3, r3, #8
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <MX_GPIO_Init+0xa0>)
 8000716:	f000 fe91 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800071a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_GPIO_Init+0xa0>)
 8000734:	f000 fce6 	bl	8001104 <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40020c00 	.word	0x40020c00

08000748 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		// USART Interrupt Receive Function
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	/* rx_buffer start over solution. */
	rx_buffer[count] = *rx_call_buffer;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_UART_RxCpltCallback+0x44>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_UART_RxCpltCallback+0x48>)
 8000758:	7819      	ldrb	r1, [r3, #0]
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_UART_RxCpltCallback+0x4c>)
 800075c:	5499      	strb	r1, [r3, r2]
	count++;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_UART_RxCpltCallback+0x44>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_UART_RxCpltCallback+0x44>)
 8000768:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_call_buffer, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	4908      	ldr	r1, [pc, #32]	; (8000790 <HAL_UART_RxCpltCallback+0x48>)
 800076e:	480a      	ldr	r0, [pc, #40]	; (8000798 <HAL_UART_RxCpltCallback+0x50>)
 8000770:	f001 fea2 	bl	80024b8 <HAL_UART_Receive_IT>

	if (*rx_call_buffer == '\n')
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_UART_RxCpltCallback+0x48>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b0a      	cmp	r3, #10
 800077a:	d102      	bne.n	8000782 <HAL_UART_RxCpltCallback+0x3a>
	{
		count = 0;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_UART_RxCpltCallback+0x44>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
	}
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200002f0 	.word	0x200002f0
 8000790:	200002ec 	.word	0x200002ec
 8000794:	200002e0 	.word	0x200002e0
 8000798:	20000280 	.word	0x20000280

0800079c <LEDTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LEDTask01 */
void LEDTask01(void const * argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_call_buffer, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	498b      	ldr	r1, [pc, #556]	; (80009d4 <LEDTask01+0x238>)
 80007a8:	488b      	ldr	r0, [pc, #556]	; (80009d8 <LEDTask01+0x23c>)
 80007aa:	f001 fe85 	bl	80024b8 <HAL_UART_Receive_IT>

      if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a' && rx_buffer[3] == 'r' && rx_buffer[4] == 't')		// "start" string.
 80007ae:	4b8b      	ldr	r3, [pc, #556]	; (80009dc <LEDTask01+0x240>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b73      	cmp	r3, #115	; 0x73
 80007b4:	d11f      	bne.n	80007f6 <LEDTask01+0x5a>
 80007b6:	4b89      	ldr	r3, [pc, #548]	; (80009dc <LEDTask01+0x240>)
 80007b8:	785b      	ldrb	r3, [r3, #1]
 80007ba:	2b74      	cmp	r3, #116	; 0x74
 80007bc:	d11b      	bne.n	80007f6 <LEDTask01+0x5a>
 80007be:	4b87      	ldr	r3, [pc, #540]	; (80009dc <LEDTask01+0x240>)
 80007c0:	789b      	ldrb	r3, [r3, #2]
 80007c2:	2b61      	cmp	r3, #97	; 0x61
 80007c4:	d117      	bne.n	80007f6 <LEDTask01+0x5a>
 80007c6:	4b85      	ldr	r3, [pc, #532]	; (80009dc <LEDTask01+0x240>)
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	2b72      	cmp	r3, #114	; 0x72
 80007cc:	d113      	bne.n	80007f6 <LEDTask01+0x5a>
 80007ce:	4b83      	ldr	r3, [pc, #524]	; (80009dc <LEDTask01+0x240>)
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	2b74      	cmp	r3, #116	; 0x74
 80007d4:	d10f      	bne.n	80007f6 <LEDTask01+0x5a>
	  {
		  vTaskResume(Task02Handle);
 80007d6:	4b82      	ldr	r3, [pc, #520]	; (80009e0 <LEDTask01+0x244>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 f954 	bl	8003a88 <vTaskResume>
		  rx_stop = 0;
 80007e0:	4b80      	ldr	r3, [pc, #512]	; (80009e4 <LEDTask01+0x248>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
		  strcpy (tx_buffer, rx_buffer);
 80007e6:	497d      	ldr	r1, [pc, #500]	; (80009dc <LEDTask01+0x240>)
 80007e8:	487f      	ldr	r0, [pc, #508]	; (80009e8 <LEDTask01+0x24c>)
 80007ea:	f004 f92b 	bl	8004a44 <strcpy>
		  i = 6;
 80007ee:	4b7f      	ldr	r3, [pc, #508]	; (80009ec <LEDTask01+0x250>)
 80007f0:	2206      	movs	r2, #6
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	e058      	b.n	80008a8 <LEDTask01+0x10c>
	  }

      else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'n' &&	// "ledon500" string.
 80007f6:	4b79      	ldr	r3, [pc, #484]	; (80009dc <LEDTask01+0x240>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b6c      	cmp	r3, #108	; 0x6c
 80007fc:	d126      	bne.n	800084c <LEDTask01+0xb0>
 80007fe:	4b77      	ldr	r3, [pc, #476]	; (80009dc <LEDTask01+0x240>)
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	2b65      	cmp	r3, #101	; 0x65
 8000804:	d122      	bne.n	800084c <LEDTask01+0xb0>
 8000806:	4b75      	ldr	r3, [pc, #468]	; (80009dc <LEDTask01+0x240>)
 8000808:	789b      	ldrb	r3, [r3, #2]
 800080a:	2b64      	cmp	r3, #100	; 0x64
 800080c:	d11e      	bne.n	800084c <LEDTask01+0xb0>
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <LEDTask01+0x240>)
 8000810:	78db      	ldrb	r3, [r3, #3]
 8000812:	2b6f      	cmp	r3, #111	; 0x6f
 8000814:	d11a      	bne.n	800084c <LEDTask01+0xb0>
 8000816:	4b71      	ldr	r3, [pc, #452]	; (80009dc <LEDTask01+0x240>)
 8000818:	791b      	ldrb	r3, [r3, #4]
 800081a:	2b6e      	cmp	r3, #110	; 0x6e
 800081c:	d116      	bne.n	800084c <LEDTask01+0xb0>
			  rx_buffer[5] == '5' && rx_buffer[6] == '0' && rx_buffer[7] == '0')
 800081e:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <LEDTask01+0x240>)
 8000820:	795b      	ldrb	r3, [r3, #5]
      else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'n' &&	// "ledon500" string.
 8000822:	2b35      	cmp	r3, #53	; 0x35
 8000824:	d112      	bne.n	800084c <LEDTask01+0xb0>
			  rx_buffer[5] == '5' && rx_buffer[6] == '0' && rx_buffer[7] == '0')
 8000826:	4b6d      	ldr	r3, [pc, #436]	; (80009dc <LEDTask01+0x240>)
 8000828:	799b      	ldrb	r3, [r3, #6]
 800082a:	2b30      	cmp	r3, #48	; 0x30
 800082c:	d10e      	bne.n	800084c <LEDTask01+0xb0>
 800082e:	4b6b      	ldr	r3, [pc, #428]	; (80009dc <LEDTask01+0x240>)
 8000830:	79db      	ldrb	r3, [r3, #7]
 8000832:	2b30      	cmp	r3, #48	; 0x30
 8000834:	d10a      	bne.n	800084c <LEDTask01+0xb0>
	  {
		  rx_ledon = 1;
 8000836:	4b6e      	ldr	r3, [pc, #440]	; (80009f0 <LEDTask01+0x254>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
		  strcpy (tx_buffer, rx_buffer);
 800083c:	4967      	ldr	r1, [pc, #412]	; (80009dc <LEDTask01+0x240>)
 800083e:	486a      	ldr	r0, [pc, #424]	; (80009e8 <LEDTask01+0x24c>)
 8000840:	f004 f900 	bl	8004a44 <strcpy>
		  i = 9;
 8000844:	4b69      	ldr	r3, [pc, #420]	; (80009ec <LEDTask01+0x250>)
 8000846:	2209      	movs	r2, #9
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	e02d      	b.n	80008a8 <LEDTask01+0x10c>
	  }

      else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'f' &&	// "ledoff500" string.
 800084c:	4b63      	ldr	r3, [pc, #396]	; (80009dc <LEDTask01+0x240>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b6c      	cmp	r3, #108	; 0x6c
 8000852:	d129      	bne.n	80008a8 <LEDTask01+0x10c>
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <LEDTask01+0x240>)
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	2b65      	cmp	r3, #101	; 0x65
 800085a:	d125      	bne.n	80008a8 <LEDTask01+0x10c>
 800085c:	4b5f      	ldr	r3, [pc, #380]	; (80009dc <LEDTask01+0x240>)
 800085e:	789b      	ldrb	r3, [r3, #2]
 8000860:	2b64      	cmp	r3, #100	; 0x64
 8000862:	d121      	bne.n	80008a8 <LEDTask01+0x10c>
 8000864:	4b5d      	ldr	r3, [pc, #372]	; (80009dc <LEDTask01+0x240>)
 8000866:	78db      	ldrb	r3, [r3, #3]
 8000868:	2b6f      	cmp	r3, #111	; 0x6f
 800086a:	d11d      	bne.n	80008a8 <LEDTask01+0x10c>
 800086c:	4b5b      	ldr	r3, [pc, #364]	; (80009dc <LEDTask01+0x240>)
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	2b66      	cmp	r3, #102	; 0x66
 8000872:	d119      	bne.n	80008a8 <LEDTask01+0x10c>
			  rx_buffer[5] == 'f' && rx_buffer[6] == '5' && rx_buffer[7] == '0' && rx_buffer[8] == '0')
 8000874:	4b59      	ldr	r3, [pc, #356]	; (80009dc <LEDTask01+0x240>)
 8000876:	795b      	ldrb	r3, [r3, #5]
      else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == 'o' && rx_buffer[4] == 'f' &&	// "ledoff500" string.
 8000878:	2b66      	cmp	r3, #102	; 0x66
 800087a:	d115      	bne.n	80008a8 <LEDTask01+0x10c>
			  rx_buffer[5] == 'f' && rx_buffer[6] == '5' && rx_buffer[7] == '0' && rx_buffer[8] == '0')
 800087c:	4b57      	ldr	r3, [pc, #348]	; (80009dc <LEDTask01+0x240>)
 800087e:	799b      	ldrb	r3, [r3, #6]
 8000880:	2b35      	cmp	r3, #53	; 0x35
 8000882:	d111      	bne.n	80008a8 <LEDTask01+0x10c>
 8000884:	4b55      	ldr	r3, [pc, #340]	; (80009dc <LEDTask01+0x240>)
 8000886:	79db      	ldrb	r3, [r3, #7]
 8000888:	2b30      	cmp	r3, #48	; 0x30
 800088a:	d10d      	bne.n	80008a8 <LEDTask01+0x10c>
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <LEDTask01+0x240>)
 800088e:	7a1b      	ldrb	r3, [r3, #8]
 8000890:	2b30      	cmp	r3, #48	; 0x30
 8000892:	d109      	bne.n	80008a8 <LEDTask01+0x10c>
	  {
		  rx_ledoff = 1;
 8000894:	4b57      	ldr	r3, [pc, #348]	; (80009f4 <LEDTask01+0x258>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
		  strcpy (tx_buffer, rx_buffer);
 800089a:	4950      	ldr	r1, [pc, #320]	; (80009dc <LEDTask01+0x240>)
 800089c:	4852      	ldr	r0, [pc, #328]	; (80009e8 <LEDTask01+0x24c>)
 800089e:	f004 f8d1 	bl	8004a44 <strcpy>
		  i = 10;
 80008a2:	4b52      	ldr	r3, [pc, #328]	; (80009ec <LEDTask01+0x250>)
 80008a4:	220a      	movs	r2, #10
 80008a6:	701a      	strb	r2, [r3, #0]
	  }

      if (rx_stop == 0 && rx_ledon == 0 && rx_ledoff == 0)		// Default mode.
 80008a8:	4b4e      	ldr	r3, [pc, #312]	; (80009e4 <LEDTask01+0x248>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d11c      	bne.n	80008ea <LEDTask01+0x14e>
 80008b0:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <LEDTask01+0x254>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d118      	bne.n	80008ea <LEDTask01+0x14e>
 80008b8:	4b4e      	ldr	r3, [pc, #312]	; (80009f4 <LEDTask01+0x258>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d114      	bne.n	80008ea <LEDTask01+0x14e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c6:	484c      	ldr	r0, [pc, #304]	; (80009f8 <LEDTask01+0x25c>)
 80008c8:	f000 fdb8 	bl	800143c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 80008cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008d0:	f000 fa80 	bl	8000dd4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008da:	4847      	ldr	r0, [pc, #284]	; (80009f8 <LEDTask01+0x25c>)
 80008dc:	f000 fdae 	bl	800143c <HAL_GPIO_WritePin>
		  HAL_Delay(700);
 80008e0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80008e4:	f000 fa76 	bl	8000dd4 <HAL_Delay>
 80008e8:	e072      	b.n	80009d0 <LEDTask01+0x234>
	  }

	  else if (rx_stop == 1)
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <LEDTask01+0x248>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d109      	bne.n	8000906 <LEDTask01+0x16a>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);		// Led state control with "stop" string
 80008f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f6:	4840      	ldr	r0, [pc, #256]	; (80009f8 <LEDTask01+0x25c>)
 80008f8:	f000 fdb9 	bl	800146e <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 80008fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000900:	f000 fa68 	bl	8000dd4 <HAL_Delay>
 8000904:	e74e      	b.n	80007a4 <LEDTask01+0x8>
	  }

	  else if (rx_stop == 0 && rx_ledon == 1 && rx_ledoff == 0)			// Only "ledon500" string receive state.
 8000906:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <LEDTask01+0x248>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11c      	bne.n	8000948 <LEDTask01+0x1ac>
 800090e:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <LEDTask01+0x254>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d118      	bne.n	8000948 <LEDTask01+0x1ac>
 8000916:	4b37      	ldr	r3, [pc, #220]	; (80009f4 <LEDTask01+0x258>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d114      	bne.n	8000948 <LEDTask01+0x1ac>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000924:	4834      	ldr	r0, [pc, #208]	; (80009f8 <LEDTask01+0x25c>)
 8000926:	f000 fd89 	bl	800143c <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800092a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800092e:	f000 fa51 	bl	8000dd4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000938:	482f      	ldr	r0, [pc, #188]	; (80009f8 <LEDTask01+0x25c>)
 800093a:	f000 fd7f 	bl	800143c <HAL_GPIO_WritePin>
		  HAL_Delay(700);
 800093e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000942:	f000 fa47 	bl	8000dd4 <HAL_Delay>
 8000946:	e043      	b.n	80009d0 <LEDTask01+0x234>
	  }

	  else if (rx_stop == 0 && rx_ledon == 1 && rx_ledoff == 1)			// "ledon500" && "ledoff500" strings receive state.
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <LEDTask01+0x248>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d11c      	bne.n	800098a <LEDTask01+0x1ee>
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <LEDTask01+0x254>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d118      	bne.n	800098a <LEDTask01+0x1ee>
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <LEDTask01+0x258>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d114      	bne.n	800098a <LEDTask01+0x1ee>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000966:	4824      	ldr	r0, [pc, #144]	; (80009f8 <LEDTask01+0x25c>)
 8000968:	f000 fd68 	bl	800143c <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800096c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000970:	f000 fa30 	bl	8000dd4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097a:	481f      	ldr	r0, [pc, #124]	; (80009f8 <LEDTask01+0x25c>)
 800097c:	f000 fd5e 	bl	800143c <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000984:	f000 fa26 	bl	8000dd4 <HAL_Delay>
 8000988:	e022      	b.n	80009d0 <LEDTask01+0x234>
	  }

	  else if (rx_stop == 0 && rx_ledon == 0 && rx_ledoff == 1)			// Only "ledoff500" string receive state.
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <LEDTask01+0x248>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	f47f af08 	bne.w	80007a4 <LEDTask01+0x8>
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <LEDTask01+0x254>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	f47f af03 	bne.w	80007a4 <LEDTask01+0x8>
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <LEDTask01+0x258>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	f47f aefe 	bne.w	80007a4 <LEDTask01+0x8>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <LEDTask01+0x25c>)
 80009b0:	f000 fd44 	bl	800143c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 80009b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009b8:	f000 fa0c 	bl	8000dd4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LEDTask01+0x25c>)
 80009c4:	f000 fd3a 	bl	800143c <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80009c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009cc:	f000 fa02 	bl	8000dd4 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_call_buffer, 1);
 80009d0:	e6e8      	b.n	80007a4 <LEDTask01+0x8>
 80009d2:	bf00      	nop
 80009d4:	200002ec 	.word	0x200002ec
 80009d8:	20000280 	.word	0x20000280
 80009dc:	200002e0 	.word	0x200002e0
 80009e0:	200002c8 	.word	0x200002c8
 80009e4:	200002ed 	.word	0x200002ed
 80009e8:	200002cc 	.word	0x200002cc
 80009ec:	200002f1 	.word	0x200002f1
 80009f0:	200002ee 	.word	0x200002ee
 80009f4:	200002ef 	.word	0x200002ef
 80009f8:	40020c00 	.word	0x40020c00

080009fc <ECHOTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ECHOTask02 */
void ECHOTask02(void const * argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer, "Task02 Work ! \r\n"));		// TASK02 USART Transmit and Cooperative Multitasking test.
//	  osDelay(1000);

	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, i);		// ECHO working in this line.
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <ECHOTask02+0x5c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4913      	ldr	r1, [pc, #76]	; (8000a5c <ECHOTask02+0x60>)
 8000a0e:	4814      	ldr	r0, [pc, #80]	; (8000a60 <ECHOTask02+0x64>)
 8000a10:	f001 fd0d 	bl	800242e <HAL_UART_Transmit_IT>
	  osDelay(1000);
 8000a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a18:	f002 fce3 	bl	80033e2 <osDelay>

	  HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_call_buffer, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4911      	ldr	r1, [pc, #68]	; (8000a64 <ECHOTask02+0x68>)
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <ECHOTask02+0x64>)
 8000a22:	f001 fd49 	bl	80024b8 <HAL_UART_Receive_IT>

	  if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'o' && rx_buffer[3] == 'p')		// Echo task will be suspend with "stop" string.
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <ECHOTask02+0x6c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b73      	cmp	r3, #115	; 0x73
 8000a2c:	d1ea      	bne.n	8000a04 <ECHOTask02+0x8>
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <ECHOTask02+0x6c>)
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	2b74      	cmp	r3, #116	; 0x74
 8000a34:	d1e6      	bne.n	8000a04 <ECHOTask02+0x8>
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <ECHOTask02+0x6c>)
 8000a38:	789b      	ldrb	r3, [r3, #2]
 8000a3a:	2b6f      	cmp	r3, #111	; 0x6f
 8000a3c:	d1e2      	bne.n	8000a04 <ECHOTask02+0x8>
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <ECHOTask02+0x6c>)
 8000a40:	78db      	ldrb	r3, [r3, #3]
 8000a42:	2b70      	cmp	r3, #112	; 0x70
 8000a44:	d1de      	bne.n	8000a04 <ECHOTask02+0x8>
	  {
		  rx_stop = 1;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <ECHOTask02+0x70>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
		  vTaskSuspend(Task02Handle);
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <ECHOTask02+0x74>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 ff55 	bl	8003900 <vTaskSuspend>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, i);		// ECHO working in this line.
 8000a56:	e7d5      	b.n	8000a04 <ECHOTask02+0x8>
 8000a58:	200002f1 	.word	0x200002f1
 8000a5c:	200002cc 	.word	0x200002cc
 8000a60:	20000280 	.word	0x20000280
 8000a64:	200002ec 	.word	0x200002ec
 8000a68:	200002e0 	.word	0x200002e0
 8000a6c:	200002ed 	.word	0x200002ed
 8000a70:	200002c8 	.word	0x200002c8

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 f985 	bl	8000d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40010000 	.word	0x40010000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_MspInit+0x54>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <HAL_MspInit+0x54>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x54>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_MspInit+0x54>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_MspInit+0x54>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_MspInit+0x54>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	f06f 0001 	mvn.w	r0, #1
 8000aea:	f000 fa4f 	bl	8000f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <HAL_UART_MspInit+0x94>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d133      	bne.n	8000b86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_UART_MspInit+0x98>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <HAL_UART_MspInit+0x98>)
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_UART_MspInit+0x98>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_UART_MspInit+0x98>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <HAL_UART_MspInit+0x98>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_UART_MspInit+0x98>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b56:	230c      	movs	r3, #12
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b66:	2307      	movs	r3, #7
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <HAL_UART_MspInit+0x9c>)
 8000b72:	f000 fac7 	bl	8001104 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2105      	movs	r1, #5
 8000b7a:	2026      	movs	r0, #38	; 0x26
 8000b7c:	f000 fa06 	bl	8000f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b80:	2026      	movs	r0, #38	; 0x26
 8000b82:	f000 fa1f 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <HAL_InitTick+0xd4>)
 8000bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb4:	4a2e      	ldr	r2, [pc, #184]	; (8000c70 <HAL_InitTick+0xd4>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <HAL_InitTick+0xd4>)
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc8:	f107 020c 	add.w	r2, r7, #12
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 f8fe 	bl	8001dd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bd8:	f001 f8e8 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <HAL_InitTick+0xd8>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	3b01      	subs	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_InitTick+0xdc>)
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <HAL_InitTick+0xe0>)
 8000bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <HAL_InitTick+0xdc>)
 8000bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_InitTick+0xdc>)
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_InitTick+0xdc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_InitTick+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_InitTick+0xdc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c16:	4818      	ldr	r0, [pc, #96]	; (8000c78 <HAL_InitTick+0xdc>)
 8000c18:	f001 f90e 	bl	8001e38 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11b      	bne.n	8000c62 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <HAL_InitTick+0xdc>)
 8000c2c:	f001 f95e 	bl	8001eec <HAL_TIM_Base_Start_IT>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d111      	bne.n	8000c62 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c3e:	2019      	movs	r0, #25
 8000c40:	f000 f9c0 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d808      	bhi.n	8000c5c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	2019      	movs	r0, #25
 8000c50:	f000 f99c 	bl	8000f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_InitTick+0xe4>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e002      	b.n	8000c62 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3730      	adds	r7, #48	; 0x30
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	431bde83 	.word	0x431bde83
 8000c78:	200002f4 	.word	0x200002f4
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	20000004 	.word	0x20000004

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cb6:	f001 f989 	bl	8001fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200002f4 	.word	0x200002f4

08000cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <USART2_IRQHandler+0x10>)
 8000cca:	f001 fc25 	bl	8002518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000280 	.word	0x20000280

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f003 fe5f 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fbeb 	bl	8000508 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d40:	08004ae4 	.word	0x08004ae4
  ldr r2, =_sbss
 8000d44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d48:	20004094 	.word	0x20004094

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f8fc 	bl	8000f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f7ff ff0c 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe8e 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	2000033c 	.word	0x2000033c

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	2000033c 	.word	0x2000033c

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff4c 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9e:	f7ff ff61 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f7ff ffb1 	bl	8000f10 <NVIC_EncodePriority>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff80 	bl	8000ebc <__NVIC_SetPriority>
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff54 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fee:	f7ff fee5 	bl	8000dbc <HAL_GetTick>
 8000ff2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d008      	beq.n	8001012 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e052      	b.n	80010b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0216 	bic.w	r2, r2, #22
 8001020:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	695a      	ldr	r2, [r3, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001030:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	2b00      	cmp	r3, #0
 8001038:	d103      	bne.n	8001042 <HAL_DMA_Abort+0x62>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0208 	bic.w	r2, r2, #8
 8001050:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001062:	e013      	b.n	800108c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001064:	f7ff feaa 	bl	8000dbc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b05      	cmp	r3, #5
 8001070:	d90c      	bls.n	800108c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2220      	movs	r2, #32
 8001076:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2203      	movs	r2, #3
 800107c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e015      	b.n	80010b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1e4      	bne.n	8001064 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109e:	223f      	movs	r2, #63	; 0x3f
 80010a0:	409a      	lsls	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d004      	beq.n	80010de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00c      	b.n	80010f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2205      	movs	r2, #5
 80010e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0201 	bic.w	r2, r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e16b      	b.n	80013f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 815a 	bne.w	80013f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	2b02      	cmp	r3, #2
 8001154:	d130      	bne.n	80011b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80b4 	beq.w	80013f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b60      	ldr	r3, [pc, #384]	; (8001410 <HAL_GPIO_Init+0x30c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a5f      	ldr	r2, [pc, #380]	; (8001410 <HAL_GPIO_Init+0x30c>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_GPIO_Init+0x30c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a5b      	ldr	r2, [pc, #364]	; (8001414 <HAL_GPIO_Init+0x310>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_GPIO_Init+0x314>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d02b      	beq.n	800132a <HAL_GPIO_Init+0x226>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a51      	ldr	r2, [pc, #324]	; (800141c <HAL_GPIO_Init+0x318>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x222>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a50      	ldr	r2, [pc, #320]	; (8001420 <HAL_GPIO_Init+0x31c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x21e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <HAL_GPIO_Init+0x320>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x21a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4e      	ldr	r2, [pc, #312]	; (8001428 <HAL_GPIO_Init+0x324>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x216>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_GPIO_Init+0x328>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x212>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_Init+0x32c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x20e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4b      	ldr	r2, [pc, #300]	; (8001434 <HAL_GPIO_Init+0x330>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x20a>
 800130a:	2307      	movs	r3, #7
 800130c:	e00e      	b.n	800132c <HAL_GPIO_Init+0x228>
 800130e:	2308      	movs	r3, #8
 8001310:	e00c      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001312:	2306      	movs	r3, #6
 8001314:	e00a      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001316:	2305      	movs	r3, #5
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131a:	2304      	movs	r3, #4
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x228>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4935      	ldr	r1, [pc, #212]	; (8001414 <HAL_GPIO_Init+0x310>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134a:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <HAL_GPIO_Init+0x334>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136e:	4a32      	ldr	r2, [pc, #200]	; (8001438 <HAL_GPIO_Init+0x334>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001374:	4b30      	ldr	r3, [pc, #192]	; (8001438 <HAL_GPIO_Init+0x334>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001398:	4a27      	ldr	r2, [pc, #156]	; (8001438 <HAL_GPIO_Init+0x334>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c2:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f ae90 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40021800 	.word	0x40021800
 8001434:	40021c00 	.word	0x40021c00
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001480:	887a      	ldrh	r2, [r7, #2]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4013      	ands	r3, r2
 8001486:	041a      	lsls	r2, r3, #16
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43d9      	mvns	r1, r3
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	400b      	ands	r3, r1
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e267      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d075      	beq.n	80015ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c2:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d00c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ce:	4b85      	ldr	r3, [pc, #532]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d112      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014da:	4b82      	ldr	r3, [pc, #520]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014e6:	d10b      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d05b      	beq.n	80015ac <HAL_RCC_OscConfig+0x108>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d157      	bne.n	80015ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e242      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x74>
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e01d      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b70      	ldr	r3, [pc, #448]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6f      	ldr	r2, [pc, #444]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6c      	ldr	r2, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 800153c:	4b69      	ldr	r3, [pc, #420]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a68      	ldr	r2, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b66      	ldr	r3, [pc, #408]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fc2e 	bl	8000dbc <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fc2a 	bl	8000dbc <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e207      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	4b5b      	ldr	r3, [pc, #364]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xc0>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fc1a 	bl	8000dbc <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fc16 	bl	8000dbc <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1f3      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0xe8>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d063      	beq.n	8001682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d11c      	bne.n	800160c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b44      	ldr	r3, [pc, #272]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d116      	bne.n	800160c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x152>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e1c7      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4937      	ldr	r1, [pc, #220]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	e03a      	b.n	8001682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d020      	beq.n	8001656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001614:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <HAL_RCC_OscConfig+0x244>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fbcf 	bl	8000dbc <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fbcb 	bl	8000dbc <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1a8      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4925      	ldr	r1, [pc, #148]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_RCC_OscConfig+0x244>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fbae 	bl	8000dbc <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fbaa 	bl	8000dbc <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e187      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d036      	beq.n	80016fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d016      	beq.n	80016c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_RCC_OscConfig+0x248>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fb8e 	bl	8000dbc <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fb8a 	bl	8000dbc <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e167      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80016b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x200>
 80016c2:	e01b      	b.n	80016fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_OscConfig+0x248>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb77 	bl	8000dbc <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	e00e      	b.n	80016f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb73 	bl	8000dbc <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d907      	bls.n	80016f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e150      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
 80016e4:	40023800 	.word	0x40023800
 80016e8:	42470000 	.word	0x42470000
 80016ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	4b88      	ldr	r3, [pc, #544]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1ea      	bne.n	80016d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 8097 	beq.w	8001838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170e:	4b81      	ldr	r3, [pc, #516]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b7d      	ldr	r3, [pc, #500]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a7c      	ldr	r2, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001736:	2301      	movs	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b77      	ldr	r3, [pc, #476]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d118      	bne.n	8001778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4b74      	ldr	r3, [pc, #464]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a73      	ldr	r2, [pc, #460]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001752:	f7ff fb33 	bl	8000dbc <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175a:	f7ff fb2f 	bl	8000dbc <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e10c      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x2ea>
 8001780:	4b64      	ldr	r3, [pc, #400]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a63      	ldr	r2, [pc, #396]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
 800178c:	e01c      	b.n	80017c8 <HAL_RCC_OscConfig+0x324>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x30c>
 8001796:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a5e      	ldr	r2, [pc, #376]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
 80017a2:	4b5c      	ldr	r3, [pc, #368]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	4a5b      	ldr	r2, [pc, #364]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0x324>
 80017b0:	4b58      	ldr	r3, [pc, #352]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	4a57      	ldr	r2, [pc, #348]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70
 80017bc:	4b55      	ldr	r3, [pc, #340]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a54      	ldr	r2, [pc, #336]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 0304 	bic.w	r3, r3, #4
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d015      	beq.n	80017fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff faf4 	bl	8000dbc <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff faf0 	bl	8000dbc <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e0cb      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0ee      	beq.n	80017d8 <HAL_RCC_OscConfig+0x334>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7ff fade 	bl	8000dbc <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001802:	e00a      	b.n	800181a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff fada 	bl	8000dbc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0b5      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ee      	bne.n	8001804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a38      	ldr	r2, [pc, #224]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80a1 	beq.w	8001984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d05c      	beq.n	8001908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d141      	bne.n	80018da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_RCC_OscConfig+0x478>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff faae 	bl	8000dbc <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff faaa 	bl	8000dbc <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e087      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	019b      	lsls	r3, r3, #6
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	3b01      	subs	r3, #1
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	491b      	ldr	r1, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x478>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fa83 	bl	8000dbc <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fa7f 	bl	8000dbc <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e05c      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x416>
 80018d8:	e054      	b.n	8001984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x478>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fa6c 	bl	8000dbc <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fa68 	bl	8000dbc <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e045      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x444>
 8001906:	e03d      	b.n	8001984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e038      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
 8001914:	40023800 	.word	0x40023800
 8001918:	40007000 	.word	0x40007000
 800191c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x4ec>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d028      	beq.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d121      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d11a      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001950:	4013      	ands	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001958:	4293      	cmp	r3, r2
 800195a:	d111      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	3b01      	subs	r3, #1
 800196a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d107      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0cc      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d90c      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0b8      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a52      	ldr	r2, [pc, #328]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	494d      	ldr	r1, [pc, #308]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d044      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d119      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e067      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4934      	ldr	r1, [pc, #208]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff f99a 	bl	8000dbc <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7ff f996 	bl	8000dbc <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e04f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d20c      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e032      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4916      	ldr	r1, [pc, #88]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1a:	f000 f821 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	5ccb      	ldrb	r3, [r1, r3]
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f82e 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08004abc 	.word	0x08004abc
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b64:	b094      	sub	sp, #80	; 0x50
 8001b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	2300      	movs	r3, #0
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b78:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d00d      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	f200 80e1 	bhi.w	8001d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b92:	e0db      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b94:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b98:	e0db      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9e:	e0d8      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba0:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001baa:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	f04f 0000 	mov.w	r0, #0
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	0159      	lsls	r1, r3, #5
 8001be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be4:	0150      	lsls	r0, r2, #5
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4621      	mov	r1, r4
 8001bec:	1a51      	subs	r1, r2, r1
 8001bee:	6139      	str	r1, [r7, #16]
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c04:	4659      	mov	r1, fp
 8001c06:	018b      	lsls	r3, r1, #6
 8001c08:	4651      	mov	r1, sl
 8001c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0e:	4651      	mov	r1, sl
 8001c10:	018a      	lsls	r2, r1, #6
 8001c12:	4651      	mov	r1, sl
 8001c14:	ebb2 0801 	subs.w	r8, r2, r1
 8001c18:	4659      	mov	r1, fp
 8001c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c32:	4690      	mov	r8, r2
 8001c34:	4699      	mov	r9, r3
 8001c36:	4623      	mov	r3, r4
 8001c38:	eb18 0303 	adds.w	r3, r8, r3
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	462b      	mov	r3, r5
 8001c40:	eb49 0303 	adc.w	r3, r9, r3
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c52:	4629      	mov	r1, r5
 8001c54:	024b      	lsls	r3, r1, #9
 8001c56:	4621      	mov	r1, r4
 8001c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	024a      	lsls	r2, r1, #9
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c66:	2200      	movs	r2, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c70:	f7fe faae 	bl	80001d0 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c7c:	e058      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	2200      	movs	r2, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	4611      	mov	r1, r2
 8001c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c8e:	623b      	str	r3, [r7, #32]
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c98:	4642      	mov	r2, r8
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	f04f 0000 	mov.w	r0, #0
 8001ca0:	f04f 0100 	mov.w	r1, #0
 8001ca4:	0159      	lsls	r1, r3, #5
 8001ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001caa:	0150      	lsls	r0, r2, #5
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	00eb      	lsls	r3, r5, #3
 8001ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce6:	00e2      	lsls	r2, r4, #3
 8001ce8:	4614      	mov	r4, r2
 8001cea:	461d      	mov	r5, r3
 8001cec:	4643      	mov	r3, r8
 8001cee:	18e3      	adds	r3, r4, r3
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	eb45 0303 	adc.w	r3, r5, r3
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d06:	4629      	mov	r1, r5
 8001d08:	028b      	lsls	r3, r1, #10
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d10:	4621      	mov	r1, r4
 8001d12:	028a      	lsls	r2, r1, #10
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	61fa      	str	r2, [r7, #28]
 8001d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d24:	f7fe fa54 	bl	80001d0 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4a:	e002      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3750      	adds	r7, #80	; 0x50
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	007a1200 	.word	0x007a1200

08001d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0a9b      	lsrs	r3, r3, #10
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	08004acc 	.word	0x08004acc

08001dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001db0:	f7ff ffdc 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0b5b      	lsrs	r3, r3, #13
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08004acc 	.word	0x08004acc

08001dd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	220f      	movs	r2, #15
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_RCC_GetClockConfig+0x60>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0207 	and.w	r2, r3, #7
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	601a      	str	r2, [r3, #0]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40023c00 	.word	0x40023c00

08001e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e041      	b.n	8001ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f839 	bl	8001ed6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f000 f9d8 	bl	800222c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d001      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e04e      	b.n	8001fa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d022      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d01d      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d018      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00e      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d111      	bne.n	8001f90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d010      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8e:	e007      	b.n	8001fa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40000c00 	.word	0x40000c00
 8001fc0:	40010400 	.word	0x40010400
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40001800 	.word	0x40001800

08001fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0202 	mvn.w	r2, #2
 8001ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f8ee 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8e0 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f8f1 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b04      	cmp	r3, #4
 8002034:	d122      	bne.n	800207c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b04      	cmp	r3, #4
 8002042:	d11b      	bne.n	800207c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0204 	mvn.w	r2, #4
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8c4 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8b6 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f8c7 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d122      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b08      	cmp	r3, #8
 8002096:	d11b      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0208 	mvn.w	r2, #8
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f89a 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f88c 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f89d 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d122      	bne.n	8002124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d11b      	bne.n	8002124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0210 	mvn.w	r2, #16
 80020f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2208      	movs	r2, #8
 80020fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f870 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f862 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f873 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0201 	mvn.w	r2, #1
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fc92 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b80      	cmp	r3, #128	; 0x80
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f902 	bl	8002380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b40      	cmp	r3, #64	; 0x40
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f838 	bl	8002218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0220 	mvn.w	r2, #32
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8cc 	bl	800236c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a40      	ldr	r2, [pc, #256]	; (8002340 <TIM_Base_SetConfig+0x114>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224a:	d00f      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <TIM_Base_SetConfig+0x118>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00b      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3c      	ldr	r2, [pc, #240]	; (8002348 <TIM_Base_SetConfig+0x11c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3b      	ldr	r2, [pc, #236]	; (800234c <TIM_Base_SetConfig+0x120>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d003      	beq.n	800226c <TIM_Base_SetConfig+0x40>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3a      	ldr	r2, [pc, #232]	; (8002350 <TIM_Base_SetConfig+0x124>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d108      	bne.n	800227e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <TIM_Base_SetConfig+0x114>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02b      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228c:	d027      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <TIM_Base_SetConfig+0x118>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d023      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <TIM_Base_SetConfig+0x11c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01f      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	; (800234c <TIM_Base_SetConfig+0x120>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01b      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a29      	ldr	r2, [pc, #164]	; (8002350 <TIM_Base_SetConfig+0x124>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d017      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <TIM_Base_SetConfig+0x128>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <TIM_Base_SetConfig+0x12c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00f      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <TIM_Base_SetConfig+0x130>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00b      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a25      	ldr	r2, [pc, #148]	; (8002360 <TIM_Base_SetConfig+0x134>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a24      	ldr	r2, [pc, #144]	; (8002364 <TIM_Base_SetConfig+0x138>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a23      	ldr	r2, [pc, #140]	; (8002368 <TIM_Base_SetConfig+0x13c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d108      	bne.n	80022f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <TIM_Base_SetConfig+0x114>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <TIM_Base_SetConfig+0xf8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <TIM_Base_SetConfig+0x124>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d103      	bne.n	800232c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	615a      	str	r2, [r3, #20]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40010000 	.word	0x40010000
 8002344:	40000400 	.word	0x40000400
 8002348:	40000800 	.word	0x40000800
 800234c:	40000c00 	.word	0x40000c00
 8002350:	40010400 	.word	0x40010400
 8002354:	40014000 	.word	0x40014000
 8002358:	40014400 	.word	0x40014400
 800235c:	40014800 	.word	0x40014800
 8002360:	40001800 	.word	0x40001800
 8002364:	40001c00 	.word	0x40001c00
 8002368:	40002000 	.word	0x40002000

0800236c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e03f      	b.n	8002426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fb9e 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fd23 	bl	8002e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800240c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	4613      	mov	r3, r2
 800243a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b20      	cmp	r3, #32
 8002446:	d130      	bne.n	80024aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_UART_Transmit_IT+0x26>
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e029      	b.n	80024ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_UART_Transmit_IT+0x38>
 8002462:	2302      	movs	r3, #2
 8002464:	e022      	b.n	80024ac <HAL_UART_Transmit_IT+0x7e>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	88fa      	ldrh	r2, [r7, #6]
 800247e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2221      	movs	r2, #33	; 0x21
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d11d      	bne.n	800250e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_UART_Receive_IT+0x26>
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e016      	b.n	8002510 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_UART_Receive_IT+0x38>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e00f      	b.n	8002510 <HAL_UART_Receive_IT+0x58>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	461a      	mov	r2, r3
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fab5 	bl	8002a74 <UART_Start_Receive_IT>
 800250a:	4603      	mov	r3, r0
 800250c:	e000      	b.n	8002510 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800250e:	2302      	movs	r3, #2
  }
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0ba      	sub	sp, #232	; 0xe8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800254a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800255e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_UART_IRQHandler+0x66>
 800256a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fb99 	bl	8002cae <UART_Receive_IT>
      return;
 800257c:	e256      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800257e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80de 	beq.w	8002744 <HAL_UART_IRQHandler+0x22c>
 8002588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002598:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80d1 	beq.w	8002744 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_UART_IRQHandler+0xae>
 80025ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_UART_IRQHandler+0xd2>
 80025d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_UART_IRQHandler+0xf6>
 80025f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0204 	orr.w	r2, r3, #4
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d011      	beq.n	800263e <HAL_UART_IRQHandler+0x126>
 800261a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0208 	orr.w	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 81ed 	beq.w	8002a22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_UART_IRQHandler+0x14e>
 8002654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fb24 	bl	8002cae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_UART_IRQHandler+0x17a>
 800268a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d04f      	beq.n	8002732 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa2c 	bl	8002af0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d141      	bne.n	800272a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3314      	adds	r3, #20
 80026ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3314      	adds	r3, #20
 80026ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1d9      	bne.n	80026a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d013      	beq.n	8002722 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4a7d      	ldr	r2, [pc, #500]	; (80028f4 <HAL_UART_IRQHandler+0x3dc>)
 8002700:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fcda 	bl	80010c0 <HAL_DMA_Abort_IT>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800271c:	4610      	mov	r0, r2
 800271e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	e00e      	b.n	8002740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f990 	bl	8002a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	e00a      	b.n	8002740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f98c 	bl	8002a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	e006      	b.n	8002740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f988 	bl	8002a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800273e:	e170      	b.n	8002a22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	bf00      	nop
    return;
 8002742:	e16e      	b.n	8002a22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	2b01      	cmp	r3, #1
 800274a:	f040 814a 	bne.w	80029e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800274e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8143 	beq.w	80029e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 813c 	beq.w	80029e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	f040 80b4 	bne.w	80028f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800279c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8140 	beq.w	8002a26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ae:	429a      	cmp	r2, r3
 80027b0:	f080 8139 	bcs.w	8002a26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c6:	f000 8088 	beq.w	80028da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002802:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002806:	e841 2300 	strex	r3, r2, [r1]
 800280a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800280e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1d9      	bne.n	80027ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800283a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800283e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800284c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e1      	bne.n	8002816 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3314      	adds	r3, #20
 8002858:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3314      	adds	r3, #20
 8002872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800287c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e3      	bne.n	8002852 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028aa:	f023 0310 	bic.w	r3, r3, #16
 80028ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80028be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028c4:	e841 2300 	strex	r3, r2, [r1]
 80028c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e3      	bne.n	8002898 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fb83 	bl	8000fe0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8b6 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028f0:	e099      	b.n	8002a26 <HAL_UART_IRQHandler+0x50e>
 80028f2:	bf00      	nop
 80028f4:	08002bb7 	.word	0x08002bb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002900:	b29b      	uxth	r3, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 808b 	beq.w	8002a2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8086 	beq.w	8002a2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	330c      	adds	r3, #12
 800293e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002942:	647a      	str	r2, [r7, #68]	; 0x44
 8002944:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e3      	bne.n	800291e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3314      	adds	r3, #20
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	623b      	str	r3, [r7, #32]
   return(result);
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800297a:	633a      	str	r2, [r7, #48]	; 0x30
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e3      	bne.n	8002956 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0310 	bic.w	r3, r3, #16
 80029b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029c0:	61fa      	str	r2, [r7, #28]
 80029c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c4:	69b9      	ldr	r1, [r7, #24]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	617b      	str	r3, [r7, #20]
   return(result);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e3      	bne.n	800299c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f83e 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029e0:	e023      	b.n	8002a2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_UART_IRQHandler+0x4ea>
 80029ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8ef 	bl	8002bde <UART_Transmit_IT>
    return;
 8002a00:	e014      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <HAL_UART_IRQHandler+0x514>
 8002a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f92f 	bl	8002c7e <UART_EndTransmit_IT>
    return;
 8002a20:	e004      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
    return;
 8002a22:	bf00      	nop
 8002a24:	e002      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
      return;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
      return;
 8002a2a:	bf00      	nop
  }
}
 8002a2c:	37e8      	adds	r7, #232	; 0xe8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop

08002a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2222      	movs	r2, #34	; 0x22
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0220 	orr.w	r2, r2, #32
 8002ae0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b095      	sub	sp, #84	; 0x54
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	330c      	adds	r3, #12
 8002b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b18:	643a      	str	r2, [r7, #64]	; 0x40
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e5      	bne.n	8002af8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3314      	adds	r3, #20
 8002b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3314      	adds	r3, #20
 8002b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e5      	bne.n	8002b2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d119      	bne.n	8002b9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	e853 3f00 	ldrex	r3, [r3]
 8002b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f023 0310 	bic.w	r3, r3, #16
 8002b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	330c      	adds	r3, #12
 8002b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b88:	61ba      	str	r2, [r7, #24]
 8002b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	6979      	ldr	r1, [r7, #20]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	613b      	str	r3, [r7, #16]
   return(result);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e5      	bne.n	8002b68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002baa:	bf00      	nop
 8002bac:	3754      	adds	r7, #84	; 0x54
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff ff39 	bl	8002a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b21      	cmp	r3, #33	; 0x21
 8002bf0:	d13e      	bne.n	8002c70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfa:	d114      	bne.n	8002c26 <UART_Transmit_IT+0x48>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d110      	bne.n	8002c26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	1c9a      	adds	r2, r3, #2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	621a      	str	r2, [r3, #32]
 8002c24:	e008      	b.n	8002c38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	1c59      	adds	r1, r3, #1
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6211      	str	r1, [r2, #32]
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4619      	mov	r1, r3
 8002c46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10f      	bne.n	8002c6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e000      	b.n	8002c72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fec8 	bl	8002a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b08c      	sub	sp, #48	; 0x30
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b22      	cmp	r3, #34	; 0x22
 8002cc0:	f040 80ab 	bne.w	8002e1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ccc:	d117      	bne.n	8002cfe <UART_Receive_IT+0x50>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d113      	bne.n	8002cfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	1c9a      	adds	r2, r3, #2
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8002cfc:	e026      	b.n	8002d4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	d007      	beq.n	8002d22 <UART_Receive_IT+0x74>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <UART_Receive_IT+0x82>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	e008      	b.n	8002d42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d15a      	bne.n	8002e16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0220 	bic.w	r2, r2, #32
 8002d6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d135      	bne.n	8002e0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	613b      	str	r3, [r7, #16]
   return(result);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f023 0310 	bic.w	r3, r3, #16
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	623a      	str	r2, [r7, #32]
 8002dc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	69f9      	ldr	r1, [r7, #28]
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e5      	bne.n	8002da6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d10a      	bne.n	8002dfe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff fe29 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
 8002e0a:	e002      	b.n	8002e12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fd fc9b 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e002      	b.n	8002e1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3730      	adds	r7, #48	; 0x30
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e28:	b0c0      	sub	sp, #256	; 0x100
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	68d9      	ldr	r1, [r3, #12]
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	ea40 0301 	orr.w	r3, r0, r1
 8002e4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e7c:	f021 010c 	bic.w	r1, r1, #12
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9e:	6999      	ldr	r1, [r3, #24]
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	ea40 0301 	orr.w	r3, r0, r1
 8002eaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b8f      	ldr	r3, [pc, #572]	; (80030f0 <UART_SetConfig+0x2cc>)
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d005      	beq.n	8002ec4 <UART_SetConfig+0xa0>
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4b8d      	ldr	r3, [pc, #564]	; (80030f4 <UART_SetConfig+0x2d0>)
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d104      	bne.n	8002ece <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ec4:	f7fe ff72 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8002ec8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ecc:	e003      	b.n	8002ed6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ece:	f7fe ff59 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8002ed2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee0:	f040 810c 	bne.w	80030fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002eee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ef2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	462b      	mov	r3, r5
 8002efa:	1891      	adds	r1, r2, r2
 8002efc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002efe:	415b      	adcs	r3, r3
 8002f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f06:	4621      	mov	r1, r4
 8002f08:	eb12 0801 	adds.w	r8, r2, r1
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	eb43 0901 	adc.w	r9, r3, r1
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f26:	4690      	mov	r8, r2
 8002f28:	4699      	mov	r9, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	eb18 0303 	adds.w	r3, r8, r3
 8002f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f34:	462b      	mov	r3, r5
 8002f36:	eb49 0303 	adc.w	r3, r9, r3
 8002f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f52:	460b      	mov	r3, r1
 8002f54:	18db      	adds	r3, r3, r3
 8002f56:	653b      	str	r3, [r7, #80]	; 0x50
 8002f58:	4613      	mov	r3, r2
 8002f5a:	eb42 0303 	adc.w	r3, r2, r3
 8002f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f68:	f7fd f932 	bl	80001d0 <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4b61      	ldr	r3, [pc, #388]	; (80030f8 <UART_SetConfig+0x2d4>)
 8002f72:	fba3 2302 	umull	r2, r3, r3, r2
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	011c      	lsls	r4, r3, #4
 8002f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	1891      	adds	r1, r2, r2
 8002f92:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f94:	415b      	adcs	r3, r3
 8002f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f9c:	4641      	mov	r1, r8
 8002f9e:	eb12 0a01 	adds.w	sl, r2, r1
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	eb43 0b01 	adc.w	fp, r3, r1
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fbc:	4692      	mov	sl, r2
 8002fbe:	469b      	mov	fp, r3
 8002fc0:	4643      	mov	r3, r8
 8002fc2:	eb1a 0303 	adds.w	r3, sl, r3
 8002fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	eb4b 0303 	adc.w	r3, fp, r3
 8002fd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fe0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fe4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	18db      	adds	r3, r3, r3
 8002fec:	643b      	str	r3, [r7, #64]	; 0x40
 8002fee:	4613      	mov	r3, r2
 8002ff0:	eb42 0303 	adc.w	r3, r2, r3
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ffa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ffe:	f7fd f8e7 	bl	80001d0 <__aeabi_uldivmod>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4611      	mov	r1, r2
 8003008:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <UART_SetConfig+0x2d4>)
 800300a:	fba3 2301 	umull	r2, r3, r3, r1
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2264      	movs	r2, #100	; 0x64
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	1acb      	subs	r3, r1, r3
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800301e:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <UART_SetConfig+0x2d4>)
 8003020:	fba3 2302 	umull	r2, r3, r3, r2
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800302c:	441c      	add	r4, r3
 800302e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003032:	2200      	movs	r2, #0
 8003034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003038:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800303c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003040:	4642      	mov	r2, r8
 8003042:	464b      	mov	r3, r9
 8003044:	1891      	adds	r1, r2, r2
 8003046:	63b9      	str	r1, [r7, #56]	; 0x38
 8003048:	415b      	adcs	r3, r3
 800304a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800304c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003050:	4641      	mov	r1, r8
 8003052:	1851      	adds	r1, r2, r1
 8003054:	6339      	str	r1, [r7, #48]	; 0x30
 8003056:	4649      	mov	r1, r9
 8003058:	414b      	adcs	r3, r1
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003068:	4659      	mov	r1, fp
 800306a:	00cb      	lsls	r3, r1, #3
 800306c:	4651      	mov	r1, sl
 800306e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003072:	4651      	mov	r1, sl
 8003074:	00ca      	lsls	r2, r1, #3
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	4603      	mov	r3, r0
 800307c:	4642      	mov	r2, r8
 800307e:	189b      	adds	r3, r3, r2
 8003080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003084:	464b      	mov	r3, r9
 8003086:	460a      	mov	r2, r1
 8003088:	eb42 0303 	adc.w	r3, r2, r3
 800308c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800309c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030a4:	460b      	mov	r3, r1
 80030a6:	18db      	adds	r3, r3, r3
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030aa:	4613      	mov	r3, r2
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030ba:	f7fd f889 	bl	80001d0 <__aeabi_uldivmod>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <UART_SetConfig+0x2d4>)
 80030c4:	fba3 1302 	umull	r1, r3, r3, r2
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	2164      	movs	r1, #100	; 0x64
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	3332      	adds	r3, #50	; 0x32
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <UART_SetConfig+0x2d4>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	f003 0207 	and.w	r2, r3, #7
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4422      	add	r2, r4
 80030ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030ec:	e105      	b.n	80032fa <UART_SetConfig+0x4d6>
 80030ee:	bf00      	nop
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40011400 	.word	0x40011400
 80030f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003100:	2200      	movs	r2, #0
 8003102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003106:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800310a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800310e:	4642      	mov	r2, r8
 8003110:	464b      	mov	r3, r9
 8003112:	1891      	adds	r1, r2, r2
 8003114:	6239      	str	r1, [r7, #32]
 8003116:	415b      	adcs	r3, r3
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
 800311a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800311e:	4641      	mov	r1, r8
 8003120:	1854      	adds	r4, r2, r1
 8003122:	4649      	mov	r1, r9
 8003124:	eb43 0501 	adc.w	r5, r3, r1
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	00eb      	lsls	r3, r5, #3
 8003132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003136:	00e2      	lsls	r2, r4, #3
 8003138:	4614      	mov	r4, r2
 800313a:	461d      	mov	r5, r3
 800313c:	4643      	mov	r3, r8
 800313e:	18e3      	adds	r3, r4, r3
 8003140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003144:	464b      	mov	r3, r9
 8003146:	eb45 0303 	adc.w	r3, r5, r3
 800314a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800315a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800316a:	4629      	mov	r1, r5
 800316c:	008b      	lsls	r3, r1, #2
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003174:	4621      	mov	r1, r4
 8003176:	008a      	lsls	r2, r1, #2
 8003178:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800317c:	f7fd f828 	bl	80001d0 <__aeabi_uldivmod>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4b60      	ldr	r3, [pc, #384]	; (8003308 <UART_SetConfig+0x4e4>)
 8003186:	fba3 2302 	umull	r2, r3, r3, r2
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	011c      	lsls	r4, r3, #4
 800318e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003192:	2200      	movs	r2, #0
 8003194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003198:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800319c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	1891      	adds	r1, r2, r2
 80031a6:	61b9      	str	r1, [r7, #24]
 80031a8:	415b      	adcs	r3, r3
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b0:	4641      	mov	r1, r8
 80031b2:	1851      	adds	r1, r2, r1
 80031b4:	6139      	str	r1, [r7, #16]
 80031b6:	4649      	mov	r1, r9
 80031b8:	414b      	adcs	r3, r1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031c8:	4659      	mov	r1, fp
 80031ca:	00cb      	lsls	r3, r1, #3
 80031cc:	4651      	mov	r1, sl
 80031ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d2:	4651      	mov	r1, sl
 80031d4:	00ca      	lsls	r2, r1, #3
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	4642      	mov	r2, r8
 80031de:	189b      	adds	r3, r3, r2
 80031e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e4:	464b      	mov	r3, r9
 80031e6:	460a      	mov	r2, r1
 80031e8:	eb42 0303 	adc.w	r3, r2, r3
 80031ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80031fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003208:	4649      	mov	r1, r9
 800320a:	008b      	lsls	r3, r1, #2
 800320c:	4641      	mov	r1, r8
 800320e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003212:	4641      	mov	r1, r8
 8003214:	008a      	lsls	r2, r1, #2
 8003216:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800321a:	f7fc ffd9 	bl	80001d0 <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4b39      	ldr	r3, [pc, #228]	; (8003308 <UART_SetConfig+0x4e4>)
 8003224:	fba3 1302 	umull	r1, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	2164      	movs	r1, #100	; 0x64
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	3332      	adds	r3, #50	; 0x32
 8003236:	4a34      	ldr	r2, [pc, #208]	; (8003308 <UART_SetConfig+0x4e4>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003242:	441c      	add	r4, r3
 8003244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003248:	2200      	movs	r2, #0
 800324a:	673b      	str	r3, [r7, #112]	; 0x70
 800324c:	677a      	str	r2, [r7, #116]	; 0x74
 800324e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003252:	4642      	mov	r2, r8
 8003254:	464b      	mov	r3, r9
 8003256:	1891      	adds	r1, r2, r2
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	415b      	adcs	r3, r3
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003262:	4641      	mov	r1, r8
 8003264:	1851      	adds	r1, r2, r1
 8003266:	6039      	str	r1, [r7, #0]
 8003268:	4649      	mov	r1, r9
 800326a:	414b      	adcs	r3, r1
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800327a:	4659      	mov	r1, fp
 800327c:	00cb      	lsls	r3, r1, #3
 800327e:	4651      	mov	r1, sl
 8003280:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003284:	4651      	mov	r1, sl
 8003286:	00ca      	lsls	r2, r1, #3
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	4603      	mov	r3, r0
 800328e:	4642      	mov	r2, r8
 8003290:	189b      	adds	r3, r3, r2
 8003292:	66bb      	str	r3, [r7, #104]	; 0x68
 8003294:	464b      	mov	r3, r9
 8003296:	460a      	mov	r2, r1
 8003298:	eb42 0303 	adc.w	r3, r2, r3
 800329c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	663b      	str	r3, [r7, #96]	; 0x60
 80032a8:	667a      	str	r2, [r7, #100]	; 0x64
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032b6:	4649      	mov	r1, r9
 80032b8:	008b      	lsls	r3, r1, #2
 80032ba:	4641      	mov	r1, r8
 80032bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c0:	4641      	mov	r1, r8
 80032c2:	008a      	lsls	r2, r1, #2
 80032c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032c8:	f7fc ff82 	bl	80001d0 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <UART_SetConfig+0x4e4>)
 80032d2:	fba3 1302 	umull	r1, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2164      	movs	r1, #100	; 0x64
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	3332      	adds	r3, #50	; 0x32
 80032e4:	4a08      	ldr	r2, [pc, #32]	; (8003308 <UART_SetConfig+0x4e4>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	f003 020f 	and.w	r2, r3, #15
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4422      	add	r2, r4
 80032f8:	609a      	str	r2, [r3, #8]
}
 80032fa:	bf00      	nop
 80032fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003300:	46bd      	mov	sp, r7
 8003302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003306:	bf00      	nop
 8003308:	51eb851f 	.word	0x51eb851f

0800330c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800331a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800331e:	2b84      	cmp	r3, #132	; 0x84
 8003320:	d005      	beq.n	800332e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003322:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	3303      	adds	r3, #3
 800332c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800332e:	68fb      	ldr	r3, [r7, #12]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003340:	f000 fc00 	bl	8003b44 <vTaskStartScheduler>
  
  return osOK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	bd80      	pop	{r7, pc}

0800334a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800334a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334c:	b089      	sub	sp, #36	; 0x24
 800334e:	af04      	add	r7, sp, #16
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <osThreadCreate+0x54>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01c      	beq.n	800339e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685c      	ldr	r4, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681d      	ldr	r5, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691e      	ldr	r6, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ffc8 	bl	800330c <makeFreeRtosPriority>
 800337c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003386:	9202      	str	r2, [sp, #8]
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	9100      	str	r1, [sp, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4632      	mov	r2, r6
 8003390:	4629      	mov	r1, r5
 8003392:	4620      	mov	r0, r4
 8003394:	f000 f8ed 	bl	8003572 <xTaskCreateStatic>
 8003398:	4603      	mov	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e01c      	b.n	80033d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685c      	ldr	r4, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033aa:	b29e      	uxth	r6, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ffaa 	bl	800330c <makeFreeRtosPriority>
 80033b8:	4602      	mov	r2, r0
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	9200      	str	r2, [sp, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	4632      	mov	r2, r6
 80033c6:	4629      	mov	r1, r5
 80033c8:	4620      	mov	r0, r4
 80033ca:	f000 f92f 	bl	800362c <xTaskCreate>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d001      	beq.n	80033d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033d8:	68fb      	ldr	r3, [r7, #12]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <osDelay+0x16>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	e000      	b.n	80033fa <osDelay+0x18>
 80033f8:	2301      	movs	r3, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fa4c 	bl	8003898 <vTaskDelay>
  
  return osOK;
 8003400:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f103 0208 	add.w	r2, r3, #8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f04f 32ff 	mov.w	r2, #4294967295
 8003422:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f103 0208 	add.w	r2, r3, #8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f103 0208 	add.w	r2, r3, #8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d103      	bne.n	80034cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	e00c      	b.n	80034e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3308      	adds	r3, #8
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e002      	b.n	80034da <vListInsert+0x2e>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d2f6      	bcs.n	80034d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	601a      	str	r2, [r3, #0]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6892      	ldr	r2, [r2, #8]
 8003534:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6852      	ldr	r2, [r2, #4]
 800353e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d103      	bne.n	8003552 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	1e5a      	subs	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003572:	b580      	push	{r7, lr}
 8003574:	b08e      	sub	sp, #56	; 0x38
 8003576:	af04      	add	r7, sp, #16
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003598:	bf00      	nop
 800359a:	e7fe      	b.n	800359a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800359c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <xTaskCreateStatic+0x46>
	__asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	61fb      	str	r3, [r7, #28]
}
 80035b4:	bf00      	nop
 80035b6:	e7fe      	b.n	80035b6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035b8:	2354      	movs	r3, #84	; 0x54
 80035ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b54      	cmp	r3, #84	; 0x54
 80035c0:	d00a      	beq.n	80035d8 <xTaskCreateStatic+0x66>
	__asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	61bb      	str	r3, [r7, #24]
}
 80035d4:	bf00      	nop
 80035d6:	e7fe      	b.n	80035d6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01e      	beq.n	800361e <xTaskCreateStatic+0xac>
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01b      	beq.n	800361e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035f8:	2300      	movs	r3, #0
 80035fa:	9303      	str	r3, [sp, #12]
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	9302      	str	r3, [sp, #8]
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f850 	bl	80036b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003618:	f000 f8d4 	bl	80037c4 <prvAddNewTaskToReadyList>
 800361c:	e001      	b.n	8003622 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003622:	697b      	ldr	r3, [r7, #20]
	}
 8003624:	4618      	mov	r0, r3
 8003626:	3728      	adds	r7, #40	; 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	; 0x30
 8003630:	af04      	add	r7, sp, #16
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 ffe9 	bl	8004618 <pvPortMalloc>
 8003646:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00e      	beq.n	800366c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800364e:	2054      	movs	r0, #84	; 0x54
 8003650:	f000 ffe2 	bl	8004618 <pvPortMalloc>
 8003654:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
 8003662:	e005      	b.n	8003670 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003664:	6978      	ldr	r0, [r7, #20]
 8003666:	f001 f8a3 	bl	80047b0 <vPortFree>
 800366a:	e001      	b.n	8003670 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d017      	beq.n	80036a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	2300      	movs	r3, #0
 8003682:	9303      	str	r3, [sp, #12]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	9302      	str	r3, [sp, #8]
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f80e 	bl	80036b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800369a:	69f8      	ldr	r0, [r7, #28]
 800369c:	f000 f892 	bl	80037c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036a0:	2301      	movs	r3, #1
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	e002      	b.n	80036ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
 80036aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036ac:	69bb      	ldr	r3, [r7, #24]
	}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b088      	sub	sp, #32
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036ce:	3b01      	subs	r3, #1
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f023 0307 	bic.w	r3, r3, #7
 80036dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <prvInitialiseNewTask+0x48>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	617b      	str	r3, [r7, #20]
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01f      	beq.n	8003744 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	e012      	b.n	8003730 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	7819      	ldrb	r1, [r3, #0]
 8003712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	3334      	adds	r3, #52	; 0x34
 800371a:	460a      	mov	r2, r1
 800371c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d006      	beq.n	8003738 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3301      	adds	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	d9e9      	bls.n	800370a <prvInitialiseNewTask+0x54>
 8003736:	e000      	b.n	800373a <prvInitialiseNewTask+0x84>
			{
				break;
 8003738:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003742:	e003      	b.n	800374c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	2b06      	cmp	r3, #6
 8003750:	d901      	bls.n	8003756 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003752:	2306      	movs	r3, #6
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	2200      	movs	r2, #0
 8003766:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	3304      	adds	r3, #4
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fe6c 	bl	800344a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	3318      	adds	r3, #24
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fe67 	bl	800344a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003780:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	f1c3 0207 	rsb	r2, r3, #7
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	2200      	movs	r2, #0
 8003796:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	69b8      	ldr	r0, [r7, #24]
 80037a6:	f000 fd27 	bl	80041f8 <pxPortInitialiseStack>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037bc:	bf00      	nop
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037cc:	f000 fe42 	bl	8004454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037d0:	4b2a      	ldr	r3, [pc, #168]	; (800387c <prvAddNewTaskToReadyList+0xb8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a29      	ldr	r2, [pc, #164]	; (800387c <prvAddNewTaskToReadyList+0xb8>)
 80037d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037da:	4b29      	ldr	r3, [pc, #164]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037e2:	4a27      	ldr	r2, [pc, #156]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <prvAddNewTaskToReadyList+0xb8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d110      	bne.n	8003812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037f0:	f000 fbde 	bl	8003fb0 <prvInitialiseTaskLists>
 80037f4:	e00d      	b.n	8003812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037f6:	4b23      	ldr	r3, [pc, #140]	; (8003884 <prvAddNewTaskToReadyList+0xc0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	429a      	cmp	r2, r3
 800380a:	d802      	bhi.n	8003812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800380c:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <prvAddNewTaskToReadyList+0xc4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <prvAddNewTaskToReadyList+0xc4>)
 800381a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	2201      	movs	r2, #1
 8003822:	409a      	lsls	r2, r3
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <prvAddNewTaskToReadyList+0xc8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4313      	orrs	r3, r2
 800382a:	4a18      	ldr	r2, [pc, #96]	; (800388c <prvAddNewTaskToReadyList+0xc8>)
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <prvAddNewTaskToReadyList+0xcc>)
 800383c:	441a      	add	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7ff fe0d 	bl	8003464 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800384a:	f000 fe33 	bl	80044b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <prvAddNewTaskToReadyList+0xc0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	429a      	cmp	r2, r3
 8003862:	d207      	bcs.n	8003874 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <prvAddNewTaskToReadyList+0xd0>)
 8003866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000440 	.word	0x20000440
 8003880:	20000340 	.word	0x20000340
 8003884:	2000044c 	.word	0x2000044c
 8003888:	2000045c 	.word	0x2000045c
 800388c:	20000448 	.word	0x20000448
 8003890:	20000344 	.word	0x20000344
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d017      	beq.n	80038da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <vTaskDelay+0x60>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <vTaskDelay+0x30>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	60bb      	str	r3, [r7, #8]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038c8:	f000 f99c 	bl	8003c04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038cc:	2100      	movs	r1, #0
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fc2c 	bl	800412c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038d4:	f000 f9a4 	bl	8003c20 <xTaskResumeAll>
 80038d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d107      	bne.n	80038f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <vTaskDelay+0x64>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000468 	.word	0x20000468
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003908:	f000 fda4 	bl	8004454 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <vTaskSuspend+0x18>
 8003912:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <vTaskSuspend+0x104>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	e000      	b.n	800391a <vTaskSuspend+0x1a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fdfc 	bl	800351e <uxListRemove>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d115      	bne.n	8003958 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	4935      	ldr	r1, [pc, #212]	; (8003a08 <vTaskSuspend+0x108>)
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <vTaskSuspend+0x58>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	2201      	movs	r2, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43da      	mvns	r2, r3
 800394e:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <vTaskSuspend+0x10c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4013      	ands	r3, r2
 8003954:	4a2d      	ldr	r2, [pc, #180]	; (8003a0c <vTaskSuspend+0x10c>)
 8003956:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3318      	adds	r3, #24
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fdda 	bl	800351e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3304      	adds	r3, #4
 800396e:	4619      	mov	r1, r3
 8003970:	4827      	ldr	r0, [pc, #156]	; (8003a10 <vTaskSuspend+0x110>)
 8003972:	f7ff fd77 	bl	8003464 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d103      	bne.n	800398a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800398a:	f000 fd93 	bl	80044b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <vTaskSuspend+0x114>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003996:	f000 fd5d 	bl	8004454 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800399a:	f000 fba7 	bl	80040ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800399e:	f000 fd89 	bl	80044b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <vTaskSuspend+0x104>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d127      	bne.n	80039fc <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <vTaskSuspend+0x114>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <vTaskSuspend+0x118>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <vTaskSuspend+0xd2>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	60bb      	str	r3, [r7, #8]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <vTaskSuspend+0x11c>)
 80039d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039e2:	e00b      	b.n	80039fc <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <vTaskSuspend+0x110>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <vTaskSuspend+0x120>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d103      	bne.n	80039f8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <vTaskSuspend+0x104>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
	}
 80039f6:	e001      	b.n	80039fc <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80039f8:	f000 fa66 	bl	8003ec8 <vTaskSwitchContext>
	}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000340 	.word	0x20000340
 8003a08:	20000344 	.word	0x20000344
 8003a0c:	20000448 	.word	0x20000448
 8003a10:	2000042c 	.word	0x2000042c
 8003a14:	2000044c 	.word	0x2000044c
 8003a18:	20000468 	.word	0x20000468
 8003a1c:	e000ed04 	.word	0xe000ed04
 8003a20:	20000440 	.word	0x20000440

08003a24 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	60fb      	str	r3, [r7, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <prvTaskIsTaskSuspended+0x5c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10a      	bne.n	8003a70 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <prvTaskIsTaskSuspended+0x60>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d005      	beq.n	8003a70 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a70:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003a72:	4618      	mov	r0, r3
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	2000042c 	.word	0x2000042c
 8003a84:	20000400 	.word	0x20000400

08003a88 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <vTaskResume+0x28>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	60bb      	str	r3, [r7, #8]
}
 8003aac:	bf00      	nop
 8003aae:	e7fe      	b.n	8003aae <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003ab0:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <vTaskResume+0xac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d037      	beq.n	8003b2a <vTaskResume+0xa2>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d034      	beq.n	8003b2a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003ac0:	f000 fcc8 	bl	8004454 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7ff ffad 	bl	8003a24 <prvTaskIsTaskSuspended>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02a      	beq.n	8003b26 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fd22 	bl	800351e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	2201      	movs	r2, #1
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <vTaskResume+0xb0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <vTaskResume+0xb0>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <vTaskResume+0xb4>)
 8003afa:	441a      	add	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7ff fcae 	bl	8003464 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <vTaskResume+0xac>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d307      	bcc.n	8003b26 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <vTaskResume+0xb8>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003b26:	f000 fcc5 	bl	80044b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000340 	.word	0x20000340
 8003b38:	20000448 	.word	0x20000448
 8003b3c:	20000344 	.word	0x20000344
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	; 0x28
 8003b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b52:	463a      	mov	r2, r7
 8003b54:	1d39      	adds	r1, r7, #4
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fcba 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	9202      	str	r2, [sp, #8]
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	460a      	mov	r2, r1
 8003b72:	491e      	ldr	r1, [pc, #120]	; (8003bec <vTaskStartScheduler+0xa8>)
 8003b74:	481e      	ldr	r0, [pc, #120]	; (8003bf0 <vTaskStartScheduler+0xac>)
 8003b76:	f7ff fcfc 	bl	8003572 <xTaskCreateStatic>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <vTaskStartScheduler+0xb0>)
 8003b7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b80:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <vTaskStartScheduler+0xb0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	e001      	b.n	8003b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d116      	bne.n	8003bc6 <vTaskStartScheduler+0x82>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	613b      	str	r3, [r7, #16]
}
 8003baa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <vTaskStartScheduler+0xb4>)
 8003bae:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <vTaskStartScheduler+0xb8>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <vTaskStartScheduler+0xbc>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bc0:	f000 fba6 	bl	8004310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bc4:	e00e      	b.n	8003be4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d10a      	bne.n	8003be4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	60fb      	str	r3, [r7, #12]
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <vTaskStartScheduler+0x9e>
}
 8003be4:	bf00      	nop
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08004ab4 	.word	0x08004ab4
 8003bf0:	08003f81 	.word	0x08003f81
 8003bf4:	20000464 	.word	0x20000464
 8003bf8:	20000460 	.word	0x20000460
 8003bfc:	2000044c 	.word	0x2000044c
 8003c00:	20000444 	.word	0x20000444

08003c04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <vTaskSuspendAll+0x18>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <vTaskSuspendAll+0x18>)
 8003c10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c12:	bf00      	nop
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	20000468 	.word	0x20000468

08003c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c2e:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <xTaskResumeAll+0x114>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <xTaskResumeAll+0x2c>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	603b      	str	r3, [r7, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c4c:	f000 fc02 	bl	8004454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c50:	4b38      	ldr	r3, [pc, #224]	; (8003d34 <xTaskResumeAll+0x114>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	4a37      	ldr	r2, [pc, #220]	; (8003d34 <xTaskResumeAll+0x114>)
 8003c58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c5a:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <xTaskResumeAll+0x114>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d161      	bne.n	8003d26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c62:	4b35      	ldr	r3, [pc, #212]	; (8003d38 <xTaskResumeAll+0x118>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d05d      	beq.n	8003d26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c6a:	e02e      	b.n	8003cca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c6c:	4b33      	ldr	r3, [pc, #204]	; (8003d3c <xTaskResumeAll+0x11c>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3318      	adds	r3, #24
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fc50 	bl	800351e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3304      	adds	r3, #4
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fc4b 	bl	800351e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <xTaskResumeAll+0x120>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <xTaskResumeAll+0x120>)
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <xTaskResumeAll+0x124>)
 8003ca8:	441a      	add	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3304      	adds	r3, #4
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7ff fbd7 	bl	8003464 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cba:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <xTaskResumeAll+0x128>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d302      	bcc.n	8003cca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <xTaskResumeAll+0x12c>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cca:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <xTaskResumeAll+0x11c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1cc      	bne.n	8003c6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cd8:	f000 fa08 	bl	80040ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cdc:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <xTaskResumeAll+0x130>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ce8:	f000 f836 	bl	8003d58 <xTaskIncrementTick>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003cf2:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <xTaskResumeAll+0x12c>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f1      	bne.n	8003ce8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <xTaskResumeAll+0x130>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <xTaskResumeAll+0x12c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d12:	2301      	movs	r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <xTaskResumeAll+0x134>)
 8003d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d26:	f000 fbc5 	bl	80044b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000468 	.word	0x20000468
 8003d38:	20000440 	.word	0x20000440
 8003d3c:	20000400 	.word	0x20000400
 8003d40:	20000448 	.word	0x20000448
 8003d44:	20000344 	.word	0x20000344
 8003d48:	20000340 	.word	0x20000340
 8003d4c:	20000454 	.word	0x20000454
 8003d50:	20000450 	.word	0x20000450
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d62:	4b4e      	ldr	r3, [pc, #312]	; (8003e9c <xTaskIncrementTick+0x144>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f040 808e 	bne.w	8003e88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ea0 <xTaskIncrementTick+0x148>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d74:	4a4a      	ldr	r2, [pc, #296]	; (8003ea0 <xTaskIncrementTick+0x148>)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d120      	bne.n	8003dc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d80:	4b48      	ldr	r3, [pc, #288]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	603b      	str	r3, [r7, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xTaskIncrementTick+0x46>
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	4b40      	ldr	r3, [pc, #256]	; (8003ea8 <xTaskIncrementTick+0x150>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a3e      	ldr	r2, [pc, #248]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4a3e      	ldr	r2, [pc, #248]	; (8003ea8 <xTaskIncrementTick+0x150>)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <xTaskIncrementTick+0x154>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	4a3c      	ldr	r2, [pc, #240]	; (8003eac <xTaskIncrementTick+0x154>)
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	f000 f995 	bl	80040ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dc2:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <xTaskIncrementTick+0x158>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d348      	bcc.n	8003e5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd6:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <xTaskIncrementTick+0x158>)
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	601a      	str	r2, [r3, #0]
					break;
 8003dde:	e03e      	b.n	8003e5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de0:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d203      	bcs.n	8003e00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003df8:	4a2d      	ldr	r2, [pc, #180]	; (8003eb0 <xTaskIncrementTick+0x158>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003dfe:	e02e      	b.n	8003e5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fb8a 	bl	800351e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3318      	adds	r3, #24
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fb81 	bl	800351e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	2201      	movs	r2, #1
 8003e22:	409a      	lsls	r2, r3
 8003e24:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <xTaskIncrementTick+0x15c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	4a22      	ldr	r2, [pc, #136]	; (8003eb4 <xTaskIncrementTick+0x15c>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <xTaskIncrementTick+0x160>)
 8003e3c:	441a      	add	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7ff fb0d 	bl	8003464 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <xTaskIncrementTick+0x164>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3b9      	bcc.n	8003dcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e5c:	e7b6      	b.n	8003dcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e5e:	4b17      	ldr	r3, [pc, #92]	; (8003ebc <xTaskIncrementTick+0x164>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	4914      	ldr	r1, [pc, #80]	; (8003eb8 <xTaskIncrementTick+0x160>)
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d901      	bls.n	8003e7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <xTaskIncrementTick+0x168>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e82:	2301      	movs	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e004      	b.n	8003e92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <xTaskIncrementTick+0x16c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <xTaskIncrementTick+0x16c>)
 8003e90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e92:	697b      	ldr	r3, [r7, #20]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000468 	.word	0x20000468
 8003ea0:	20000444 	.word	0x20000444
 8003ea4:	200003f8 	.word	0x200003f8
 8003ea8:	200003fc 	.word	0x200003fc
 8003eac:	20000458 	.word	0x20000458
 8003eb0:	20000460 	.word	0x20000460
 8003eb4:	20000448 	.word	0x20000448
 8003eb8:	20000344 	.word	0x20000344
 8003ebc:	20000340 	.word	0x20000340
 8003ec0:	20000454 	.word	0x20000454
 8003ec4:	20000450 	.word	0x20000450

08003ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ece:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <vTaskSwitchContext+0xa4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ed6:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <vTaskSwitchContext+0xa8>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003edc:	e03f      	b.n	8003f5e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003ede:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <vTaskSwitchContext+0xa8>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee4:	4b23      	ldr	r3, [pc, #140]	; (8003f74 <vTaskSwitchContext+0xac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
 8003ef4:	f1c3 031f 	rsb	r3, r3, #31
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	491f      	ldr	r1, [pc, #124]	; (8003f78 <vTaskSwitchContext+0xb0>)
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	607b      	str	r3, [r7, #4]
}
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <vTaskSwitchContext+0x5a>
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <vTaskSwitchContext+0xb0>)
 8003f30:	4413      	add	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3308      	adds	r3, #8
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d104      	bne.n	8003f54 <vTaskSwitchContext+0x8c>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <vTaskSwitchContext+0xb4>)
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000468 	.word	0x20000468
 8003f70:	20000454 	.word	0x20000454
 8003f74:	20000448 	.word	0x20000448
 8003f78:	20000344 	.word	0x20000344
 8003f7c:	20000340 	.word	0x20000340

08003f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f88:	f000 f852 	bl	8004030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <prvIdleTask+0x28>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d9f9      	bls.n	8003f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <prvIdleTask+0x2c>)
 8003f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fa4:	e7f0      	b.n	8003f88 <prvIdleTask+0x8>
 8003fa6:	bf00      	nop
 8003fa8:	20000344 	.word	0x20000344
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	e00c      	b.n	8003fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4a12      	ldr	r2, [pc, #72]	; (8004010 <prvInitialiseTaskLists+0x60>)
 8003fc8:	4413      	add	r3, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fa1d 	bl	800340a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d9ef      	bls.n	8003fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fdc:	480d      	ldr	r0, [pc, #52]	; (8004014 <prvInitialiseTaskLists+0x64>)
 8003fde:	f7ff fa14 	bl	800340a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fe2:	480d      	ldr	r0, [pc, #52]	; (8004018 <prvInitialiseTaskLists+0x68>)
 8003fe4:	f7ff fa11 	bl	800340a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fe8:	480c      	ldr	r0, [pc, #48]	; (800401c <prvInitialiseTaskLists+0x6c>)
 8003fea:	f7ff fa0e 	bl	800340a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fee:	480c      	ldr	r0, [pc, #48]	; (8004020 <prvInitialiseTaskLists+0x70>)
 8003ff0:	f7ff fa0b 	bl	800340a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ff4:	480b      	ldr	r0, [pc, #44]	; (8004024 <prvInitialiseTaskLists+0x74>)
 8003ff6:	f7ff fa08 	bl	800340a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <prvInitialiseTaskLists+0x78>)
 8003ffc:	4a05      	ldr	r2, [pc, #20]	; (8004014 <prvInitialiseTaskLists+0x64>)
 8003ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <prvInitialiseTaskLists+0x7c>)
 8004002:	4a05      	ldr	r2, [pc, #20]	; (8004018 <prvInitialiseTaskLists+0x68>)
 8004004:	601a      	str	r2, [r3, #0]
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000344 	.word	0x20000344
 8004014:	200003d0 	.word	0x200003d0
 8004018:	200003e4 	.word	0x200003e4
 800401c:	20000400 	.word	0x20000400
 8004020:	20000414 	.word	0x20000414
 8004024:	2000042c 	.word	0x2000042c
 8004028:	200003f8 	.word	0x200003f8
 800402c:	200003fc 	.word	0x200003fc

08004030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004036:	e019      	b.n	800406c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004038:	f000 fa0c 	bl	8004454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <prvCheckTasksWaitingTermination+0x50>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fa68 	bl	800351e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <prvCheckTasksWaitingTermination+0x54>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3b01      	subs	r3, #1
 8004054:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <prvCheckTasksWaitingTermination+0x54>)
 8004056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <prvCheckTasksWaitingTermination+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3b01      	subs	r3, #1
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <prvCheckTasksWaitingTermination+0x58>)
 8004060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004062:	f000 fa27 	bl	80044b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f810 	bl	800408c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <prvCheckTasksWaitingTermination+0x58>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e1      	bne.n	8004038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000414 	.word	0x20000414
 8004084:	20000440 	.word	0x20000440
 8004088:	20000428 	.word	0x20000428

0800408c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fb84 	bl	80047b0 <vPortFree>
				vPortFree( pxTCB );
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fb81 	bl	80047b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040ae:	e018      	b.n	80040e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d103      	bne.n	80040c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fb78 	bl	80047b0 <vPortFree>
	}
 80040c0:	e00f      	b.n	80040e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d00a      	beq.n	80040e2 <prvDeleteTCB+0x56>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	60fb      	str	r3, [r7, #12]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <prvDeleteTCB+0x54>
	}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <prvResetNextTaskUnblockTime+0x38>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <prvResetNextTaskUnblockTime+0x3c>)
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004104:	e008      	b.n	8004118 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <prvResetNextTaskUnblockTime+0x38>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4a04      	ldr	r2, [pc, #16]	; (8004128 <prvResetNextTaskUnblockTime+0x3c>)
 8004116:	6013      	str	r3, [r2, #0]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	200003f8 	.word	0x200003f8
 8004128:	20000460 	.word	0x20000460

0800412c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800413c:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3304      	adds	r3, #4
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff f9eb 	bl	800351e <uxListRemove>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	2201      	movs	r2, #1
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43da      	mvns	r2, r3
 800415c:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4013      	ands	r3, r2
 8004162:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004164:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d10a      	bne.n	8004184 <prvAddCurrentTaskToDelayedList+0x58>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	481a      	ldr	r0, [pc, #104]	; (80041e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800417e:	f7ff f971 	bl	8003464 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004182:	e026      	b.n	80041d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4413      	add	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	429a      	cmp	r2, r3
 800419a:	d209      	bcs.n	80041b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f7ff f97f 	bl	80034ac <vListInsert>
}
 80041ae:	e010      	b.n	80041d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7ff f975 	bl	80034ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041c2:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d202      	bcs.n	80041d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041cc:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6013      	str	r3, [r2, #0]
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000444 	.word	0x20000444
 80041e0:	20000340 	.word	0x20000340
 80041e4:	20000448 	.word	0x20000448
 80041e8:	2000042c 	.word	0x2000042c
 80041ec:	200003fc 	.word	0x200003fc
 80041f0:	200003f8 	.word	0x200003f8
 80041f4:	20000460 	.word	0x20000460

080041f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3b04      	subs	r3, #4
 8004208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b04      	subs	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 0201 	bic.w	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3b04      	subs	r3, #4
 8004226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <pxPortInitialiseStack+0x64>)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3b14      	subs	r3, #20
 8004232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b04      	subs	r3, #4
 800423e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f06f 0202 	mvn.w	r2, #2
 8004246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3b20      	subs	r3, #32
 800424c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800424e:	68fb      	ldr	r3, [r7, #12]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	08004261 	.word	0x08004261

08004260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <prvTaskExitError+0x54>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d00a      	beq.n	800428a <prvTaskExitError+0x2a>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	60fb      	str	r3, [r7, #12]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <prvTaskExitError+0x28>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	60bb      	str	r3, [r7, #8]
}
 800429c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800429e:	bf00      	nop
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0fc      	beq.n	80042a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	2000000c 	.word	0x2000000c
	...

080042c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <pxCurrentTCBConst2>)
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	6808      	ldr	r0, [r1, #0]
 80042c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ca:	f380 8809 	msr	PSP, r0
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8811 	msr	BASEPRI, r0
 80042da:	4770      	bx	lr
 80042dc:	f3af 8000 	nop.w

080042e0 <pxCurrentTCBConst2>:
 80042e0:	20000340 	.word	0x20000340
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042e8:	4808      	ldr	r0, [pc, #32]	; (800430c <prvPortStartFirstTask+0x24>)
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	6800      	ldr	r0, [r0, #0]
 80042ee:	f380 8808 	msr	MSP, r0
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f380 8814 	msr	CONTROL, r0
 80042fa:	b662      	cpsie	i
 80042fc:	b661      	cpsie	f
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	df00      	svc	0
 8004308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800430a:	bf00      	nop
 800430c:	e000ed08 	.word	0xe000ed08

08004310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004316:	4b46      	ldr	r3, [pc, #280]	; (8004430 <xPortStartScheduler+0x120>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a46      	ldr	r2, [pc, #280]	; (8004434 <xPortStartScheduler+0x124>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10a      	bne.n	8004336 <xPortStartScheduler+0x26>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004336:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <xPortStartScheduler+0x120>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a3f      	ldr	r2, [pc, #252]	; (8004438 <xPortStartScheduler+0x128>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10a      	bne.n	8004356 <xPortStartScheduler+0x46>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60fb      	str	r3, [r7, #12]
}
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004356:	4b39      	ldr	r3, [pc, #228]	; (800443c <xPortStartScheduler+0x12c>)
 8004358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	22ff      	movs	r2, #255	; 0xff
 8004366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4b31      	ldr	r3, [pc, #196]	; (8004440 <xPortStartScheduler+0x130>)
 800437c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800437e:	4b31      	ldr	r3, [pc, #196]	; (8004444 <xPortStartScheduler+0x134>)
 8004380:	2207      	movs	r2, #7
 8004382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004384:	e009      	b.n	800439a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004386:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <xPortStartScheduler+0x134>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3b01      	subs	r3, #1
 800438c:	4a2d      	ldr	r2, [pc, #180]	; (8004444 <xPortStartScheduler+0x134>)
 800438e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	b2db      	uxtb	r3, r3
 8004398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d0ef      	beq.n	8004386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043a6:	4b27      	ldr	r3, [pc, #156]	; (8004444 <xPortStartScheduler+0x134>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1c3 0307 	rsb	r3, r3, #7
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d00a      	beq.n	80043c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60bb      	str	r3, [r7, #8]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043c8:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <xPortStartScheduler+0x134>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <xPortStartScheduler+0x134>)
 80043d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043d2:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <xPortStartScheduler+0x134>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043da:	4a1a      	ldr	r2, [pc, #104]	; (8004444 <xPortStartScheduler+0x134>)
 80043dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <xPortStartScheduler+0x138>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a17      	ldr	r2, [pc, #92]	; (8004448 <xPortStartScheduler+0x138>)
 80043ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <xPortStartScheduler+0x138>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a14      	ldr	r2, [pc, #80]	; (8004448 <xPortStartScheduler+0x138>)
 80043f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043fe:	f000 f8dd 	bl	80045bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <xPortStartScheduler+0x13c>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004408:	f000 f8fc 	bl	8004604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <xPortStartScheduler+0x140>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <xPortStartScheduler+0x140>)
 8004412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004418:	f7ff ff66 	bl	80042e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800441c:	f7ff fd54 	bl	8003ec8 <vTaskSwitchContext>
	prvTaskExitError();
 8004420:	f7ff ff1e 	bl	8004260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	e000ed00 	.word	0xe000ed00
 8004434:	410fc271 	.word	0x410fc271
 8004438:	410fc270 	.word	0x410fc270
 800443c:	e000e400 	.word	0xe000e400
 8004440:	2000046c 	.word	0x2000046c
 8004444:	20000470 	.word	0x20000470
 8004448:	e000ed20 	.word	0xe000ed20
 800444c:	2000000c 	.word	0x2000000c
 8004450:	e000ef34 	.word	0xe000ef34

08004454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	607b      	str	r3, [r7, #4]
}
 800446c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <vPortEnterCritical+0x58>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	4a0d      	ldr	r2, [pc, #52]	; (80044ac <vPortEnterCritical+0x58>)
 8004476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <vPortEnterCritical+0x58>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10f      	bne.n	80044a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <vPortEnterCritical+0x5c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	603b      	str	r3, [r7, #0]
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <vPortEnterCritical+0x4a>
	}
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	2000000c 	.word	0x2000000c
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <vPortExitCritical+0x50>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <vPortExitCritical+0x24>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	607b      	str	r3, [r7, #4]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <vPortExitCritical+0x50>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3b01      	subs	r3, #1
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <vPortExitCritical+0x50>)
 80044e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <vPortExitCritical+0x50>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <vPortExitCritical+0x42>
 80044ea:	2300      	movs	r3, #0
 80044ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	2000000c 	.word	0x2000000c
	...

08004510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004510:	f3ef 8009 	mrs	r0, PSP
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <pxCurrentTCBConst>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f01e 0f10 	tst.w	lr, #16
 8004520:	bf08      	it	eq
 8004522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	6010      	str	r0, [r2, #0]
 800452c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004534:	f380 8811 	msr	BASEPRI, r0
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f7ff fcc2 	bl	8003ec8 <vTaskSwitchContext>
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	f380 8811 	msr	BASEPRI, r0
 800454c:	bc09      	pop	{r0, r3}
 800454e:	6819      	ldr	r1, [r3, #0]
 8004550:	6808      	ldr	r0, [r1, #0]
 8004552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004556:	f01e 0f10 	tst.w	lr, #16
 800455a:	bf08      	it	eq
 800455c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004560:	f380 8809 	msr	PSP, r0
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	f3af 8000 	nop.w

08004570 <pxCurrentTCBConst>:
 8004570:	20000340 	.word	0x20000340
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop

08004578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004592:	f7ff fbe1 	bl	8003d58 <xTaskIncrementTick>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <SysTick_Handler+0x40>)
 800459e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f383 8811 	msr	BASEPRI, r3
}
 80045ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045c6:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <vPortSetupTimerInterrupt+0x38>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <vPortSetupTimerInterrupt+0x3c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <vPortSetupTimerInterrupt+0x40>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	4a09      	ldr	r2, [pc, #36]	; (8004600 <vPortSetupTimerInterrupt+0x44>)
 80045da:	3b01      	subs	r3, #1
 80045dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010
 80045f4:	e000e018 	.word	0xe000e018
 80045f8:	20000000 	.word	0x20000000
 80045fc:	10624dd3 	.word	0x10624dd3
 8004600:	e000e014 	.word	0xe000e014

08004604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004614 <vPortEnableVFP+0x10>
 8004608:	6801      	ldr	r1, [r0, #0]
 800460a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800460e:	6001      	str	r1, [r0, #0]
 8004610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004612:	bf00      	nop
 8004614:	e000ed88 	.word	0xe000ed88

08004618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004624:	f7ff faee 	bl	8003c04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004628:	4b5b      	ldr	r3, [pc, #364]	; (8004798 <pvPortMalloc+0x180>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004630:	f000 f920 	bl	8004874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004634:	4b59      	ldr	r3, [pc, #356]	; (800479c <pvPortMalloc+0x184>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	f040 8093 	bne.w	8004768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01d      	beq.n	8004684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004648:	2208      	movs	r2, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	2b00      	cmp	r3, #0
 8004658:	d014      	beq.n	8004684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f023 0307 	bic.w	r3, r3, #7
 8004660:	3308      	adds	r3, #8
 8004662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <pvPortMalloc+0x6c>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	617b      	str	r3, [r7, #20]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d06e      	beq.n	8004768 <pvPortMalloc+0x150>
 800468a:	4b45      	ldr	r3, [pc, #276]	; (80047a0 <pvPortMalloc+0x188>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d869      	bhi.n	8004768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004694:	4b43      	ldr	r3, [pc, #268]	; (80047a4 <pvPortMalloc+0x18c>)
 8004696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004698:	4b42      	ldr	r3, [pc, #264]	; (80047a4 <pvPortMalloc+0x18c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800469e:	e004      	b.n	80046aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d903      	bls.n	80046bc <pvPortMalloc+0xa4>
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f1      	bne.n	80046a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046bc:	4b36      	ldr	r3, [pc, #216]	; (8004798 <pvPortMalloc+0x180>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d050      	beq.n	8004768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2208      	movs	r2, #8
 80046cc:	4413      	add	r3, r2
 80046ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1ad2      	subs	r2, r2, r3
 80046e0:	2308      	movs	r3, #8
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d91f      	bls.n	8004728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <pvPortMalloc+0xf8>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	613b      	str	r3, [r7, #16]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	1ad2      	subs	r2, r2, r3
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004722:	69b8      	ldr	r0, [r7, #24]
 8004724:	f000 f908 	bl	8004938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004728:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <pvPortMalloc+0x188>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <pvPortMalloc+0x188>)
 8004734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004736:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <pvPortMalloc+0x188>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <pvPortMalloc+0x190>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d203      	bcs.n	800474a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004742:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <pvPortMalloc+0x188>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <pvPortMalloc+0x190>)
 8004748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <pvPortMalloc+0x184>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	431a      	orrs	r2, r3
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <pvPortMalloc+0x194>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a11      	ldr	r2, [pc, #68]	; (80047ac <pvPortMalloc+0x194>)
 8004766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004768:	f7ff fa5a 	bl	8003c20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <pvPortMalloc+0x174>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	60fb      	str	r3, [r7, #12]
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <pvPortMalloc+0x172>
	return pvReturn;
 800478c:	69fb      	ldr	r3, [r7, #28]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3728      	adds	r7, #40	; 0x28
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	2000407c 	.word	0x2000407c
 800479c:	20004090 	.word	0x20004090
 80047a0:	20004080 	.word	0x20004080
 80047a4:	20004074 	.word	0x20004074
 80047a8:	20004084 	.word	0x20004084
 80047ac:	20004088 	.word	0x20004088

080047b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d04d      	beq.n	800485e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047c2:	2308      	movs	r3, #8
 80047c4:	425b      	negs	r3, r3
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4413      	add	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <vPortFree+0xb8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <vPortFree+0x44>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60fb      	str	r3, [r7, #12]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <vPortFree+0x62>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	60bb      	str	r3, [r7, #8]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <vPortFree+0xb8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01e      	beq.n	800485e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d11a      	bne.n	800485e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <vPortFree+0xb8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	43db      	mvns	r3, r3
 8004832:	401a      	ands	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004838:	f7ff f9e4 	bl	8003c04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <vPortFree+0xbc>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4413      	add	r3, r2
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <vPortFree+0xbc>)
 8004848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800484a:	6938      	ldr	r0, [r7, #16]
 800484c:	f000 f874 	bl	8004938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <vPortFree+0xc0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	4a06      	ldr	r2, [pc, #24]	; (8004870 <vPortFree+0xc0>)
 8004858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800485a:	f7ff f9e1 	bl	8003c20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800485e:	bf00      	nop
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20004090 	.word	0x20004090
 800486c:	20004080 	.word	0x20004080
 8004870:	2000408c 	.word	0x2000408c

08004874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800487a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800487e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <prvHeapInit+0xac>)
 8004882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00c      	beq.n	80048a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3307      	adds	r3, #7
 8004892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0307 	bic.w	r3, r3, #7
 800489a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <prvHeapInit+0xac>)
 80048a4:	4413      	add	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048ac:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <prvHeapInit+0xb0>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <prvHeapInit+0xb0>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	4413      	add	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048c0:	2208      	movs	r2, #8
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0307 	bic.w	r3, r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <prvHeapInit+0xb4>)
 80048d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <prvHeapInit+0xb4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2200      	movs	r2, #0
 80048dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <prvHeapInit+0xb4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <prvHeapInit+0xb4>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4a0a      	ldr	r2, [pc, #40]	; (800492c <prvHeapInit+0xb8>)
 8004902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a09      	ldr	r2, [pc, #36]	; (8004930 <prvHeapInit+0xbc>)
 800490a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800490c:	4b09      	ldr	r3, [pc, #36]	; (8004934 <prvHeapInit+0xc0>)
 800490e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004912:	601a      	str	r2, [r3, #0]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20000474 	.word	0x20000474
 8004924:	20004074 	.word	0x20004074
 8004928:	2000407c 	.word	0x2000407c
 800492c:	20004084 	.word	0x20004084
 8004930:	20004080 	.word	0x20004080
 8004934:	20004090 	.word	0x20004090

08004938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004940:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <prvInsertBlockIntoFreeList+0xac>)
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e002      	b.n	800494c <prvInsertBlockIntoFreeList+0x14>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d8f7      	bhi.n	8004946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4413      	add	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d108      	bne.n	800497a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	441a      	add	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	441a      	add	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d118      	bne.n	80049c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d00d      	beq.n	80049b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	441a      	add	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	e008      	b.n	80049c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <prvInsertBlockIntoFreeList+0xb0>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e003      	b.n	80049c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d002      	beq.n	80049d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20004074 	.word	0x20004074
 80049e8:	2000407c 	.word	0x2000407c

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 f828 	bl	8004a54 <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08004adc 	.word	0x08004adc
 8004a28:	08004adc 	.word	0x08004adc
 8004a2c:	08004adc 	.word	0x08004adc
 8004a30:	08004ae0 	.word	0x08004ae0

08004a34 <memset>:
 8004a34:	4402      	add	r2, r0
 8004a36:	4603      	mov	r3, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <strcpy>:
 8004a44:	4603      	mov	r3, r0
 8004a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a4a:	f803 2b01 	strb.w	r2, [r3], #1
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	d1f9      	bne.n	8004a46 <strcpy+0x2>
 8004a52:	4770      	bx	lr

08004a54 <_init>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr

08004a60 <_fini>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	bf00      	nop
 8004a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a66:	bc08      	pop	{r3}
 8004a68:	469e      	mov	lr, r3
 8004a6a:	4770      	bx	lr
